//
//	Package - transpiled by c4go
//
//	If you have found any issues, please raise an issue at:
//	https://github.com/Konstantin8105/c4go/
//

// Warning (*ast.CallExpr):  otf.c:81 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:81 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:86 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:86 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:86 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:86 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ReturnStmt):  otf.c:86 :cannot transpileToStmt : cannot transpileReturnStmt. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:95 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:95 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:95 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:95 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:95 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:96 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:96 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:100 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:100 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:101 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:101 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:102 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:102 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:103 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:103 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:104 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:104 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:105 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:105 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:121 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:121 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `/`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:121 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `/`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:121 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `/`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:127 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:127 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:127 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:128 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:128 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:128 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:129 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:129 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:129 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:130 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:130 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:130 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:133 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:133 :cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ArraySubscriptExpr):  otf.c:133 :cannot transpile ArraySubscriptExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ArraySubscriptExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ArraySubscriptExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:145 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:145 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:149 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:149 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:150 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:150 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:151 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:151 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:151 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:151 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.VarDecl):  otf.c:151 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:152 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:152 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:165 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:165 :cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:165 :cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:168 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:168 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:168 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:172 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:172 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:191 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:191 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:192 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:192 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:198 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:198 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:199 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:199 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:201 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:201 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:202 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:202 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:206 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:215 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:215 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:215 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:217 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:217 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:217 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:226 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:226 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:229 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:229 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:230 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  :0 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CompoundAssignOperator):  otf.c:230 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpileCompoundAssignOperator. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:232 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:232 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:234 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:234 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:235 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:235 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:236 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:246 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:246 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:247 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:247 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:254 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:254 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:254 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:258 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:258 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:258 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:259 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:259 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:259 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:271 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:271 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:275 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:275 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:276 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:276 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:276 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:279 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:279 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:279 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:283 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:283 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:285 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:285 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:286 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:286 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:289 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:289 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:289 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:342 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:356 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:367 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:367 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:368 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:368 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:373 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:373 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:373 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:384 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:384 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:384 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:399 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:399 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:400 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:400 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:401 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:401 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:407 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:407 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:408 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:408 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:408 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:408 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:408 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:408 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:410 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:410 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:410 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:410 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:410 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:411 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:411 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:413 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:413 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:433 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:433 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:433 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:433 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:433 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:433 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = error in transpileCallExpr : name of call function is classdef. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:434 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:434 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:434 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:434 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:434 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:434 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = error in transpileCallExpr : name of call function is classdef. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:435 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:435 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:436 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:436 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:462 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:462 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:470 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:470 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:470 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:471 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:471 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:471 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:475 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.IfStmt):  otf.c:475 :cannot casting {uint16_t -> bool}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:478 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.IfStmt):  otf.c:478 :cannot casting {uint16_t -> bool}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:485 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:485 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:486 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:486 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:488 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:489 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:497 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:498 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:513 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:513 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:526 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:526 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:526 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:527 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:527 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:527 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:528 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:528 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:528 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:529 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:529 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:530 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:530 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:538 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:538 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.IfStmt):  otf.c:538 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:546 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:546 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:546 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:546 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:546 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:547 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:548 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:560 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:560 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:560 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:560 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:560 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:561 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:562 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:578 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:578 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:592 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:592 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:592 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:593 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:593 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:593 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:594 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:594 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:594 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:595 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:595 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:596 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:596 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:604 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:604 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.IfStmt):  otf.c:604 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:612 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:612 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:612 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:612 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:612 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:613 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:614 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:625 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:625 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:625 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:625 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:625 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:626 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:626 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:631 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.UnaryOperator):  otf.c:631 :cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:634 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:634 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:634 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:634 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:634 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:635 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:636 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:689 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:689 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:692 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:692 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:692 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:695 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:706 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:706 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:711 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:723 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:723 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:727 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:727 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:727 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:728 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:728 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:728 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:730 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:730 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:730 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:730 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:730 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:731 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:731 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:736 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:747 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:747 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:752 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:752 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:752 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:753 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:753 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:753 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:755 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:755 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:755 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:755 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:755 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:756 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:756 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:758 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:758 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:758 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:758 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:758 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:759 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:759 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:764 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:765 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:777 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:777 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:777 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:777 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:777 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:778 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:778 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:786 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:786 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:786 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:788 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:788 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:788 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:793 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:793 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:793 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:795 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:795 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:795 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:800 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:800 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:800 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:802 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:802 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:802 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:807 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:807 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:807 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:809 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:809 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:810 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:810 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:810 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:810 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:810 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:811 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:811 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:812 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:812 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:813 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:813 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:813 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:815 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:815 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:815 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:815 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:815 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:818 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:818 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:818 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:819 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:819 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:844 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:844 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:844 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:844 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:844 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:845 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:845 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:845 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:845 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:845 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:846 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:846 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:849 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:849 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:860 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:860 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:860 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:871 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:871 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:871 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:871 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:871 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:872 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:872 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:873 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:873 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:879 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:879 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:879 :argument position is 2. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is otf_featrec. argument position is 2. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is otf_featrec. argument position is 2. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:908 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:908 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:908 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:908 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:908 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:914 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:914 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:914 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:921 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:921 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:922 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:922 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:922 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:923 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:923 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.IfStmt):  otf.c:923 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:930 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:930 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:930 :cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:930 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:930 :argument position is 1. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.IfStmt):  otf.c:930 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is mkfn_lang. argument position is 1. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:942 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:942 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:942 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:942 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:942 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:948 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:948 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:948 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:948 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:948 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:949 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:949 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:950 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:950 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:955 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:955 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:955 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:955 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:955 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:958 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:958 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:958 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:959 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:959 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:987 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:987 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:987 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:987 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:987 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:993 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:993 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:993 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:993 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:993 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:994 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:994 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:995 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:995 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1000 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ParenExpr):  otf.c:1000 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:1000 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:1000 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:1000 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1003 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:1003 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:1003 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1004 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:1004 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:1077 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ReturnStmt):  otf.c:1077 :cannot transpileToStmt : cannot transpileReturnStmt. err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1082 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:1082 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1171 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.ImplicitCastExpr):  otf.c:1171 :argument position is 1. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1171 :cannot transpileToStmt : cannot transpileToExpr. err = error in transpileCallExpr : name of call function is cff_char. argument position is 1. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1178 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.VarDecl):  otf.c:1178 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1209 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.VarDecl):  otf.c:1209 :cannot casting {uint32_t -> unsigned int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:1214 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:1214 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.BinaryOperator):  otf.c:1214 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
// Warning (*ast.CallExpr):  otf.c:1250 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.VarDecl):  otf.c:1250 :cannot casting {uint32_t -> unsigned int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:1257 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1257 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1257 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.CallExpr):  otf.c:1259 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.ParenExpr):  otf.c:1259 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1259 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.BinaryOperator):  otf.c:1259 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning (*ast.VarDecl):  otf.c:1259 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.

package main

// #include </usr/include/netinet/in.h>
// #include </usr/include/arpa/inet.h>
// #include </usr/include/string.h>
import "C"

import "unicode"
import "sort"
import "reflect"
import "runtime"
import "os"
import "fmt"
import "unsafe"
import "github.com/Konstantin8105/c4go/noarch"

// afm_charfield - transpiled function from  afm.c:10
func afm_charfield(s []byte, d []byte) []byte {
	for int32(s[0]) != 0 && noarch.Not(int32(((__ctype_b_loc())[0])[int32(s[0])])&int32(uint16(noarch.ISspace))) && int32(s[0]) != int32(';') {
		// AFM fonts
		(func() []byte {
			defer func() {
				d = d[0+1:]
			}()
			return d
		}())[0] = (func() []byte {
			defer func() {
				s = s[0+1:]
			}()
			return s
		}())[0]
	}
	for int32(((__ctype_b_loc())[0])[int32(s[0])])&int32(uint16(noarch.ISspace)) != 0 || int32(s[0]) == int32(';') {
		s = s[0+1:]
	}
	d[0] = '\x00'
	return s
}

// uwid - transpiled function from  afm.c:20
func uwid(w int32) int32 {
	var div int32 = 72000 / mkfn_res
	return func() int32 {
		if w < 0 {
			return w - div/20
		}
		return w + div/20
	}() * 10 / div
}

// afm_read - transpiled function from  afm.c:25
func afm_read() int32 {
	var ln []byte = make([]byte, 1024)
	var ch []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var pos []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var c1 []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var c2 []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var wid []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var field []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var llx []byte = []byte("0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var lly []byte = []byte("0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var urx []byte = []byte("0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var ury []byte = []byte("0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	var fontname []byte = make([]byte, 128)
	var s []byte
	for noarch.Fgets(ln, int32(1024), noarch.Stdin) != nil {
		if int32(ln[0]) == int32('#') {
			continue
		}
		if noarch.Not(strncmp([]byte("FontName \x00"), ln, 8)) {
			noarch.Sscanf(ln, []byte("FontName %s\x00"), fontname)
			continue
		}
		if noarch.Not(strncmp([]byte("StartCharMetrics\x00"), ln, 16)) {
			break
		}
	}
	for noarch.Fgets(ln, int32(1024), noarch.Stdin) != nil {
		if int32(ln[0]) == int32('#') {
			continue
		}
		if noarch.Not(strncmp([]byte("EndCharMetrics\x00"), ln, 14)) {
			break
		}
		s = ln
		for s[0] != 0 {
			s = afm_charfield(s, field)
			if noarch.Not(noarch.Strcmp([]byte("C\x00"), field)) {
				s = afm_charfield(s, pos)
				continue
			}
			if noarch.Not(noarch.Strcmp([]byte("WX\x00"), field)) {
				s = afm_charfield(s, wid)
				continue
			}
			if noarch.Not(noarch.Strcmp([]byte("N\x00"), field)) {
				s = afm_charfield(s, ch)
				continue
			}
			if noarch.Not(noarch.Strcmp([]byte("B\x00"), field)) {
				s = afm_charfield(s, llx)
				s = afm_charfield(s, lly)
				s = afm_charfield(s, urx)
				s = afm_charfield(s, ury)
				continue
			}
			if noarch.Not(noarch.Strcmp([]byte("L\x00"), field)) {
				s = afm_charfield(s, c1)
				s = afm_charfield(s, c2)
				continue
			}
			break
		}
		if int32(ch[0]) != 0 && int32(pos[0]) != 0 && int32(wid[0]) != 0 {
			mkfn_char(ch, noarch.Atoi(pos), 0, uwid(noarch.Atoi(wid)), uwid(noarch.Atoi(llx)), uwid(noarch.Atoi(lly)), uwid(noarch.Atoi(urx)), uwid(noarch.Atoi(ury)))
		}
	}
	mkfn_header(fontname)
	for noarch.Fgets(ln, int32(1024), noarch.Stdin) != nil {
		if int32(ln[0]) == int32('#') {
			continue
		}
		if noarch.Not(strncmp([]byte("StartKernPairs\x00"), ln, 14)) {
			break
		}
	}
	for noarch.Fgets(ln, int32(1024), noarch.Stdin) != nil {
		if int32(ln[0]) == int32('#') {
			continue
		}
		if noarch.Not(strncmp([]byte("EndKernPairs\x00"), ln, 12)) {
			break
		}
		if noarch.Sscanf(ln, []byte("KPX %s %s %s\x00"), c1, c2, wid) == 3 {
			mkfn_kern(c1, c2, uwid(noarch.Atoi(wid)))
		}
	}
	return 0
}

// mkfn_scripts - transpiled function from  mkfn.c:26
//
// * NEATMKFN - GENERATE NEATROFF FONT DESCRIPTIONS
// *
// * Copyright (C) 2012-2018 Ali Gholami Rudi <ali at rudi dot ir>
// *
// * Permission to use, copy, modify, and/or distribute this software for any
// * purpose with or without fee is hereby granted, provided that the above
// * copyright notice and this permission notice appear in all copies.
// *
// * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// filtered scripts
var mkfn_scripts []byte

// mkfn_langs - transpiled function from  mkfn.c:27
// filtered languages
var mkfn_langs []byte

// mkfn_subfont - transpiled function from  mkfn.c:28
// filtered font
var mkfn_subfont []byte

// mkfn_trname - transpiled function from  mkfn.c:29
// font troff name
var mkfn_trname []byte

// mkfn_psname - transpiled function from  mkfn.c:30
// font ps name
var mkfn_psname []byte

// mkfn_path - transpiled function from  mkfn.c:31
// font path
var mkfn_path []byte

// mkfn_res - transpiled function from  mkfn.c:32
// device resolution
var mkfn_res int32 = 720

// mkfn_warn - transpiled function from  mkfn.c:33
// warn about unsupported features
var mkfn_warn int32

// mkfn_kmin - transpiled function from  mkfn.c:34
// minimum kerning value
var mkfn_kmin int32

// mkfn_swid - transpiled function from  mkfn.c:35
// space width
var mkfn_swid int32

// mkfn_special - transpiled function from  mkfn.c:36
// special flag
var mkfn_special int32

// mkfn_bbox - transpiled function from  mkfn.c:37
// include bounding box
var mkfn_bbox int32

// mkfn_noligs - transpiled function from  mkfn.c:38
// suppress ligatures
var mkfn_noligs int32

// mkfn_pos - transpiled function from  mkfn.c:39
// include glyph positions
var mkfn_pos int32 = 1

// mkfn_dry - transpiled function from  mkfn.c:40
// generate no output
var mkfn_dry int32

// scriptorder - transpiled function from  mkfn.c:43
// OpenType specifies a specific feature order for different scripts
var scriptorder [][][]byte = [][][]byte{{[]byte("latn\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("cyrl\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("grek\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("armn\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("geor\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("runr\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("ogam\x00"), []byte("ccmp,liga,clig,dist,kern,mark,mkmk\x00")}, {[]byte("arab\x00"), []byte("ccmp,isol,fina,medi,init,rlig,calt,liga,dlig,cswh,mset,curs,kern,mark,mkmk\x00")}, {[]byte("bugi\x00"), []byte("locl,ccmp,rlig,liga,clig,calt,kern,dist,mark,mkmk\x00")}, {[]byte("hang\x00"), []byte("ccmp,ljmo,vjmo,tjmo\x00")}, {[]byte("hebr\x00"), []byte("ccmp,dlig,kern,mark\x00")}, {[]byte("bng2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("dev2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("gjr2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("gur2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("knd2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("mlym\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("ory2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("tml2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("tml2\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("telu\x00"), []byte("locl,nukt,akhn,rphf,blwf,half,pstf,vatu,cjct,init,pres,abvs,blws,psts,haln,calt,kern,dist,abvm,blwm\x00")}, {[]byte("java\x00"), []byte("locl,pref,abvf,blwf,pstf,pres,abvs,blws,psts,ccmp,rlig,liga,clig,calt,kern,dist,mark,mkmk\x00")}, {[]byte("khmr\x00"), []byte("pref,blwf,abvf,pstf,pres,blws,abvs,psts,clig,dist,blwm,abvm,mkmk\x00")}, {[]byte("lao \x00"), []byte("ccmp,kern,mark,mkmk\x00")}, {[]byte("mym2\x00"), []byte("locl,rphf,pref,blwf,pstf,pres,abvs,blws,psts,kern,dist,mark,mkmk\x00")}, {[]byte("sinh\x00"), []byte("locl,ccmp,akhn,rphf,vatu,pstf,pres,abvs,blws,psts,kern,dist,abvm,blwm\x00")}, {[]byte("syrc\x00"), []byte("stch,ccmp,isol,fina,fin2,fin3,medi,med2,init,rlig,calt,liga,dlig,kern,mark,mkmk\x00")}, {[]byte("thaa\x00"), []byte("kern,mark\x00")}, {[]byte("thai\x00"), []byte("ccmp,kern,mark,mkmk\x00")}, {[]byte("tibt\x00"), []byte("ccmp,abvs,blws,calt,liga,kern,abvm,blwm,mkmk\x00")}}

// mkfn_script - transpiled function from  mkfn.c:77
func mkfn_script(script []byte, nscripts int32) int32 {
	if mkfn_scripts == nil {
		if nscripts == 1 || script == nil {
			// return 1 if the given script is to be included
			// fill mkfn_scripts (if unspecified) in the first call
			return 1
		}
		if noarch.Not(noarch.Strcmp([]byte("DFLT\x00"), script)) {
			mkfn_scripts = []byte("DFLT\x00")
		} else {
			mkfn_scripts = []byte("latn\x00")
		}
	}
	if noarch.Not(noarch.Strcmp([]byte("list\x00"), mkfn_scripts)) {
		noarch.Printf([]byte("%s\n\x00"), func() []byte {
			if script != nil {
				return script
			}
			return []byte("\x00")
		}())
	}
	if noarch.Strchr(script, int32(' ')) != nil {
		(noarch.Strchr(script, int32(' ')))[0] = '\x00'
	}
	return noarch.BoolToInt(!(noarch.Strstr(mkfn_scripts, script) == nil))
}

// mkfn_lang - transpiled function from  mkfn.c:96
func mkfn_lang(lang []byte, nlangs int32) int32 {
	if mkfn_langs == nil {
		// return 1 if the given language is to be included
		return 1
	}
	if lang == nil {
		lang = []byte("\x00")
	}
	if noarch.Not(noarch.Strcmp([]byte("list\x00"), mkfn_langs)) {
		noarch.Printf([]byte("%s\n\x00"), lang)
	}
	if noarch.Strchr(lang, int32(' ')) != nil {
		(noarch.Strchr(lang, int32(' ')))[0] = '\x00'
	}
	return noarch.BoolToInt(!(noarch.Strstr(mkfn_langs, lang) == nil))
}

// mkfn_font - transpiled function from  mkfn.c:110
func mkfn_font(font []byte) int32 {
	// return 1 if the given font is to be included
	// font index
	var idx int32
	idx++
	if mkfn_subfont == nil {
		return noarch.BoolToInt(idx == 1)
	}
	if noarch.Not(noarch.Strcmp([]byte("list\x00"), mkfn_subfont)) {
		noarch.Printf([]byte("%s\n\x00"), font)
	}
	if int32(mkfn_subfont[0]) != 0 && int32(((__ctype_b_loc())[0])[int32(uint8(mkfn_subfont[0]))])&int32(uint16(noarch.ISdigit)) != 0 {
		if noarch.Atoi(mkfn_subfont) == idx {
			return 1
		}
	}
	return noarch.BoolToInt(noarch.Not(noarch.Strcmp(mkfn_subfont, font)))
}

// mkfn_featrank - transpiled function from  mkfn.c:125
func mkfn_featrank(scrp []byte, feat []byte) int32 {
	// return the rank of the given feature, for the current script
	var order [][]byte
	var i int32
	if order == nil || noarch.Strcmp(scrp, order[0]) != 0 {
		order = nil
		for i = 0; uint32(i) < 480/16; i++ {
			if noarch.Not(noarch.Strcmp(scrp, scriptorder[i][0])) {
				order = scriptorder[i]
			}
		}
	}
	if len(order) == 0 && len(noarch.Strstr(order[1], feat)) == 0 {
		return int32((func() int64 {
			c4go_temp_name := noarch.Strstr(order[1], feat)
			return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
		}() - int64(uintptr(unsafe.Pointer(&order[1])))/int64(1)))
	}
	return 1000
}

// mkfn_header - transpiled function from  mkfn.c:140
func mkfn_header(fontname []byte) {
	if mkfn_dry != 0 {
		return
	}
	if mkfn_trname != nil {
		noarch.Printf([]byte("name %s\n\x00"), mkfn_trname)
	}
	if mkfn_psname != nil {
		noarch.Printf([]byte("fontname %s\n\x00"), mkfn_psname)
	}
	if mkfn_psname == nil && fontname != nil && int32(fontname[0]) != 0 {
		noarch.Printf([]byte("fontname %s\n\x00"), fontname)
	}
	if mkfn_path != nil {
		noarch.Printf([]byte("fontpath %s\n\x00"), mkfn_path)
	}
	trfn_header()
	if mkfn_special != 0 {
		fmt.Printf("special\n")
	}
	trfn_cdefs()
}

// usage - transpiled function from  mkfn.c:161
var usage []byte = []byte("Usage: mktrfn [options] <input >output\nOptions:\n  -a      \tread an AFM file (default)\n  -o      \tread a TTF or an OTF file\n  -s      \tspecial font\n  -p name \toverride font postscript name\n  -t name \tset font troff name\n  -f path \tset font path\n  -r res  \tset device resolution (720)\n  -k kmin \tspecify the minimum amount of kerning (0)\n  -b      \tinclude glyph bounding boxes\n  -l      \tsuppress the ligatures line\n  -n      \tsuppress glyph positions\n  -S scrs \tcomma-separated list of scripts to include (list to list)\n  -L langs\tcomma-separated list of languages to include (list to list)\n  -F font \tfont name or index in a font collection (list to list)\n  -w      \twarn about unsupported font features\n\x00")

// main - transpiled function from  mkfn.c:180
func main() {
	argc := int32(len(os.Args))
	argv := [][]byte{}
	for _, argvSingle := range os.Args {
		argv = append(argv, []byte(argvSingle))
	}
	defer noarch.AtexitRun()
	var afm int32 = 1
	var i int32
	for i = 1; i < argc && int32(argv[i][0]) == int32('-'); i++ {
		switch int32(argv[i][1]) {
		case 'a':
			afm = 1
		case 'b':
			mkfn_bbox = 1
		case 'f':
			mkfn_path = func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}()
		case 'F':
			mkfn_subfont = func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}()
			mkfn_dry = noarch.BoolToInt(noarch.Not(noarch.Strcmp([]byte("list\x00"), mkfn_subfont)))
		case 'k':
			mkfn_kmin = noarch.Atoi(func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}())
		case 'l':
			mkfn_noligs = 1
		case 'L':
			mkfn_langs = func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}()
			mkfn_dry = noarch.BoolToInt(noarch.Not(noarch.Strcmp([]byte("list\x00"), mkfn_langs)))
		case 'n':
			mkfn_pos = 0
		case 'o':
			afm = 0
		case 'p':
			mkfn_psname = func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}()
		case 'r':
			mkfn_res = noarch.Atoi(func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}())
		case 's':
			mkfn_special = 1
		case 'S':
			mkfn_scripts = func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}()
			mkfn_dry = noarch.BoolToInt(noarch.Not(noarch.Strcmp([]byte("list\x00"), mkfn_scripts)))
		case 't':
			mkfn_trname = func() []byte {
				if int32(argv[i][2]) != 0 {
					return (argv[i])[0+2:]
				}
				return argv[func() int32 {
					i++
					return i
				}()]
			}()
		case 'w':
			mkfn_warn = 1
		default:
			noarch.Printf([]byte("%s\x00"), usage)
			return
		}
	}
	trfn_init()
	if func() int32 {
		if afm != 0 {
			return afm_read()
		}
		return otf_read()
	}() != 0 {
		noarch.Fprintf(noarch.Stderr, []byte("neatmkfn: cannot parse the font\n\x00"))
		trfn_done()
		noarch.Exit(int32(1))
	}
	trfn_done()
	return
}

// u32 - transpiled function from  otf.c:26
// OpenType and TrueType fonts
type u32 = uint32

// u16 - transpiled function from  otf.c:27
type u16 = uint16

// u8 - transpiled function from  otf.c:28
type u8 = uint8

// s32 - transpiled function from  otf.c:29
type s32 = int32

// s16 - transpiled function from  otf.c:30
type s16 = int16

// glyph_name - transpiled function from  otf.c:32
var glyph_name [][]byte = make([][]byte, 65536)

// glyph_code - transpiled function from  otf.c:33
var glyph_code []int32 = make([]int32, 65536)

// glyph_bbox - transpiled function from  otf.c:34
var glyph_bbox [][]int32 = make([][]int32, 65536)

// glyph_wid - transpiled function from  otf.c:35
var glyph_wid []int32 = make([]int32, 65536)

// glyph_n - transpiled function from  otf.c:36
var glyph_n int32

// upm - transpiled function from  otf.c:37
// units per em
var upm int32

// sec - transpiled function from  otf.c:38
// current font section (lookup index * 10)
var sec int32

// otf - transpiled function from  otf.c:40
type otf struct {
	otf  interface{}
	off  interface{}
	name [128]byte
}

// macset - transpiled function from  otf.c:46
// TTC header or offset table
// offset table
// font name
var macset [][]byte

// stdset - transpiled function from  otf.c:47
var stdset [][]byte

// owid - transpiled function from  otf.c:49
func owid(w int32) int32 {
	return func() int32 {
		if w < 0 {
			return w*1000 - upm/2
		}
		return w*1000 + upm/2
	}() / upm
}

// otf_r2l - transpiled function from  otf.c:61
func otf_r2l(feat []byte) int32 {
	// whether the script is right-to-left
	var scrp []byte = (noarch.Strchr(feat, int32(':')))[0+1:]
	return noarch.BoolToInt(noarch.Not(noarch.Strcmp([]byte("arab\x00"), scrp)) || noarch.Not(noarch.Strcmp([]byte("hebr\x00"), scrp)))
}

// otf_unsupported - transpiled function from  otf.c:68
func otf_unsupported(sub []byte, type_ int32, fmt_ int32) {
	if mkfn_warn != 0 {
		// report unsupported otf tables
		noarch.Fprintf(noarch.Stderr, []byte("neatmkfn: unsupported %s lookup %d\x00"), sub, type_)
		if fmt_ > 0 {
			noarch.Fprintf(noarch.Stderr, []byte(" format %d\x00"), fmt_)
		}
		noarch.Fprintf(noarch.Stderr, []byte("\n\x00"))
	}
}

// otf_table - transpiled function from  otf.c:79
func otf_table(otf_c4go_postfix []otf, name []byte) interface{} {
	// find the otf table with the given name
	var // Warning (*ast.CallExpr):  otf.c:81 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:81 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	nrecs int32
	var i int32
	for i = 0; i < nrecs; i++ {
		// an otf table record
		var rec interface{} = otf_c4go_postfix[0].off[0+12+i*16:]
		// Warning (*ast.ReturnStmt):  otf.c:86 :cannot transpileToStmt : cannot transpileReturnStmt. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		if noarch.Not(strncmp(rec.([]byte), name, 4)) {
			// Warning (*ast.CallExpr):  otf.c:86 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.ParenExpr):  otf.c:86 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.BinaryOperator):  otf.c:86 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.BinaryOperator):  otf.c:86 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		}
	}
	return nil
}

// otf_name - transpiled function from  otf.c:92
func otf_name(otf_c4go_postfix []otf, tab interface{}) {
	// obtain postscript font name from name table
	var name []byte = make([]byte, 256)
	// storage area
	var // Warning (*ast.CallExpr):  otf.c:95 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:95 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:95 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:95 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:95 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	str interface{}
	// number of name records
	var // Warning (*ast.CallExpr):  otf.c:96 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:96 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	n int32
	var i int32
	for i = 0; i < n; i++ {
		var rec interface{} = tab[0+6+12*i:]
		// platform id
		var // Warning (*ast.CallExpr):  otf.c:100 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:100 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		pid int32
		// encoding id
		var // Warning (*ast.CallExpr):  otf.c:101 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:101 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		eid int32
		// language id
		var // Warning (*ast.CallExpr):  otf.c:102 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:102 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		lid int32
		// name id
		var // Warning (*ast.CallExpr):  otf.c:103 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:103 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		nid int32
		// string length
		var // Warning (*ast.CallExpr):  otf.c:104 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:104 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		len_ int32
		// string offset
		var // Warning (*ast.CallExpr):  otf.c:105 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:105 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		off int32
		if pid == 1 && eid == 0 && lid == 0 && nid == 6 {
			memcpy(name, str[0+off:], uint32(len_))
			name[len_] = '\x00'
			noarch.Snprintf(otf_c4go_postfix[0].name[:], int32(128), []byte("%s\x00"), name)
		}
	}
}

// otf_cmap4 - transpiled function from  otf.c:115
func otf_cmap4(otf_c4go_postfix []otf, cmap4 interface{}) {
	// parse otf cmap format 4 subtable
	var nsegs int32
	var ends interface{}
	var begs interface{}
	var deltas interface{}
	var offsets interface{}
	var beg int32
	var end int32
	var delta int32
	var offset int32
	var i int32
	var j int32
	// Warning (*ast.CallExpr):  otf.c:121 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:121 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `/`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:121 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `/`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:121 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `/`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	ends = cmap4[0+14:]
	begs = ends[0+2*nsegs+2:]
	deltas = begs[0+2*nsegs:]
	offsets = deltas[0+2*nsegs:]
	for i = 0; i < nsegs; i++ {
		// Warning (*ast.CallExpr):  otf.c:127 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:127 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:127 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.CallExpr):  otf.c:128 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:128 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:128 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.CallExpr):  otf.c:129 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:129 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:129 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.CallExpr):  otf.c:130 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:130 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		if offset != 0 {
			// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ArraySubscriptExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			{
				// Warning (*ast.BinaryOperator):  otf.c:130 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				for j = beg; j <= end; j++ {
					// Warning (*ast.CallExpr):  otf.c:133 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.ParenExpr):  otf.c:133 :cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.ArraySubscriptExpr):  otf.c:133 :cannot transpile ArraySubscriptExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:133 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ArraySubscriptExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `+`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				}
			}
		} else {
			for j = beg; j <= end; j++ {
				glyph_code[(j+delta)&65535] = j
			}
		}
	}
}

// otf_cmap - transpiled function from  otf.c:143
func otf_cmap(otf_c4go_postfix []otf, cmap interface{}) {
	// parse otf cmap header
	var // Warning (*ast.CallExpr):  otf.c:145 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:145 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	nrecs int32
	var i int32
	for i = 0; i < nrecs; i++ {
		// a cmap record
		var rec interface{} = cmap[0+4+i*8:]
		var // Warning (*ast.CallExpr):  otf.c:149 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:149 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		plat int32
		var // Warning (*ast.CallExpr):  otf.c:150 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:150 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		enc int32
		// a cmap subtable
		var // Warning (*ast.CallExpr):  otf.c:151 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		// Warning (*ast.ParenExpr):  otf.c:151 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		// Warning (*ast.BinaryOperator):  otf.c:151 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		// Warning (*ast.BinaryOperator):  otf.c:151 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		// Warning (*ast.VarDecl):  otf.c:151 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		tab interface{}
		var // Warning (*ast.CallExpr):  otf.c:152 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:152 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		fmt_ int32
		if plat == 3 && enc == 1 && fmt_ == 4 {
			otf_cmap4(otf_c4go_postfix, tab)
		}
	}
}

// otf_post - transpiled function from  otf.c:158
func otf_post(otf_c4go_postfix []otf, post interface{}) {
	// version 2.0 header
	var post2 interface{}
	// glyph name indices
	var index interface{}
	// glyph names
	var names interface{}
	var cname int32
	var i int32
	if htonl(nil) != 131072 {
		// Warning (*ast.CallExpr):  otf.c:165 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		// Warning (*ast.BinaryOperator):  otf.c:165 :cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		// Warning (*ast.BinaryOperator):  otf.c:165 :cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		return
	}
	post2 = post[0+32:]
	// Warning (*ast.CallExpr):  otf.c:168 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:168 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:168 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	index = post2[0+2:]
	names = index[0+2*glyph_n:]
	for i = 0; i < glyph_n; i++ {
		var // Warning (*ast.CallExpr):  otf.c:172 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:172 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		idx int32
		if idx < 258 {
			noarch.Strcpy(glyph_name[i], macset[idx])
		} else {
			memcpy(glyph_name[i], names[0+cname+1:], uint32(uint8(((names[0+cname:].([]u8))[0]))))
			glyph_name[i][(names[0+cname:].([]u8))[0]] = '\x00'
			cname += int32(uint8(((names[0+cname:].([]u8))[0]))) + 1
		}
	}
}

// otf_glyf - transpiled function from  otf.c:184
func otf_glyf(otf_c4go_postfix []otf, glyf interface{}) {
	var maxp interface{} = otf_table(otf_c4go_postfix, []byte("maxp\x00"))
	var head interface{} = otf_table(otf_c4go_postfix, []byte("head\x00"))
	var loca interface{} = otf_table(otf_c4go_postfix, []byte("loca\x00"))
	var gdat interface{}
	var gdat_next interface{}
	var // Warning (*ast.CallExpr):  otf.c:191 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:191 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	n int32
	var // Warning (*ast.CallExpr):  otf.c:192 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:192 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var i int32
	var j int32
	if noarch.Not(glyph_n) {
		glyph_n = n
	}
	for i = 0; i < n; i++ {
		if fmt_ != 0 {
			// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			{
				// Warning (*ast.CallExpr):  otf.c:198 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.ParenExpr):  otf.c:198 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:198 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.CallExpr):  otf.c:199 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.ParenExpr):  otf.c:199 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				// Warning (*ast.BinaryOperator):  otf.c:199 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			}
		} else {
			// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			{
				// Warning (*ast.CallExpr):  otf.c:201 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.ParenExpr):  otf.c:201 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:201 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.CallExpr):  otf.c:202 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.ParenExpr):  otf.c:202 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:202 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `*`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			}
		}
		if (int64(uintptr(unsafe.Pointer(&gdat[0])))/int64(1) - int64(uintptr(unsafe.Pointer(&gdat_next[0])))/int64(1)) < 0 {
			for j = 0; j < 4; j++ {
				// Warning (*ast.CallExpr):  otf.c:206 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				glyph_bbox[i][j] = int32(int16((s16(htons(nil)))))
			}
		}
	}
}

// otf_hmtx - transpiled function from  otf.c:210
func otf_hmtx(otf_c4go_postfix []otf, hmtx interface{}) {
	var hhea interface{} = otf_table(otf_c4go_postfix, []byte("hhea\x00"))
	var n int32
	var i int32
	// Warning (*ast.CallExpr):  otf.c:215 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:215 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:217 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:215 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < n; i++ {
			// Warning (*ast.CallExpr):  otf.c:217 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:217 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		}
	}
	for i = n; i < glyph_n; i++ {
		glyph_wid[i] = glyph_wid[n-1]
	}
}

// otf_kern - transpiled function from  otf.c:222
func otf_kern(otf_c4go_postfix []otf, kern interface{}) {
	var off int32 = 4
	var i int32
	var j int32
	// number of kern subtables
	var // Warning (*ast.CallExpr):  otf.c:226 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:226 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	n int32
	for i = 0; i < n; i++ {
		// a kern subtable
		var tab interface{} = kern[0+off:]
		var // Warning (*ast.CallExpr):  otf.c:229 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:229 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		cov int32
		// Warning (*ast.CallExpr):  otf.c:230 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  :0 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		if cov>>uint64(8) == 0 && cov&1 != 0 {
			// format 0
			var // Warning (*ast.CompoundAssignOperator):  otf.c:230 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpileCompoundAssignOperator. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.CallExpr):  otf.c:232 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:232 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			npairs int32
			for j = 0; j < npairs; j++ {
				var // Warning (*ast.CallExpr):  otf.c:234 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.VarDecl):  otf.c:234 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				c1 int32
				var // Warning (*ast.CallExpr):  otf.c:235 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.VarDecl):  otf.c:235 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				c2 int32
				var // Warning (*ast.CallExpr):  otf.c:236 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				val int32 = int32(int16((s16(htons(nil)))))
				mkfn_kern(glyph_name[c1], glyph_name[c2], uwid(val))
			}
		}
	}
}

// coverage - transpiled function from  otf.c:244
func coverage(cov interface{}, ncov []int32) []int32 {
	var // Warning (*ast.CallExpr):  otf.c:246 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:246 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var // Warning (*ast.CallExpr):  otf.c:247 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:247 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	n int32
	var beg int32
	var end int32
	var i int32
	var j int32
	var out []int32 = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(glyph_n)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	var cnt int32
	if fmt_ == 1 {
		// Warning (*ast.BinaryOperator):  otf.c:254 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < n; i++ {
			// Warning (*ast.CallExpr):  otf.c:254 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:254 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		}
	}
	if fmt_ == 2 {
		for i = 0; i < n; i++ {
			// Warning (*ast.CallExpr):  otf.c:258 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:258 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:258 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.CallExpr):  otf.c:259 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:259 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			{
				// Warning (*ast.BinaryOperator):  otf.c:259 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				for j = beg; j <= end; j++ {
					out[func() int32 {
						defer func() {
							cnt++
						}()
						return cnt
					}()] = j
				}
			}
		}
	}
	if ncov != nil {
		ncov[0] = cnt
	}
	return out
}

// classdef - transpiled function from  otf.c:269
func classdef(tab interface{}, gl []int32, cls []int32) int32 {
	var // Warning (*ast.CallExpr):  otf.c:271 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:271 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var ngl int32
	var i int32
	var j int32
	if fmt_ == 1 {
		var // Warning (*ast.CallExpr):  otf.c:275 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:275 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		beg int32
		// Warning (*ast.CallExpr):  otf.c:276 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:276 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		{
			// Warning (*ast.BinaryOperator):  otf.c:276 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			for i = 0; i < ngl; i++ {
				// Warning (*ast.BinaryOperator):  otf.c:279 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				{
					gl[i] = beg + i
					// Warning (*ast.CallExpr):  otf.c:279 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:279 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				}
			}
		}
	}
	if fmt_ == 2 {
		var // Warning (*ast.CallExpr):  otf.c:283 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:283 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		n int32
		for i = 0; i < n; i++ {
			var // Warning (*ast.CallExpr):  otf.c:285 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:285 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			beg int32
			var // Warning (*ast.CallExpr):  otf.c:286 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:286 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			end int32
			for j = beg; j <= end; j++ {
				gl[ngl] = j
				// Warning (*ast.CallExpr):  otf.c:289 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:289 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:289 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				ngl++
			}
		}
	}
	return ngl
}

// intcmp - transpiled function from  otf.c:297
func intcmp(v1 interface{}, v2 interface{}) int32 {
	return (v1.([]int32))[0] - (v2.([]int32))[0]
}

// ggrp_class - transpiled function from  otf.c:304
func ggrp_class(src []int32, cls []int32, nsrc int32, id int32) int32 {
	var g []int32 = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(nsrc)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	var n int32
	var i int32
	var grp int32
	for i = 0; i < nsrc; i++ {
		if cls[i] == id {
			g[func() int32 {
				defer func() {
					n++
				}()
				return n
			}()] = src[i]
		}
	}
	sort.SliceStable(g[:int32(uint32(n))], func(a, b int) bool {
		return intcmp((*[1000000]int32)(unsafe.Pointer(&g[a]))[:], (*[1000000]int32)(unsafe.Pointer(&g[b]))[:]) <= 0
	})
	grp = ggrp_make(g, n)
	_ = g
	return grp
}

// ggrp_coverage - transpiled function from  otf.c:319
func ggrp_coverage(g []int32, n int32) int32 {
	sort.SliceStable(g[:int32(uint32(n))], func(a, b int) bool {
		return intcmp((*[1000000]int32)(unsafe.Pointer(&g[a]))[:], (*[1000000]int32)(unsafe.Pointer(&g[b]))[:]) <= 0
	})
	return ggrp_make(g, n)
}

// valuerecord_len - transpiled function from  otf.c:325
func valuerecord_len(fmt_ int32) int32 {
	var off int32
	var i int32
	for i = 0; i < 8; i++ {
		if fmt_&(1<<uint64(i)) != 0 {
			off += 2
		}
	}
	return off
}

// valuerecord_print - transpiled function from  otf.c:335
func valuerecord_print(fmt_ int32, rec interface{}) {
	var vals []int32 = []int32{0, 0, 0, 0, 0, 0, 0, 0}
	var off int32
	var i int32
	for i = 0; i < 8; i++ {
		if fmt_&(1<<uint64(i)) != 0 {
			// Warning (*ast.CallExpr):  otf.c:342 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			vals[i] = uwid(int32(int16((s16(htons(nil))))))
			off += 2
		}
	}
	if fmt_ != 0 {
		noarch.Printf([]byte(":%+d%+d%+d%+d\x00"), vals[0], vals[1], vals[2], vals[3])
	}
}

// valuerecord_small - transpiled function from  otf.c:350
func valuerecord_small(fmt_ int32, rec interface{}) int32 {
	var off int32
	var i int32
	for i = 0; i < 8; i++ {
		if fmt_&(1<<uint64(i)) != 0 {
			if noarch.Abs(uwid(int32(int16((s16(htons(nil))))))) >= func() int32 {
				if 1 < mkfn_kmin {
					return mkfn_kmin
				}
				return 1
			}() {
				// Warning (*ast.CallExpr):  otf.c:356 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				return 0
			}
			off += 2
		}
	}
	return 1
}

// otf_gpostype1 - transpiled function from  otf.c:365
func otf_gpostype1(otf_c4go_postfix []otf, sub interface{}, feat []byte) {
	// single adjustment positioning
	var // Warning (*ast.CallExpr):  otf.c:367 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:367 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var // Warning (*ast.CallExpr):  otf.c:368 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:368 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	vfmt int32
	var cov []int32
	var ncov int32
	var nvals int32
	var vlen int32 = valuerecord_len(vfmt)
	var i int32
	// Warning (*ast.CallExpr):  otf.c:373 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:373 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:373 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	if fmt_ == 1 {
		// Warning (*ast.BinaryOperator):  otf.c:373 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < ncov; i++ {
			if valuerecord_small(vfmt, sub[0+6:]) != 0 {
				continue
			}
			noarch.Printf([]byte("gpos %s 1 %s\x00"), feat, glyph_name[cov[i]])
			valuerecord_print(vfmt, sub[0+6:])
			fmt.Printf("\n")
		}
	}
	if fmt_ == 2 {
		// Warning (*ast.CallExpr):  otf.c:384 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:384 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		{
			// Warning (*ast.BinaryOperator):  otf.c:384 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			for i = 0; i < nvals; i++ {
				if valuerecord_small(vfmt, sub[0+6:]) != 0 {
					continue
				}
				noarch.Printf([]byte("gpos %s 1 %s\x00"), feat, glyph_name[cov[i]])
				valuerecord_print(vfmt, sub[0+8+i*vlen:])
				fmt.Printf("\n")
			}
		}
	}
	_ = cov
}

// otf_gpostype2 - transpiled function from  otf.c:397
func otf_gpostype2(otf_c4go_postfix []otf, sub interface{}, feat []byte) {
	// pair adjustment positioning
	var // Warning (*ast.CallExpr):  otf.c:399 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:399 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	// valuerecord 1
	var // Warning (*ast.CallExpr):  otf.c:400 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:400 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	vfmt1 int32
	// valuerecord 2
	var // Warning (*ast.CallExpr):  otf.c:401 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:401 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	vfmt2 int32
	var fmtoff1 int32
	var fmtoff2 int32
	// the length of vfmt1 and vfmt2
	var vrlen int32
	var i int32
	var j int32
	vrlen = valuerecord_len(vfmt1) + valuerecord_len(vfmt2)
	if fmt_ == 1 {
		var // Warning (*ast.CallExpr):  otf.c:407 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:407 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		nc1 int32
		var // Warning (*ast.CallExpr):  otf.c:408 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:408 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:408 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:408 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:408 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:408 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		cov []int32
		for i = 0; i < nc1; i++ {
			var // Warning (*ast.CallExpr):  otf.c:410 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:410 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:410 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:410 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:410 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			c2 interface{}
			var // Warning (*ast.CallExpr):  otf.c:411 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:411 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			nc2 int32
			for j = 0; j < nc2; j++ {
				var // Warning (*ast.CallExpr):  otf.c:413 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.VarDecl):  otf.c:413 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				second int32
				fmtoff1 = 2 + (2+vrlen)*j + 2
				fmtoff2 = fmtoff1 + valuerecord_len(vfmt1)
				if valuerecord_small(vfmt1, c2[0+fmtoff1:]) != 0 && valuerecord_small(vfmt2, c2[0+fmtoff2:]) != 0 {
					continue
				}
				noarch.Printf([]byte("gpos %s 2\x00"), feat)
				noarch.Printf([]byte(" %s\x00"), glyph_name[cov[i]])
				valuerecord_print(vfmt1, c2[0+fmtoff1:])
				noarch.Printf([]byte(" %s\x00"), glyph_name[second])
				valuerecord_print(vfmt2, c2[0+fmtoff2:])
				fmt.Printf("\n")
			}
		}
		_ = cov
	}
	if fmt_ == 2 {
		var gl1 []int32 = make([]int32, 65536)
		var gl2 []int32 = make([]int32, 65536)
		var cls1 []int32 = make([]int32, 65536)
		var cls2 []int32 = make([]int32, 65536)
		var grp1 []int32 = make([]int32, 65536)
		var grp2 []int32 = make([]int32, 65536)
		var // Warning (*ast.CallExpr):  otf.c:433 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:433 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:433 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:433 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:433 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:433 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = error in transpileCallExpr : name of call function is classdef. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ngl1 int32
		var // Warning (*ast.CallExpr):  otf.c:434 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:434 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:434 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:434 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:434 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:434 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = error in transpileCallExpr : name of call function is classdef. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ngl2 int32
		var // Warning (*ast.CallExpr):  otf.c:435 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:435 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ncls1 int32
		var // Warning (*ast.CallExpr):  otf.c:436 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:436 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ncls2 int32
		for i = 0; i < ncls1; i++ {
			grp1[i] = ggrp_class(gl1, cls1, ngl1, i)
		}
		for i = 0; i < ncls2; i++ {
			grp2[i] = ggrp_class(gl2, cls2, ngl2, i)
		}
		for i = 0; i < ncls1; i++ {
			for j = 0; j < ncls2; j++ {
				fmtoff1 = 16 + (i*ncls2+j)*vrlen
				fmtoff2 = fmtoff1 + valuerecord_len(vfmt1)
				if valuerecord_small(vfmt1, sub[0+fmtoff1:]) != 0 && valuerecord_small(vfmt2, sub[0+fmtoff2:]) != 0 {
					continue
				}
				noarch.Printf([]byte("gpos %s %d\x00"), feat, 2)
				noarch.Printf([]byte(" @%d\x00"), grp1[i])
				valuerecord_print(vfmt1, sub[0+fmtoff1:])
				noarch.Printf([]byte(" @%d\x00"), grp2[j])
				valuerecord_print(vfmt2, sub[0+fmtoff2:])
				fmt.Printf("\n")
			}
		}
	}
}

// otf_gpostype3 - transpiled function from  otf.c:460
func otf_gpostype3(otf_c4go_postfix []otf, sub interface{}, feat []byte) {
	// cursive attachment positioning
	var // Warning (*ast.CallExpr):  otf.c:462 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:462 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var cov []int32
	var icov []int32
	var ocov []int32
	var i int32
	var n int32
	var icnt int32
	var ocnt int32
	var igrp int32
	var ogrp int32
	if fmt_ != 1 {
		return
	}
	// Warning (*ast.CallExpr):  otf.c:470 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:470 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:470 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:470 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:471 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:471 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:471 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	icov = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(n)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	ocov = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(n)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	for i = 0; i < n; i++ {
		if htons(nil) {
			// Warning (*ast.CallExpr):  otf.c:475 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.IfStmt):  otf.c:475 :cannot casting {uint16_t -> bool}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ocov[func() int32 {
				defer func() {
					ocnt++
				}()
				return ocnt
			}()] = cov[i]
		}
	}
	for i = 0; i < n; i++ {
		if htons(nil) {
			// Warning (*ast.CallExpr):  otf.c:478 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.IfStmt):  otf.c:478 :cannot casting {uint16_t -> bool}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			icov[func() int32 {
				defer func() {
					icnt++
				}()
				return icnt
			}()] = cov[i]
		}
	}
	igrp = ggrp_coverage(icov, icnt)
	ogrp = ggrp_coverage(ocov, ocnt)
	_ = icov
	_ = ocov
	for i = 0; i < n; i++ {
		var // Warning (*ast.CallExpr):  otf.c:485 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:485 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		prev int32
		var // Warning (*ast.CallExpr):  otf.c:486 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:486 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		next int32
		if prev != 0 {
			var // Warning (*ast.CallExpr):  otf.c:488 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dx int32 = -uwid(int32(int16((s16(htons(nil))))))
			var // Warning (*ast.CallExpr):  otf.c:489 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dy int32 = -uwid(int32(int16((s16(htons(nil))))))
			if otf_r2l(feat) != 0 {
				dx += uwid(glyph_wid[cov[i]])
			}
			noarch.Printf([]byte("gpos %s 2 @%d %s:%+d%+d%+d%+d\n\x00"), feat, igrp, glyph_name[cov[i]], 0, 0, dx, dy)
		}
		if next != 0 {
			var // Warning (*ast.CallExpr):  otf.c:497 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dx int32 = uwid(int32(int16((s16(htons(nil)))))) - uwid(glyph_wid[cov[i]])
			var // Warning (*ast.CallExpr):  otf.c:498 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dy int32 = uwid(int32(int16((s16(htons(nil))))))
			if otf_r2l(feat) != 0 {
				dx += uwid(glyph_wid[cov[i]])
			}
			noarch.Printf([]byte("gpos %s 2 %s @%d:%+d%+d%+d%+d\n\x00"), feat, glyph_name[cov[i]], ogrp, 0, 0, dx, dy)
		}
	}
	_ = cov
}

// otf_gpostype4 - transpiled function from  otf.c:511
func otf_gpostype4(otf_c4go_postfix []otf, sub interface{}, feat []byte) {
	// mark-to-base attachment positioning
	var // Warning (*ast.CallExpr):  otf.c:513 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:513 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	// mark coverage
	var mcov []int32
	// base coverage
	var bcov []int32
	// glyph groups assigned to classes
	var cgrp []int32 = make([]int32, 1024)
	// the group assigned to base glyphs
	var bgrp int32
	// mark coverage size
	var mcnt int32
	// base coverage size
	var bcnt int32
	// class count
	var ccnt int32
	// mark array table
	var marks interface{}
	// base array table
	var bases interface{}
	var i int32
	var j int32
	if fmt_ != 1 {
		return
	}
	// Warning (*ast.CallExpr):  otf.c:526 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:526 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:526 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:526 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:527 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:527 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:527 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:527 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:528 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:528 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:528 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:529 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:529 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:529 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:530 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:530 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// define a group for base glyphs
	// Warning (*ast.BinaryOperator):  otf.c:530 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	bgrp = ggrp_coverage(bcov, bcnt)
	{
		// define a group for each mark class
		for i = 0; i < ccnt; i++ {
			var grp []int32 = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
				c4go_temp_name := make([]uint32, uint32(mcnt)*uint32(1))
				return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
			}())))[:]
			var cnt int32
			// Warning (*ast.IfStmt):  otf.c:538 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			for j = 0; j < mcnt; j++ {
				// Warning (*ast.CallExpr):  otf.c:538 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:538 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			}
			cgrp[i] = ggrp_coverage(grp, cnt)
			_ = grp
		}
	}
	// GPOS rules for each mark after base glyphs
	noarch.Printf([]byte("gsec %d\n\x00"), sec)
	for i = 0; i < mcnt; i++ {
		// mark anchor
		var // Warning (*ast.CallExpr):  otf.c:546 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:546 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:546 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:546 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:546 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		mark interface{}
		var // Warning (*ast.CallExpr):  otf.c:547 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		dx int32 = -uwid(int32(int16((s16(htons(nil))))))
		var // Warning (*ast.CallExpr):  otf.c:548 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		dy int32 = -uwid(int32(int16((s16(htons(nil))))))
		if otf_r2l(feat) != 0 {
			dx += uwid(glyph_wid[mcov[i]])
			dy = -dy
		}
		noarch.Printf([]byte("gpos %s 2 @%d %s:%+d%+d%+d%+d\n\x00"), feat, bgrp, glyph_name[mcov[i]], dx, dy, 0, 0)
	}
	// GPOS rules for each base glyph before a mark
	noarch.Printf([]byte("gsec %d\n\x00"), sec+1)
	for i = 0; i < bcnt; i++ {
		for j = 0; j < ccnt; j++ {
			var // Warning (*ast.CallExpr):  otf.c:560 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:560 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:560 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:560 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:560 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			base interface{}
			var // Warning (*ast.CallExpr):  otf.c:561 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dx int32 = uwid(int32(int16((s16(htons(nil)))))) - uwid(glyph_wid[bcov[i]])
			var // Warning (*ast.CallExpr):  otf.c:562 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dy int32 = uwid(int32(int16((s16(htons(nil))))))
			if otf_r2l(feat) != 0 {
				dx += uwid(glyph_wid[bcov[i]])
				dy = -dy
			}
			noarch.Printf([]byte("gpos %s 2 %s @%d:%+d%+d%+d%+d\n\x00"), feat, glyph_name[bcov[i]], cgrp[j], dx, dy, 0, 0)
		}
	}
	_ = mcov
	_ = bcov
}

// otf_gpostype5 - transpiled function from  otf.c:576
func otf_gpostype5(otf_c4go_postfix []otf, sub interface{}, feat []byte) {
	// mark-to-ligature attachment positioning
	var // Warning (*ast.CallExpr):  otf.c:578 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:578 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	// mark coverage
	var mcov []int32
	// ligature coverage
	var lcov []int32
	// glyph groups assigned to classes
	var cgrp []int32 = make([]int32, 1024)
	// the group assigned to base glyphs
	var lgrp int32
	// mark coverage size
	var mcnt int32
	// ligature coverage size
	var lcnt int32
	// class count
	var ccnt int32
	// mark array table
	var marks interface{}
	// ligature array table
	var ligas interface{}
	var i int32
	var j int32
	var k int32
	if fmt_ != 1 {
		// only marks at the end of ligatures are supported
		return
	}
	// Warning (*ast.CallExpr):  otf.c:592 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:592 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:592 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:592 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:593 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:593 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:593 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:593 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:594 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:594 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:594 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:595 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:595 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:595 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:596 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:596 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// define a group for ligatures
	// Warning (*ast.BinaryOperator):  otf.c:596 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	lgrp = ggrp_coverage(lcov, lcnt)
	{
		// define a group for each mark class
		for i = 0; i < ccnt; i++ {
			var grp []int32 = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
				c4go_temp_name := make([]uint32, uint32(mcnt)*uint32(1))
				return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
			}())))[:]
			var cnt int32
			// Warning (*ast.IfStmt):  otf.c:604 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			for j = 0; j < mcnt; j++ {
				// Warning (*ast.CallExpr):  otf.c:604 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:604 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `==`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			}
			cgrp[i] = ggrp_coverage(grp, cnt)
			_ = grp
		}
	}
	// GPOS rules for each mark after a ligature
	noarch.Printf([]byte("gsec %d\n\x00"), sec)
	for i = 0; i < mcnt; i++ {
		// mark anchor
		var // Warning (*ast.CallExpr):  otf.c:612 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:612 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:612 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:612 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:612 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		mark interface{}
		var // Warning (*ast.CallExpr):  otf.c:613 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		dx int32 = -uwid(int32(int16((s16(htons(nil))))))
		var // Warning (*ast.CallExpr):  otf.c:614 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		dy int32 = -uwid(int32(int16((s16(htons(nil))))))
		if otf_r2l(feat) != 0 {
			dx += uwid(glyph_wid[mcov[i]])
			dy = -dy
		}
		noarch.Printf([]byte("gpos %s 2 @%d %s:%+d%+d%+d%+d\n\x00"), feat, lgrp, glyph_name[mcov[i]], dx, dy, 0, 0)
	}
	noarch.Printf([]byte("gsec %d\n\x00"), sec+1)
	{
		// GPOS rules for each ligature before a mark
		for i = 0; i < lcnt; i++ {
			var // Warning (*ast.CallExpr):  otf.c:625 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:625 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:625 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:625 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:625 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ligattach interface{}
			// component count
			var // Warning (*ast.CallExpr):  otf.c:626 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:626 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			comcnt int32
			// considering only the last component
			k = comcnt - 1
			if comcnt == 0 {
				continue
			}
			if noarch.Not(htons(nil)) {
				// Warning (*ast.CallExpr):  otf.c:631 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.UnaryOperator):  otf.c:631 :cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				continue
			}
			for j = 0; j < ccnt; j++ {
				var // Warning (*ast.CallExpr):  otf.c:634 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.ParenExpr):  otf.c:634 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:634 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:634 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.VarDecl):  otf.c:634 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				base []byte
				var // Warning (*ast.CallExpr):  otf.c:635 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				dx int32 = uwid(int32(int16((s16(htons(nil)))))) - uwid(glyph_wid[lcov[i]])
				var // Warning (*ast.CallExpr):  otf.c:636 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				dy int32 = uwid(int32(int16((s16(htons(nil))))))
				if otf_r2l(feat) != 0 {
					dx += uwid(glyph_wid[lcov[i]])
					dy = -dy
				}
				noarch.Printf([]byte("gpos %s 2 %s @%d:%+d%+d%+d%+d\n\x00"), feat, glyph_name[lcov[i]], cgrp[j], dx, dy, 0, 0)
			}
		}
	}
	_ = mcov
	_ = lcov
}

// gctx - transpiled function from  otf.c:650
// gsub context
type gctx struct {
	bgrp   [16]int32
	igrp   [16]int32
	lgrp   [16]int32
	bn     int32
	in     int32
	ln     int32
	seqidx int32
}

// gctx_len - transpiled function from  otf.c:658
func gctx_len(ctx []gctx, patlen int32) int32 {
	// backtrack coverage arrays
	// input coverage arrays
	// lookahead coverage arrays
	// size of b[], i[], l[]
	// sequence index
	if ctx != nil {
		return ctx[0].bn + ctx[0].in + ctx[0].ln - patlen
	}
	return 0
}

// gctx_backtrack - transpiled function from  otf.c:663
func gctx_backtrack(ctx []gctx) {
	var i int32
	if ctx == nil {
		return
	}
	for i = 0; i < ctx[0].bn; i++ {
		noarch.Printf([]byte(" =@%d\x00"), ctx[0].bgrp[:][i])
	}
	for i = 0; i < ctx[0].seqidx; i++ {
		noarch.Printf([]byte(" =@%d\x00"), ctx[0].igrp[:][i])
	}
}

// gctx_lookahead - transpiled function from  otf.c:674
func gctx_lookahead(ctx []gctx, patlen int32) {
	var i int32
	if ctx == nil {
		return
	}
	for i = ctx[0].seqidx + patlen; i < ctx[0].in; i++ {
		noarch.Printf([]byte(" =@%d\x00"), ctx[0].igrp[:][i])
	}
	for i = 0; i < ctx[0].ln; i++ {
		noarch.Printf([]byte(" =@%d\x00"), ctx[0].lgrp[:][i])
	}
}

// otf_gsubtype1 - transpiled function from  otf.c:686
func otf_gsubtype1(otf_c4go_postfix []otf, sub interface{}, feat []byte, ctx []gctx) {
	// single substitution
	var cov []int32
	var // Warning (*ast.CallExpr):  otf.c:689 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:689 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var ncov int32
	var i int32
	// Warning (*ast.CallExpr):  otf.c:692 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:692 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:692 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	if fmt_ == 1 {
		// Warning (*ast.BinaryOperator):  otf.c:692 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < ncov; i++ {
			var // Warning (*ast.CallExpr):  otf.c:695 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			dst int32 = cov[i] + int32(int16((s16(htons(nil)))))
			if dst >= glyph_n || dst < 0 {
				continue
			}
			noarch.Printf([]byte("gsub %s %d\x00"), feat, 2+gctx_len(ctx, 1))
			gctx_backtrack(ctx)
			noarch.Printf([]byte(" -%s +%s\x00"), glyph_name[cov[i]], glyph_name[dst])
			gctx_lookahead(ctx, 1)
			fmt.Printf("\n")
		}
	}
	if fmt_ == 2 {
		var // Warning (*ast.CallExpr):  otf.c:706 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:706 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		n int32
		for i = 0; i < n; i++ {
			noarch.Printf([]byte("gsub %s %d\x00"), feat, 2+gctx_len(ctx, 1))
			gctx_backtrack(ctx)
			// Warning (*ast.CallExpr):  otf.c:711 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			noarch.Printf([]byte(" -%s +%s\x00"), glyph_name[cov[i]], glyph_name[htons(nil)])
			gctx_lookahead(ctx, 1)
			fmt.Printf("\n")
		}
	}
	_ = cov
}

// otf_gsubtype3 - transpiled function from  otf.c:720
func otf_gsubtype3(otf_c4go_postfix []otf, sub interface{}, feat []byte, ctx []gctx) {
	// alternate substitution
	var cov []int32
	var // Warning (*ast.CallExpr):  otf.c:723 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:723 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var n int32
	var i int32
	var j int32
	if fmt_ != 1 {
		return
	}
	// Warning (*ast.CallExpr):  otf.c:727 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:727 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:727 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:727 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:728 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:728 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:728 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < n; i++ {
			var // Warning (*ast.CallExpr):  otf.c:730 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:730 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:730 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:730 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:730 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			alt interface{}
			var // Warning (*ast.CallExpr):  otf.c:731 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:731 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			nalt int32
			for j = 0; j < nalt; j++ {
				noarch.Printf([]byte("gsub %s %d\x00"), feat, 2+gctx_len(ctx, 1))
				gctx_backtrack(ctx)
				// Warning (*ast.CallExpr):  otf.c:736 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				noarch.Printf([]byte(" -%s +%s\x00"), glyph_name[cov[i]], glyph_name[htons(nil)])
				gctx_lookahead(ctx, 1)
				fmt.Printf("\n")
			}
		}
	}
	_ = cov
}

// otf_gsubtype4 - transpiled function from  otf.c:745
func otf_gsubtype4(otf_c4go_postfix []otf, sub interface{}, feat []byte, ctx []gctx) {
	// ligature substitution
	var // Warning (*ast.CallExpr):  otf.c:747 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:747 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var cov []int32
	var n int32
	var i int32
	var j int32
	var k int32
	if fmt_ != 1 {
		return
	}
	// Warning (*ast.CallExpr):  otf.c:752 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:752 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:752 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:752 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.CallExpr):  otf.c:753 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:753 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:753 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < n; i++ {
			var // Warning (*ast.CallExpr):  otf.c:755 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:755 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:755 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:755 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:755 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			set interface{}
			var // Warning (*ast.CallExpr):  otf.c:756 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:756 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			nset int32
			for j = 0; j < nset; j++ {
				var // Warning (*ast.CallExpr):  otf.c:758 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.ParenExpr):  otf.c:758 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:758 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.BinaryOperator):  otf.c:758 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.VarDecl):  otf.c:758 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				lig interface{}
				var // Warning (*ast.CallExpr):  otf.c:759 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.VarDecl):  otf.c:759 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				nlig int32
				noarch.Printf([]byte("gsub %s %d\x00"), feat, nlig+1+gctx_len(ctx, nlig))
				gctx_backtrack(ctx)
				noarch.Printf([]byte(" -%s\x00"), glyph_name[cov[i]])
				for k = 0; k < nlig-1; k++ {
					// Warning (*ast.CallExpr):  otf.c:764 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					noarch.Printf([]byte(" -%s\x00"), glyph_name[htons(nil)])
				}
				// Warning (*ast.CallExpr):  otf.c:765 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				noarch.Printf([]byte(" +%s\x00"), glyph_name[htons(nil)])
				gctx_lookahead(ctx, nlig)
				fmt.Printf("\n")
			}
		}
	}
	_ = cov
}

// otf_gsubtype6 - transpiled function from  otf.c:774
func otf_gsubtype6(otf_c4go_postfix []otf, sub interface{}, feat []byte, gsub interface{}) {
	// chaining contextual substitution
	var ctx gctx = gctx{[16]int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, [16]int32{}, [16]int32{}, 0, 0, 0, 0}
	var // Warning (*ast.CallExpr):  otf.c:777 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:777 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:777 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:777 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:777 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	lookups interface{}
	var // Warning (*ast.CallExpr):  otf.c:778 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:778 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	fmt_ int32
	var cov []int32
	var i int32
	var j int32
	var nsub int32
	var ncov int32
	var off int32 = 2
	if fmt_ != 3 {
		otf_unsupported([]byte("GSUB\x00"), 6, fmt_)
		return
	}
	// Warning (*ast.CallExpr):  otf.c:786 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:786 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:786 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < ctx.bn; i++ {
			// Warning (*ast.CallExpr):  otf.c:788 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:788 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:788 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:788 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ctx.bgrp[:][i] = ggrp_coverage(cov, ncov)
			_ = cov
		}
	}
	off += 2 + 2*ctx.bn
	// Warning (*ast.CallExpr):  otf.c:793 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:793 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:793 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < ctx.in; i++ {
			// Warning (*ast.CallExpr):  otf.c:795 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:795 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:795 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:795 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ctx.igrp[:][i] = ggrp_coverage(cov, ncov)
			_ = cov
		}
	}
	off += 2 + 2*ctx.in
	// Warning (*ast.CallExpr):  otf.c:800 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:800 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:800 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < ctx.ln; i++ {
			// Warning (*ast.CallExpr):  otf.c:802 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:802 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:802 :argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:802 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is coverage. argument position is 0. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ctx.lgrp[:][i] = ggrp_coverage(cov, ncov)
			_ = cov
		}
	}
	off += 2 + 2*ctx.ln
	// nsub > 1 is not supported
	// Warning (*ast.CallExpr):  otf.c:807 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:807 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:807 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < nsub && i < 1; i++ {
			var // Warning (*ast.CallExpr):  otf.c:809 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:809 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			lidx int32
			var // Warning (*ast.CallExpr):  otf.c:810 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:810 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:810 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:810 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:810 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			lookup interface{}
			var // Warning (*ast.CallExpr):  otf.c:811 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:811 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ltype int32
			var // Warning (*ast.CallExpr):  otf.c:812 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:812 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			ntabs int32
			// Warning (*ast.CallExpr):  otf.c:813 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:813 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			{
				// Warning (*ast.BinaryOperator):  otf.c:813 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				for j = 0; j < ntabs; j++ {
					var // Warning (*ast.CallExpr):  otf.c:815 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.ParenExpr):  otf.c:815 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:815 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:815 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.VarDecl):  otf.c:815 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					tab interface{}
					var type_ int32 = ltype
					if type_ == 7 {
						// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
						{
							// extension substitution
							// Warning (*ast.CallExpr):  otf.c:818 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
							// Warning (*ast.BinaryOperator):  otf.c:818 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
							// Warning (*ast.BinaryOperator):  otf.c:818 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
							// Warning (*ast.CallExpr):  otf.c:819 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
							// Warning (*ast.ParenExpr):  otf.c:819 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
							// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
							// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
							// Warning (*ast.BinaryOperator):  otf.c:819 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
						}
					}
					if type_ == 1 {
						otf_gsubtype1(otf_c4go_postfix, tab, feat, c4goUnsafeConvert_gctx(&ctx))
					}
					if type_ == 3 {
						otf_gsubtype3(otf_c4go_postfix, tab, feat, c4goUnsafeConvert_gctx(&ctx))
					}
					if type_ == 4 {
						otf_gsubtype4(otf_c4go_postfix, tab, feat, c4goUnsafeConvert_gctx(&ctx))
					}
				}
			}
		}
	}
}

// otflookup - transpiled function from  otf.c:832
// an otf gsub/gpos lookup
type otflookup struct {
	scrp   [8]byte
	lang   [8]byte
	feat   [8]byte
	lookup int32
}

// otf_featrec - transpiled function from  otf.c:840
func otf_featrec(otf_c4go_postfix []otf, gtab interface{}, featrec interface{}, stag []byte, ltag []byte, lookups []otflookup, lookups_n int32) int32 {
	// script name
	// language name
	// feature name
	// index into the lookup table
	// parse the given gsub/gpos feature table
	var // Warning (*ast.CallExpr):  otf.c:844 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:844 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:844 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:844 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:844 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	feats interface{}
	var // Warning (*ast.CallExpr):  otf.c:845 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:845 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:845 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:845 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:845 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	feat interface{}
	var // Warning (*ast.CallExpr):  otf.c:846 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:846 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	n int32
	var i int32
	var j int32
	for i = 0; i < n; i++ {
		// lookup index
		var // Warning (*ast.CallExpr):  otf.c:849 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:849 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		lookup int32
		{
			// do not store features common to all languages in a script
			for j = 0; j < lookups_n; j++ {
				if lookups[j].lookup == lookup && noarch.Not(lookups[j].lang[:][0]) {
					if noarch.Not(noarch.Strcmp(lookups[j].scrp[:], stag)) {
						break
					}
				}
			}
		}
		if j == lookups_n {
			memcpy(lookups[j].feat[:], featrec, 4)
			lookups[j].feat[:][4] = '\x00'
			noarch.Strcpy(lookups[j].scrp[:], stag)
			noarch.Strcpy(lookups[j].lang[:], ltag)
			// Warning (*ast.CallExpr):  otf.c:860 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:860 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:860 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			lookups_n++
		}
	}
	return lookups_n
}

// otf_lang - transpiled function from  otf.c:868
func otf_lang(otf_c4go_postfix []otf, gtab interface{}, lang interface{}, stag []byte, ltag []byte, lookups []otflookup, lookups_n int32) int32 {
	// parse the given language table and its feature tables
	var // Warning (*ast.CallExpr):  otf.c:871 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:871 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:871 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:871 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:871 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	feats interface{}
	var // Warning (*ast.CallExpr):  otf.c:872 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:872 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	featidx int32
	var // Warning (*ast.CallExpr):  otf.c:873 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:873 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	nfeat int32
	var i int32
	if featidx != 65535 {
		lookups_n = otf_featrec(otf_c4go_postfix, gtab, feats[0+2+6*featidx:], stag, ltag, lookups, lookups_n)
	}
	// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is otf_featrec. argument position is 2. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	for i = 0; i < nfeat; i++ {
		// Warning (*ast.CallExpr):  otf.c:879 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:879 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:879 :argument position is 2. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:879 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is otf_featrec. argument position is 2. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `*`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	}
	return lookups_n
}

// lookuptag - transpiled function from  otf.c:885
func lookuptag(lu []otflookup) []byte {
	// return lookup table tag (i.e. liga:latn:ENG); returns a static buffer
	var tag []byte = make([]byte, 16)
	noarch.Sprintf(tag, []byte("%s:%s\x00"), lu[0].feat[:], func() []byte {
		if int32(lu[0].scrp[:][0]) != 0 {
			return lu[0].scrp[:]
		}
		return []byte("DFLT\x00")
	}())
	if lu[0].lang[:][0] != 0 {
		noarch.Sprintf(noarch.Strchr(tag, int32('\x00')), []byte(":%s\x00"), lu[0].lang[:])
	}
	return tag
}

// lookupcmp - transpiled function from  otf.c:894
func lookupcmp(v1 interface{}, v2 interface{}) int32 {
	var l1 []otflookup = v1.([]otflookup)
	var l2 []otflookup = v2.([]otflookup)
	if noarch.Strcmp(l1[0].scrp[:], l2[0].scrp[:]) != 0 {
		return noarch.Strcmp(l1[0].scrp[:], l2[0].scrp[:])
	}
	if mkfn_featrank(l1[0].scrp[:], l1[0].feat[:]) != mkfn_featrank(l1[0].scrp[:], l2[0].feat[:]) {
		return mkfn_featrank(l1[0].scrp[:], l1[0].feat[:]) - mkfn_featrank(l1[0].scrp[:], l2[0].feat[:])
	}
	return l1[0].lookup - l2[0].lookup
}

// otf_gtab - transpiled function from  otf.c:906
func otf_gtab(otf_c4go_postfix []otf, gpos interface{}, lookups []otflookup) int32 {
	// extract lookup tables for all features of the given gsub/gpos table
	var // Warning (*ast.CallExpr):  otf.c:908 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:908 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:908 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:908 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:908 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	scripts interface{}
	var nscripts int32
	var nlangs int32
	var script interface{}
	// script and language tags
	var stag []byte = make([]byte, 8)
	var ltag []byte = make([]byte, 8)
	var i int32
	var j int32
	var n int32
	// Warning (*ast.CallExpr):  otf.c:914 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:914 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:914 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		for i = 0; i < nscripts; i++ {
			var grec interface{} = scripts[0+2+6*i:]
			memcpy(stag, grec, 4)
			stag[4] = '\x00'
			if noarch.Not(mkfn_script(stag, nscripts)) {
				continue
			}
			// Warning (*ast.CallExpr):  otf.c:921 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:921 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:921 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.CallExpr):  otf.c:922 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:922 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:922 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.CallExpr):  otf.c:923 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:923 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			{
				// Warning (*ast.IfStmt):  otf.c:923 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `&&`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				for j = 0; j < nlangs; j++ {
					// Warning (*ast.IfStmt):  otf.c:930 :cannot transpileToStmt : cannot transpileIfStmt. cannot transpile for condition. cannot transpileToExpr. err = error in transpileCallExpr : name of call function is mkfn_lang. argument position is 1. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					{
						var lrec interface{} = script[0+4+6*j:]
						memcpy(ltag, lrec, 4)
						ltag[4] = '\x00'
						// Warning (*ast.CallExpr):  otf.c:930 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
						// Warning (*ast.BinaryOperator):  otf.c:930 :cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
						// Warning (*ast.ParenExpr):  otf.c:930 :cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
						// Warning (*ast.BinaryOperator):  otf.c:930 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
						// Warning (*ast.BinaryOperator):  otf.c:930 :argument position is 1. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown52}. Error: operator is `!=`. cannot atomic for left part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					}
				}
			}
		}
	}
	sort.SliceStable(lookups[:int32(uint32(n))], func(a, b int) bool {
		return lookupcmp((*[1000000]otflookup)(unsafe.Pointer(&lookups[a]))[:], (*[1000000]otflookup)(unsafe.Pointer(&lookups[b]))[:]) <= 0
	})
	return n
}

// otf_gpos - transpiled function from  otf.c:939
func otf_gpos(otf_c4go_postfix []otf, gpos interface{}) {
	var lookups []otflookup = make([]otflookup, 4096)
	var // Warning (*ast.CallExpr):  otf.c:942 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:942 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:942 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:942 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:942 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	lookuplist interface{}
	var nlookups int32 = otf_gtab(otf_c4go_postfix, gpos, lookups)
	var i int32
	var j int32
	if mkfn_dry != 0 {
		return
	}
	for i = 0; i < nlookups; i++ {
		var // Warning (*ast.CallExpr):  otf.c:948 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:948 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:948 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:948 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:948 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		lookup interface{}
		var // Warning (*ast.CallExpr):  otf.c:949 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:949 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ltype int32
		var // Warning (*ast.CallExpr):  otf.c:950 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:950 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ntabs int32
		var tag []byte = lookuptag(lookups[i:])
		sec = (i + 1) * 10
		noarch.Printf([]byte("gsec %d %s\n\x00"), sec, tag)
		for j = 0; j < ntabs; j++ {
			var // Warning (*ast.CallExpr):  otf.c:955 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:955 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:955 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:955 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:955 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			tab interface{}
			var type_ int32 = ltype
			if type_ == 9 {
				// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				{
					// extension positioning
					// Warning (*ast.CallExpr):  otf.c:958 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:958 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:958 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.CallExpr):  otf.c:959 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.ParenExpr):  otf.c:959 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.BinaryOperator):  otf.c:959 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				}
			}
			switch type_ {
			case 1:
				otf_gpostype1(otf_c4go_postfix, tab, tag)
			case 2:
				otf_gpostype2(otf_c4go_postfix, tab, tag)
			case 3:
				otf_gpostype3(otf_c4go_postfix, tab, tag)
			case 4:
				otf_gpostype4(otf_c4go_postfix, tab, tag)
			case 5:
				otf_gpostype5(otf_c4go_postfix, tab, tag)
			default:
				otf_unsupported([]byte("GPOS\x00"), type_, 0)
			}
		}
	}
}

// otf_gsub - transpiled function from  otf.c:984
func otf_gsub(otf_c4go_postfix []otf, gsub interface{}) {
	var lookups []otflookup = make([]otflookup, 4096)
	var // Warning (*ast.CallExpr):  otf.c:987 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.ParenExpr):  otf.c:987 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:987 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:987 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:987 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	lookuplist interface{}
	var nlookups int32 = otf_gtab(otf_c4go_postfix, gsub, lookups)
	var i int32
	var j int32
	if mkfn_dry != 0 {
		return
	}
	for i = 0; i < nlookups; i++ {
		var // Warning (*ast.CallExpr):  otf.c:993 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.ParenExpr):  otf.c:993 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:993 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.BinaryOperator):  otf.c:993 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:993 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		lookup interface{}
		var // Warning (*ast.CallExpr):  otf.c:994 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:994 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ltype int32
		var // Warning (*ast.CallExpr):  otf.c:995 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		// Warning (*ast.VarDecl):  otf.c:995 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		ntabs int32
		var tag []byte = lookuptag(lookups[i:])
		sec = (i + 1) * 10
		noarch.Printf([]byte("gsec %d %s\n\x00"), sec, tag)
		for j = 0; j < ntabs; j++ {
			var // Warning (*ast.CallExpr):  otf.c:1000 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.ParenExpr):  otf.c:1000 :cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:1000 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.BinaryOperator):  otf.c:1000 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:1000 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			tab interface{}
			var type_ int32 = ltype
			if type_ == 7 {
				// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				{
					// extension substitution
					// Warning (*ast.CallExpr):  otf.c:1003 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:1003 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.BinaryOperator):  otf.c:1003 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
					// Warning (*ast.CallExpr):  otf.c:1004 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.ParenExpr):  otf.c:1004 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
					// Warning (*ast.BinaryOperator):  otf.c:1004 :cannot transpile BinaryOperator with type 'void *' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
				}
			}
			switch type_ {
			case 1:
				otf_gsubtype1(otf_c4go_postfix, tab, tag, nil)
			case 3:
				otf_gsubtype3(otf_c4go_postfix, tab, tag, nil)
			case 4:
				otf_gsubtype4(otf_c4go_postfix, tab, tag, nil)
			case 6:
				otf_gsubtype6(otf_c4go_postfix, tab, tag, gsub)
			default:
				otf_unsupported([]byte("GSUB\x00"), type_, 0)
			}
		}
	}
}

// cff_int - transpiled function from  otf.c:1027
func cff_int(tab interface{}, off int32, sz int32) int32 {
	// read a cff offset, which has sz bytes
	var i int32
	var n int32
	for i = 0; i < sz; i++ {
		n = n*256 + int32(uint8(((tab[0+(off+i):].([]u8))[0])))
	}
	return n
}

// cff_op - transpiled function from  otf.c:1037
func cff_op(tab interface{}, off int32, val []int32) int32 {
	// cff dict operand/operator
	var b0 int32 = int32(uint8(((tab[0+off:].([]u8))[0])))
	var i int32
	if b0 >= 32 && b0 <= 246 {
		val[0] = b0 - 139
		return 1
	}
	if b0 >= 247 && b0 <= 250 {
		val[0] = (b0-247)*256 + int32(uint8(((tab[0+(off+1):].([]u8))[0]))) + 108
		return 2
	}
	if b0 >= 251 && b0 <= 254 {
		val[0] = -(b0-251)*256 - int32(uint8(((tab[0+(off+1):].([]u8))[0]))) - 108
		return 2
	}
	if b0 == 28 {
		val[0] = int32(uint8(((tab[0+(off+1):].([]u8))[0])))<<uint64(8) | int32(uint8(((tab[0+(off+2):].([]u8))[0])))
		return 3
	}
	if b0 == 29 {
		val[0] = int32(uint8(((tab[0+(off+1):].([]u8))[0])))<<uint64(24) | int32(uint8(((tab[0+(off+2):].([]u8))[0])))<<uint64(16) | int32(uint8(((tab[0+(off+3):].([]u8))[0])))<<uint64(8) | int32(uint8(((tab[0+(off+4):].([]u8))[0])))
		return 5
	}
	if b0 == 30 {
		for i = 1; i < 32; i++ {
			var nib int32 = int32(uint8(((tab[0+(off+i):].([]u8))[0])))
			if nib&15 == 15 || nib&240 == 240 {
				break
			}
		}
		val[0] = 0
		return i + 1
	}
	val[0] = b0
	return 1
}

// cffidx_cnt - transpiled function from  otf.c:1075
func cffidx_cnt(idx interface{}) (c4goDefaultReturn int32) {
	// Warning (*ast.ReturnStmt):  otf.c:1077 :cannot transpileToStmt : cannot transpileReturnStmt. err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	{
		// Warning (*ast.CallExpr):  otf.c:1077 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	}
	return
}

// cffidx_get - transpiled function from  otf.c:1080
func cffidx_get(idx interface{}, i int32) interface{} {
	var // Warning (*ast.CallExpr):  otf.c:1082 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.VarDecl):  otf.c:1082 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	cnt int32
	var sz int32 = int32(uint8(((idx[0+2:].([]u8))[0])))
	var position int32 = int32(cff_int(idx, 3+i*sz, sz))
	slice := func() []byte {
		var position int32 = int32(-1)
		slice := idx[0+3+(cnt+1)*sz:]
		if position < 0 {
			position = -position
			var hdr reflect.SliceHeader
			sliceLen := len(slice)
			hdr.Data = uintptr(unsafe.Pointer(&slice[0])) - (uintptr(position))*unsafe.Sizeof(slice[0])
			runtime.KeepAlive(&slice[0])
			hdr.Len = sliceLen + int(position)
			hdr.Cap = hdr.Len
			slice = *((*[]byte)(unsafe.Pointer(&hdr)))
			return slice
		}
		return slice[position:]
	}()
	if position < 0 {
		position = -position
		var hdr reflect.SliceHeader
		sliceLen := len(slice)
		hdr.Data = uintptr(unsafe.Pointer(&slice[0])) - (uintptr(position))*unsafe.Sizeof(slice[0])
		runtime.KeepAlive(&slice[0])
		hdr.Len = sliceLen + int(position)
		hdr.Cap = hdr.Len
		slice = *((*[]byte)(unsafe.Pointer(&hdr)))
		return slice
	}
	return slice[position:]
}

// cffidx_len - transpiled function from  otf.c:1087
func cffidx_len(idx interface{}, i int32) int32 {
	return int32((func() int64 {
		c4go_temp_name := cffidx_get(idx, i+1)
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}() - func() int64 {
		c4go_temp_name := cffidx_get(idx, i)
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}()))
}

// cffidx_end - transpiled function from  otf.c:1092
func cffidx_end(idx interface{}) interface{} {
	return cffidx_get(idx, cffidx_cnt(idx))
}

// cffdict_get - transpiled function from  otf.c:1098
func cffdict_get(dict interface{}, len_ int32, key int32, args []int32) int32 {
	// obtain the value of the given key from a cff dict
	var off int32
	var op int32
	var val int32
	for off < len_ {
		// operators: keys (one or two bytes); operands: values
		val = op
		if args != nil {
			noarch.Memmove((*[1000000]byte)(unsafe.Pointer(uintptr(int64(uintptr(unsafe.Pointer(&args[0+1]))) / int64(1))))[:], (*[1000000]byte)(unsafe.Pointer(uintptr(int64(uintptr(unsafe.Pointer(&args[0+0]))) / int64(1))))[:], 3*4)
			args[0] = val
		}
		off += cff_op(dict, off, c4goUnsafeConvert_int32(&op))
		if op == 12 {
			// two-byte operator
			off += cff_op(dict, off, c4goUnsafeConvert_int32(&op))
			op += 1200
		}
		if op == key {
			return val
		}
	}
	return 0
}

// cff_char - transpiled function from  otf.c:1121
func cff_char(stridx interface{}, id int32, dst []byte) {
	var len_ int32
	if id < 391 {
		noarch.Strcpy(dst, stdset[id])
		return
	}
	id -= 391
	len_ = cffidx_len(stridx, id)
	if mkfn_warn != 0 && len_ >= 64 {
		noarch.Fprintf(noarch.Stderr, []byte("neatmkfn: truncating glyph names (GNLEN is too small)\n\x00"))
	}
	if len_ >= 64 {
		len_ = 64 - 1
	}
	memcpy(dst, cffidx_get(stridx, id), uint32(len_))
	dst[len_] = '\x00'
}

// otf_cff - transpiled function from  otf.c:1138
func otf_cff(otf_c4go_postfix []otf, cff interface{}) {
	// name index
	var nameidx interface{}
	// top dict index
	var topidx interface{}
	// string idx
	var stridx interface{}
	// charstrings index
	var chridx interface{}
	// charset offset
	var charset interface{}
	// invalid CFF SIDs
	var badcff int32
	var i int32
	var j int32
	if int32(uint8(((cff[0+0:].([]u8))[0]))) != 1 {
		return
	}
	nameidx = cff[0+int32(uint8(((cff[0+2:].([]u8))[0]))):]
	topidx = cffidx_end(nameidx)
	if cffidx_cnt(nameidx) < 1 {
		return
	}
	stridx = cffidx_end(topidx)
	chridx = cff[0+cffdict_get(cffidx_get(topidx, 0), cffidx_len(topidx, 0), 17, nil):]
	charset = cff[0+cffdict_get(cffidx_get(topidx, 0), cffidx_len(topidx, 0), 15, nil):]
	glyph_n = cffidx_cnt(chridx)
	badcff = noarch.BoolToInt(cffidx_cnt(chridx)-391 > cffidx_cnt(stridx))
	noarch.Strcpy(glyph_name[0], []byte(".notdef\x00"))
	if cffidx_cnt(nameidx) > 0 {
		// read font name from name index
		var name []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
		memcpy(name, cffidx_get(nameidx, 0), uint32(cffidx_len(nameidx, 0)))
		if int32(name[0]) != 0 && noarch.Not(otf_c4go_postfix[0].name[:][0]) {
			noarch.Snprintf(otf_c4go_postfix[0].name[:], int32(128), []byte("%s\x00"), name)
		}
	}
	if noarch.Not(badcff) && int32(uint8(((charset[0+0:].([]u8))[0]))) == 0 {
		// Warning (*ast.CallExpr):  otf.c:1171 :cannot transpileToStmt : cannot transpileToExpr. err = error in transpileCallExpr : name of call function is cff_char. argument position is 1. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
		{
			// read charset: glyph to character name
			for i = 0; i < glyph_n; i++ {
				// Warning (*ast.CallExpr):  otf.c:1171 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
				// Warning (*ast.ImplicitCastExpr):  otf.c:1171 :argument position is 1. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			}
		}
	}
	if noarch.Not(badcff) && (int32(uint8(((charset[0+0:].([]u8))[0]))) == 1 || int32(uint8(((charset[0+0:].([]u8))[0]))) == 2) {
		var g int32 = 1
		var sz int32 = func() int32 {
			if int32(uint8(((charset[0+0:].([]u8))[0]))) == 1 {
				return 3
			}
			return 4
		}()
		for i = 0; g < glyph_n; i++ {
			var // Warning (*ast.CallExpr):  otf.c:1178 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			// Warning (*ast.VarDecl):  otf.c:1178 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
			sid int32
			var cnt int32 = cff_int(charset, 1+i*sz+2, sz-2)
			for j = 0; j <= cnt && g < glyph_n; j++ {
				cff_char(stridx, sid+j, glyph_name[g])
				g++
			}
		}
	}
}

// otf_input - transpiled function from  otf.c:1188
func otf_input(fd int32) interface{} {
	var sb []sbuf = sbuf_make()
	var buf []byte = make([]byte, 4096)
	var nr int32
	for (func() int32 {
		nr = int32(noarch.Read(fd, buf, 4096))
		return nr
	}()) > 0 {
		sbuf_mem(sb, buf, nr)
	}
	return sbuf_done(sb)
}

// otf_feat - transpiled function from  otf.c:1198
func otf_feat(otf_c4go_postfix []otf) {
	if otf_table(otf_c4go_postfix, []byte("GSUB\x00")) != nil {
		otf_gsub(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("GSUB\x00")))
	}
	if otf_table(otf_c4go_postfix, []byte("GPOS\x00")) != nil {
		otf_gpos(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("GPOS\x00")))
	}
}

// otf_offsettable - transpiled function from  otf.c:1206
func otf_offsettable(otf_otf interface{}, otf_off interface{}) int32 {
	var i int32
	var // Warning (*ast.CallExpr):  otf.c:1209 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
	// Warning (*ast.VarDecl):  otf.c:1209 :cannot casting {uint32_t -> unsigned int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
	tag uint32
	var otf_cur otf = otf{otf_otf, otf_off, [128]byte{}}
	var otf_c4go_postfix []otf = c4goUnsafeConvert_otf(&otf_cur)
	if tag != 65536 && tag != 1330926671 {
		return 1
	}
	// Warning (*ast.CallExpr):  otf.c:1214 :cannot casting {u16 -> uint16_t}. err = cannot casting {unsigned short -> uint16_t}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:1214 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	// Warning (*ast.BinaryOperator):  otf.c:1214 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint16_t -> int}. err = cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.
	otf_name(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("name\x00")))
	otf_cmap(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("cmap\x00")))
	otf_post(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("post\x00")))
	if otf_table(otf_c4go_postfix, []byte("glyf\x00")) != nil {
		otf_glyf(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("glyf\x00")))
	}
	if otf_table(otf_c4go_postfix, []byte("CFF \x00")) != nil {
		otf_cff(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("CFF \x00")))
	}
	for i = 0; i < glyph_n; i++ {
		if noarch.Not(glyph_name[i][0]) {
			if glyph_code[i] != 0 {
				noarch.Sprintf(glyph_name[i], []byte("uni%04X\x00"), glyph_code[i])
			} else {
				noarch.Sprintf(glyph_name[i], []byte("gl%05X\x00"), i)
			}
		}
	}
	otf_hmtx(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("hmtx\x00")))
	if noarch.Not(mkfn_font(otf_c4go_postfix[0].name[:])) {
		return 0
	}
	for i = 0; i < glyph_n; i++ {
		mkfn_char(glyph_name[i], -1, func() int32 {
			if glyph_code[i] != 65535 {
				return glyph_code[i]
			}
			return 0
		}(), uwid(glyph_wid[i]), uwid(glyph_bbox[i][0]), uwid(glyph_bbox[i][1]), uwid(glyph_bbox[i][2]), uwid(glyph_bbox[i][3]))
	}
	mkfn_header(otf_c4go_postfix[0].name[:])
	if otf_table(otf_c4go_postfix, []byte("kern\x00")) != nil {
		otf_kern(otf_c4go_postfix, otf_table(otf_c4go_postfix, []byte("kern\x00")))
	}
	otf_feat(otf_c4go_postfix)
	return 0
}

// otf_read - transpiled function from  otf.c:1247
func otf_read() int32 {
	var otf_buf []byte = otf_input(0).([]byte)
	var // Warning (*ast.CallExpr):  otf.c:1250 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
	// Warning (*ast.VarDecl):  otf.c:1250 :cannot casting {uint32_t -> unsigned int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
	tag uint32
	var n int32
	var i int32
	if tag == 65536 || tag == 1330926671 {
		return otf_offsettable(otf_buf, otf_buf)
	}
	if tag != 1953784678 {
		return 1
	}
	// OpenType Collections
	// Warning (*ast.CallExpr):  otf.c:1257 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
	// Warning (*ast.BinaryOperator):  otf.c:1257 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
	{
		// Warning (*ast.BinaryOperator):  otf.c:1257 :cannot transpileToStmt : cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `=`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
		for i = 0; i < n; i++ {
			var // Warning (*ast.CallExpr):  otf.c:1259 :cannot casting {u32 -> uint32_t}. err = cannot casting {unsigned int -> uint32_t}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.ParenExpr):  otf.c:1259 :cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.BinaryOperator):  otf.c:1259 :cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.BinaryOperator):  otf.c:1259 :cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			// Warning (*ast.VarDecl):  otf.c:1259 :cannot getDefaultValueForVar : err = cannot transpileToExpr. err = cannot transpileImplicitCastExpr. err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {int}. Error: operator is `+`. cannot transpilePointerArith: err = cannot transpileToExpr. err = cannot transpile BinaryOperator with type 'int' : result type = {unknown53}. Error: operator is `+`. cannot atomic for right part. cannot transpileToExpr. err = cannot transpile ParenExpr. err = cannot casting {uint32_t -> int}. err = cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
			off interface{}
			otf_offsettable(otf_buf, off)
		}
	}
	return 0
}

// ggrp_g - transpiled function from  otf.c:1266
// glyph groups
var ggrp_g [][]int32 = make([][]int32, 2048)

// ggrp_len - transpiled function from  otf.c:1267
var ggrp_len []int32 = make([]int32, 2048)

// ggrp_n - transpiled function from  otf.c:1268
var ggrp_n int32

// ggrp_find - transpiled function from  otf.c:1270
func ggrp_find(src []int32, n int32) int32 {
	var i int32
	var j int32
	for i = 0; i < ggrp_n; i++ {
		if ggrp_len[i] == n {
			for j = 0; j < n; j++ {
				if src[j] != ggrp_g[i][j] {
					break
				}
			}
			if j == n {
				return i
			}
		}
	}
	return -1
}

// ggrp_make - transpiled function from  otf.c:1285
func ggrp_make(src []int32, n int32) int32 {
	var id int32 = ggrp_find(src, n)
	var i int32
	if id >= 0 {
		return id
	}
	id = func() int32 {
		defer func() {
			ggrp_n++
		}()
		return ggrp_n
	}()
	ggrp_g[id] = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(n)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	ggrp_len[id] = n
	for i = 0; i < n; i++ {
		ggrp_g[id][i] = src[i]
	}
	noarch.Printf([]byte("ggrp %d %d\x00"), id, n)
	for i = 0; i < n; i++ {
		noarch.Printf([]byte(" %s\x00"), glyph_name[src[i]])
	}
	fmt.Printf("\n")
	return id
}

// macset - transpiled function from  otf.c:1303
var macset [][]byte = [][]byte{[]byte(".notdef\x00"), []byte(".null\x00"), []byte("nonmarkingreturn\x00"), []byte("space\x00"), []byte("exclam\x00"), []byte("quotedbl\x00"), []byte("numbersign\x00"), []byte("dollar\x00"), []byte("percent\x00"), []byte("ampersand\x00"), []byte("quotesingle\x00"), []byte("parenleft\x00"), []byte("parenright\x00"), []byte("asterisk\x00"), []byte("plus\x00"), []byte("comma\x00"), []byte("hyphen\x00"), []byte("period\x00"), []byte("slash\x00"), []byte("zero\x00"), []byte("one\x00"), []byte("two\x00"), []byte("three\x00"), []byte("four\x00"), []byte("five\x00"), []byte("six\x00"), []byte("seven\x00"), []byte("eight\x00"), []byte("nine\x00"), []byte("colon\x00"), []byte("semicolon\x00"), []byte("less\x00"), []byte("equal\x00"), []byte("greater\x00"), []byte("question\x00"), []byte("at\x00"), []byte("A\x00"), []byte("B\x00"), []byte("C\x00"), []byte("D\x00"), []byte("E\x00"), []byte("F\x00"), []byte("G\x00"), []byte("H\x00"), []byte("I\x00"), []byte("J\x00"), []byte("K\x00"), []byte("L\x00"), []byte("M\x00"), []byte("N\x00"), []byte("O\x00"), []byte("P\x00"), []byte("Q\x00"), []byte("R\x00"), []byte("S\x00"), []byte("T\x00"), []byte("U\x00"), []byte("V\x00"), []byte("W\x00"), []byte("X\x00"), []byte("Y\x00"), []byte("Z\x00"), []byte("bracketleft\x00"), []byte("backslash\x00"), []byte("bracketright\x00"), []byte("asciicircum\x00"), []byte("underscore\x00"), []byte("grave\x00"), []byte("a\x00"), []byte("b\x00"), []byte("c\x00"), []byte("d\x00"), []byte("e\x00"), []byte("f\x00"), []byte("g\x00"), []byte("h\x00"), []byte("i\x00"), []byte("j\x00"), []byte("k\x00"), []byte("l\x00"), []byte("m\x00"), []byte("n\x00"), []byte("o\x00"), []byte("p\x00"), []byte("q\x00"), []byte("r\x00"), []byte("s\x00"), []byte("t\x00"), []byte("u\x00"), []byte("v\x00"), []byte("w\x00"), []byte("x\x00"), []byte("y\x00"), []byte("z\x00"), []byte("braceleft\x00"), []byte("bar\x00"), []byte("braceright\x00"), []byte("asciitilde\x00"), []byte("Adieresis\x00"), []byte("Aring\x00"), []byte("Ccedilla\x00"), []byte("Eacute\x00"), []byte("Ntilde\x00"), []byte("Odieresis\x00"), []byte("Udieresis\x00"), []byte("aacute\x00"), []byte("agrave\x00"), []byte("acircumflex\x00"), []byte("adieresis\x00"), []byte("atilde\x00"), []byte("aring\x00"), []byte("ccedilla\x00"), []byte("eacute\x00"), []byte("egrave\x00"), []byte("ecircumflex\x00"), []byte("edieresis\x00"), []byte("iacute\x00"), []byte("igrave\x00"), []byte("icircumflex\x00"), []byte("idieresis\x00"), []byte("ntilde\x00"), []byte("oacute\x00"), []byte("ograve\x00"), []byte("ocircumflex\x00"), []byte("odieresis\x00"), []byte("otilde\x00"), []byte("uacute\x00"), []byte("ugrave\x00"), []byte("ucircumflex\x00"), []byte("udieresis\x00"), []byte("dagger\x00"), []byte("degree\x00"), []byte("cent\x00"), []byte("sterling\x00"), []byte("section\x00"), []byte("bullet\x00"), []byte("paragraph\x00"), []byte("germandbls\x00"), []byte("registered\x00"), []byte("copyright\x00"), []byte("trademark\x00"), []byte("acute\x00"), []byte("dieresis\x00"), []byte("notequal\x00"), []byte("AE\x00"), []byte("Oslash\x00"), []byte("infinity\x00"), []byte("plusminus\x00"), []byte("lessequal\x00"), []byte("greaterequal\x00"), []byte("yen\x00"), []byte("mu\x00"), []byte("partialdiff\x00"), []byte("summation\x00"), []byte("product\x00"), []byte("pi\x00"), []byte("integral\x00"), []byte("ordfeminine\x00"), []byte("ordmasculine\x00"), []byte("Omega\x00"), []byte("ae\x00"), []byte("oslash\x00"), []byte("questiondown\x00"), []byte("exclamdown\x00"), []byte("logicalnot\x00"), []byte("radical\x00"), []byte("florin\x00"), []byte("approxequal\x00"), []byte("Delta\x00"), []byte("guillemotleft\x00"), []byte("guillemotright\x00"), []byte("ellipsis\x00"), []byte("nonbreakingspace\x00"), []byte("Agrave\x00"), []byte("Atilde\x00"), []byte("Otilde\x00"), []byte("OE\x00"), []byte("oe\x00"), []byte("endash\x00"), []byte("emdash\x00"), []byte("quotedblleft\x00"), []byte("quotedblright\x00"), []byte("quoteleft\x00"), []byte("quoteright\x00"), []byte("divide\x00"), []byte("lozenge\x00"), []byte("ydieresis\x00"), []byte("Ydieresis\x00"), []byte("fraction\x00"), []byte("currency\x00"), []byte("guilsinglleft\x00"), []byte("guilsinglright\x00"), []byte("fi\x00"), []byte("fl\x00"), []byte("daggerdbl\x00"), []byte("periodcentered\x00"), []byte("quotesinglbase\x00"), []byte("quotedblbase\x00"), []byte("perthousand\x00"), []byte("Acircumflex\x00"), []byte("Ecircumflex\x00"), []byte("Aacute\x00"), []byte("Edieresis\x00"), []byte("Egrave\x00"), []byte("Iacute\x00"), []byte("Icircumflex\x00"), []byte("Idieresis\x00"), []byte("Igrave\x00"), []byte("Oacute\x00"), []byte("Ocircumflex\x00"), []byte("apple\x00"), []byte("Ograve\x00"), []byte("Uacute\x00"), []byte("Ucircumflex\x00"), []byte("Ugrave\x00"), []byte("dotlessi\x00"), []byte("circumflex\x00"), []byte("tilde\x00"), []byte("macron\x00"), []byte("breve\x00"), []byte("dotaccent\x00"), []byte("ring\x00"), []byte("cedilla\x00"), []byte("hungarumlaut\x00"), []byte("ogonek\x00"), []byte("caron\x00"), []byte("Lslash\x00"), []byte("lslash\x00"), []byte("Scaron\x00"), []byte("scaron\x00"), []byte("Zcaron\x00"), []byte("zcaron\x00"), []byte("brokenbar\x00"), []byte("Eth\x00"), []byte("eth\x00"), []byte("Yacute\x00"), []byte("yacute\x00"), []byte("Thorn\x00"), []byte("thorn\x00"), []byte("minus\x00"), []byte("multiply\x00"), []byte("onesuperior\x00"), []byte("twosuperior\x00"), []byte("threesuperior\x00"), []byte("onehalf\x00"), []byte("onequarter\x00"), []byte("threequarters\x00"), []byte("franc\x00"), []byte("Gbreve\x00"), []byte("gbreve\x00"), []byte("Idotaccent\x00"), []byte("Scedilla\x00"), []byte("scedilla\x00"), []byte("Cacute\x00"), []byte("cacute\x00"), []byte("Ccaron\x00"), []byte("ccaron\x00"), []byte("dcroat\x00")}

// stdset - transpiled function from  otf.c:1358
var stdset [][]byte = [][]byte{[]byte(".notdef\x00"), []byte("space\x00"), []byte("exclam\x00"), []byte("quotedbl\x00"), []byte("numbersign\x00"), []byte("dollar\x00"), []byte("percent\x00"), []byte("ampersand\x00"), []byte("quoteright\x00"), []byte("parenleft\x00"), []byte("parenright\x00"), []byte("asterisk\x00"), []byte("plus\x00"), []byte("comma\x00"), []byte("hyphen\x00"), []byte("period\x00"), []byte("slash\x00"), []byte("zero\x00"), []byte("one\x00"), []byte("two\x00"), []byte("three\x00"), []byte("four\x00"), []byte("five\x00"), []byte("six\x00"), []byte("seven\x00"), []byte("eight\x00"), []byte("nine\x00"), []byte("colon\x00"), []byte("semicolon\x00"), []byte("less\x00"), []byte("equal\x00"), []byte("greater\x00"), []byte("question\x00"), []byte("at\x00"), []byte("A\x00"), []byte("B\x00"), []byte("C\x00"), []byte("D\x00"), []byte("E\x00"), []byte("F\x00"), []byte("G\x00"), []byte("H\x00"), []byte("I\x00"), []byte("J\x00"), []byte("K\x00"), []byte("L\x00"), []byte("M\x00"), []byte("N\x00"), []byte("O\x00"), []byte("P\x00"), []byte("Q\x00"), []byte("R\x00"), []byte("S\x00"), []byte("T\x00"), []byte("U\x00"), []byte("V\x00"), []byte("W\x00"), []byte("X\x00"), []byte("Y\x00"), []byte("Z\x00"), []byte("bracketleft\x00"), []byte("backslash\x00"), []byte("bracketright\x00"), []byte("asciicircum\x00"), []byte("underscore\x00"), []byte("quoteleft\x00"), []byte("a\x00"), []byte("b\x00"), []byte("c\x00"), []byte("d\x00"), []byte("e\x00"), []byte("f\x00"), []byte("g\x00"), []byte("h\x00"), []byte("i\x00"), []byte("j\x00"), []byte("k\x00"), []byte("l\x00"), []byte("m\x00"), []byte("n\x00"), []byte("o\x00"), []byte("p\x00"), []byte("q\x00"), []byte("r\x00"), []byte("s\x00"), []byte("t\x00"), []byte("u\x00"), []byte("v\x00"), []byte("w\x00"), []byte("x\x00"), []byte("y\x00"), []byte("z\x00"), []byte("braceleft\x00"), []byte("bar\x00"), []byte("braceright\x00"), []byte("asciitilde\x00"), []byte("exclamdown\x00"), []byte("cent\x00"), []byte("sterling\x00"), []byte("fraction\x00"), []byte("yen\x00"), []byte("florin\x00"), []byte("section\x00"), []byte("currency\x00"), []byte("quotesingle\x00"), []byte("quotedblleft\x00"), []byte("guillemotleft\x00"), []byte("guilsinglleft\x00"), []byte("guilsinglright\x00"), []byte("fi\x00"), []byte("fl\x00"), []byte("endash\x00"), []byte("dagger\x00"), []byte("daggerdbl\x00"), []byte("periodcentered\x00"), []byte("paragraph\x00"), []byte("bullet\x00"), []byte("quotesinglbase\x00"), []byte("quotedblbase\x00"), []byte("quotedblright\x00"), []byte("guillemotright\x00"), []byte("ellipsis\x00"), []byte("perthousand\x00"), []byte("questiondown\x00"), []byte("grave\x00"), []byte("acute\x00"), []byte("circumflex\x00"), []byte("tilde\x00"), []byte("macron\x00"), []byte("breve\x00"), []byte("dotaccent\x00"), []byte("dieresis\x00"), []byte("ring\x00"), []byte("cedilla\x00"), []byte("hungarumlaut\x00"), []byte("ogonek\x00"), []byte("caron\x00"), []byte("emdash\x00"), []byte("AE\x00"), []byte("ordfeminine\x00"), []byte("Lslash\x00"), []byte("Oslash\x00"), []byte("OE\x00"), []byte("ordmasculine\x00"), []byte("ae\x00"), []byte("dotlessi\x00"), []byte("lslash\x00"), []byte("oslash\x00"), []byte("oe\x00"), []byte("germandbls\x00"), []byte("onesuperior\x00"), []byte("logicalnot\x00"), []byte("mu\x00"), []byte("trademark\x00"), []byte("Eth\x00"), []byte("onehalf\x00"), []byte("plusminus\x00"), []byte("Thorn\x00"), []byte("onequarter\x00"), []byte("divide\x00"), []byte("brokenbar\x00"), []byte("degree\x00"), []byte("thorn\x00"), []byte("threequarters\x00"), []byte("twosuperior\x00"), []byte("registered\x00"), []byte("minus\x00"), []byte("eth\x00"), []byte("multiply\x00"), []byte("threesuperior\x00"), []byte("copyright\x00"), []byte("Aacute\x00"), []byte("Acircumflex\x00"), []byte("Adieresis\x00"), []byte("Agrave\x00"), []byte("Aring\x00"), []byte("Atilde\x00"), []byte("Ccedilla\x00"), []byte("Eacute\x00"), []byte("Ecircumflex\x00"), []byte("Edieresis\x00"), []byte("Egrave\x00"), []byte("Iacute\x00"), []byte("Icircumflex\x00"), []byte("Idieresis\x00"), []byte("Igrave\x00"), []byte("Ntilde\x00"), []byte("Oacute\x00"), []byte("Ocircumflex\x00"), []byte("Odieresis\x00"), []byte("Ograve\x00"), []byte("Otilde\x00"), []byte("Scaron\x00"), []byte("Uacute\x00"), []byte("Ucircumflex\x00"), []byte("Udieresis\x00"), []byte("Ugrave\x00"), []byte("Yacute\x00"), []byte("Ydieresis\x00"), []byte("Zcaron\x00"), []byte("aacute\x00"), []byte("acircumflex\x00"), []byte("adieresis\x00"), []byte("agrave\x00"), []byte("aring\x00"), []byte("atilde\x00"), []byte("ccedilla\x00"), []byte("eacute\x00"), []byte("ecircumflex\x00"), []byte("edieresis\x00"), []byte("egrave\x00"), []byte("iacute\x00"), []byte("icircumflex\x00"), []byte("idieresis\x00"), []byte("igrave\x00"), []byte("ntilde\x00"), []byte("oacute\x00"), []byte("ocircumflex\x00"), []byte("odieresis\x00"), []byte("ograve\x00"), []byte("otilde\x00"), []byte("scaron\x00"), []byte("uacute\x00"), []byte("ucircumflex\x00"), []byte("udieresis\x00"), []byte("ugrave\x00"), []byte("yacute\x00"), []byte("ydieresis\x00"), []byte("zcaron\x00"), []byte("exclamsmall\x00"), []byte("Hungarumlautsmall\x00"), []byte("dollaroldstyle\x00"), []byte("dollarsuperior\x00"), []byte("ampersandsmall\x00"), []byte("Acutesmall\x00"), []byte("parenleftsuperior\x00"), []byte("parenrightsuperior\x00"), []byte("twodotenleader\x00"), []byte("onedotenleader\x00"), []byte("zerooldstyle\x00"), []byte("oneoldstyle\x00"), []byte("twooldstyle\x00"), []byte("threeoldstyle\x00"), []byte("fouroldstyle\x00"), []byte("fiveoldstyle\x00"), []byte("sixoldstyle\x00"), []byte("sevenoldstyle\x00"), []byte("eightoldstyle\x00"), []byte("nineoldstyle\x00"), []byte("commasuperior\x00"), []byte("threequartersemdash\x00"), []byte("periodsuperior\x00"), []byte("questionsmall\x00"), []byte("asuperior\x00"), []byte("bsuperior\x00"), []byte("centsuperior\x00"), []byte("dsuperior\x00"), []byte("esuperior\x00"), []byte("isuperior\x00"), []byte("lsuperior\x00"), []byte("msuperior\x00"), []byte("nsuperior\x00"), []byte("osuperior\x00"), []byte("rsuperior\x00"), []byte("ssuperior\x00"), []byte("tsuperior\x00"), []byte("ff\x00"), []byte("ffi\x00"), []byte("ffl\x00"), []byte("parenleftinferior\x00"), []byte("parenrightinferior\x00"), []byte("Circumflexsmall\x00"), []byte("hyphensuperior\x00"), []byte("Gravesmall\x00"), []byte("Asmall\x00"), []byte("Bsmall\x00"), []byte("Csmall\x00"), []byte("Dsmall\x00"), []byte("Esmall\x00"), []byte("Fsmall\x00"), []byte("Gsmall\x00"), []byte("Hsmall\x00"), []byte("Ismall\x00"), []byte("Jsmall\x00"), []byte("Ksmall\x00"), []byte("Lsmall\x00"), []byte("Msmall\x00"), []byte("Nsmall\x00"), []byte("Osmall\x00"), []byte("Psmall\x00"), []byte("Qsmall\x00"), []byte("Rsmall\x00"), []byte("Ssmall\x00"), []byte("Tsmall\x00"), []byte("Usmall\x00"), []byte("Vsmall\x00"), []byte("Wsmall\x00"), []byte("Xsmall\x00"), []byte("Ysmall\x00"), []byte("Zsmall\x00"), []byte("colonmonetary\x00"), []byte("onefitted\x00"), []byte("rupiah\x00"), []byte("Tildesmall\x00"), []byte("exclamdownsmall\x00"), []byte("centoldstyle\x00"), []byte("Lslashsmall\x00"), []byte("Scaronsmall\x00"), []byte("Zcaronsmall\x00"), []byte("Dieresissmall\x00"), []byte("Brevesmall\x00"), []byte("Caronsmall\x00"), []byte("Dotaccentsmall\x00"), []byte("Macronsmall\x00"), []byte("figuredash\x00"), []byte("hypheninferior\x00"), []byte("Ogoneksmall\x00"), []byte("Ringsmall\x00"), []byte("Cedillasmall\x00"), []byte("questiondownsmall\x00"), []byte("oneeighth\x00"), []byte("threeeighths\x00"), []byte("fiveeighths\x00"), []byte("seveneighths\x00"), []byte("onethird\x00"), []byte("twothirds\x00"), []byte("zerosuperior\x00"), []byte("foursuperior\x00"), []byte("fivesuperior\x00"), []byte("sixsuperior\x00"), []byte("sevensuperior\x00"), []byte("eightsuperior\x00"), []byte("ninesuperior\x00"), []byte("zeroinferior\x00"), []byte("oneinferior\x00"), []byte("twoinferior\x00"), []byte("threeinferior\x00"), []byte("fourinferior\x00"), []byte("fiveinferior\x00"), []byte("sixinferior\x00"), []byte("seveninferior\x00"), []byte("eightinferior\x00"), []byte("nineinferior\x00"), []byte("centinferior\x00"), []byte("dollarinferior\x00"), []byte("periodinferior\x00"), []byte("commainferior\x00"), []byte("Agravesmall\x00"), []byte("Aacutesmall\x00"), []byte("Acircumflexsmall\x00"), []byte("Atildesmall\x00"), []byte("Adieresissmall\x00"), []byte("Aringsmall\x00"), []byte("AEsmall\x00"), []byte("Ccedillasmall\x00"), []byte("Egravesmall\x00"), []byte("Eacutesmall\x00"), []byte("Ecircumflexsmall\x00"), []byte("Edieresissmall\x00"), []byte("Igravesmall\x00"), []byte("Iacutesmall\x00"), []byte("Icircumflexsmall\x00"), []byte("Idieresissmall\x00"), []byte("Ethsmall\x00"), []byte("Ntildesmall\x00"), []byte("Ogravesmall\x00"), []byte("Oacutesmall\x00"), []byte("Ocircumflexsmall\x00"), []byte("Otildesmall\x00"), []byte("Odieresissmall\x00"), []byte("OEsmall\x00"), []byte("Oslashsmall\x00"), []byte("Ugravesmall\x00"), []byte("Uacutesmall\x00"), []byte("Ucircumflexsmall\x00"), []byte("Udieresissmall\x00"), []byte("Yacutesmall\x00"), []byte("Thornsmall\x00"), []byte("Ydieresissmall\x00"), []byte("001.000\x00"), []byte("001.001\x00"), []byte("001.002\x00"), []byte("001.003\x00"), []byte("Black\x00"), []byte("Bold\x00"), []byte("Book\x00"), []byte("Light\x00"), []byte("Medium\x00"), []byte("Regular\x00"), []byte("Roman\x00"), []byte("Semibold\x00")}

// sbuf - transpiled function from  sbuf.c:14
// Variable Length String Buffer
type sbuf struct {
	s    []byte
	s_n  int32
	s_sz int32
}

// sbuf_extend - transpiled function from  sbuf.c:20
func sbuf_extend(sbuf_c4go_postfix []sbuf, newsz int32) {
	// allocated buffer
	// length of the string stored in s[]
	// size of memory allocated for s[]
	var s []byte = sbuf_c4go_postfix[0].s
	sbuf_c4go_postfix[0].s_sz = newsz
	sbuf_c4go_postfix[0].s = make([]byte, uint32(sbuf_c4go_postfix[0].s_sz))
	if sbuf_c4go_postfix[0].s_n != 0 {
		memcpy(sbuf_c4go_postfix[0].s, s, uint32(sbuf_c4go_postfix[0].s_n))
	}
	_ = s
}

// sbuf_make - transpiled function from  sbuf.c:30
func sbuf_make() []sbuf {
	var sb []sbuf = (*[1000000]sbuf)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, 1)
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	noarch.Memset((*[1000000]byte)(unsafe.Pointer(uintptr(int64(uintptr(unsafe.Pointer(&sb[0]))) / int64(1))))[:], byte(0), 24)
	return sb
}

// sbuf_buf - transpiled function from  sbuf.c:37
func sbuf_buf(sb []sbuf) []byte {
	if sb[0].s == nil {
		sbuf_extend(sb, 1)
	}
	sb[0].s[sb[0].s_n] = '\x00'
	return sb[0].s
}

// sbuf_done - transpiled function from  sbuf.c:45
func sbuf_done(sb []sbuf) []byte {
	var s []byte = sbuf_buf(sb)
	_ = sb
	return s
}

// sbuf_free - transpiled function from  sbuf.c:52
func sbuf_free(sb []sbuf) {
	_ = sb[0].s
	_ = sb
}

// sbuf_chr - transpiled function from  sbuf.c:58
func sbuf_chr(sbuf_c4go_postfix []sbuf, c int32) {
	if sbuf_c4go_postfix[0].s_n+2 >= sbuf_c4go_postfix[0].s_sz {
		sbuf_extend(sbuf_c4go_postfix, (func() int32 {
			if sbuf_c4go_postfix[0].s_sz*2 < sbuf_c4go_postfix[0].s_sz+1 {
				return sbuf_c4go_postfix[0].s_sz + 1
			}
			return sbuf_c4go_postfix[0].s_sz * 2
		}()+128-1) & ^(128-1))
	}
	sbuf_c4go_postfix[0].s[func() int32 {
		tempVar1 := &sbuf_c4go_postfix[0].s_n
		defer func() {
			*tempVar1++
		}()
		return *tempVar1
	}()] = byte(c)
}

// sbuf_mem - transpiled function from  sbuf.c:65
func sbuf_mem(sbuf_c4go_postfix []sbuf, s []byte, len_ int32) {
	if sbuf_c4go_postfix[0].s_n+len_+1 >= sbuf_c4go_postfix[0].s_sz {
		sbuf_extend(sbuf_c4go_postfix, (func() int32 {
			if sbuf_c4go_postfix[0].s_sz*2 < sbuf_c4go_postfix[0].s_sz+(len_+1) {
				return sbuf_c4go_postfix[0].s_sz + (len_ + 1)
			}
			return sbuf_c4go_postfix[0].s_sz * 2
		}()+128-1) & ^(128-1))
	}
	memcpy(sbuf_c4go_postfix[0].s[0+sbuf_c4go_postfix[0].s_n:], s, uint32(len_))
	sbuf_c4go_postfix[0].s_n += len_
}

// sbuf_str - transpiled function from  sbuf.c:73
func sbuf_str(sbuf_c4go_postfix []sbuf, s []byte) {
	sbuf_mem(sbuf_c4go_postfix, s, noarch.Strlen(s))
}

// sbuf_len - transpiled function from  sbuf.c:78
func sbuf_len(sbuf_c4go_postfix []sbuf) int32 {
	return sbuf_c4go_postfix[0].s_n
}

// sbuf_cut - transpiled function from  sbuf.c:83
func sbuf_cut(sb []sbuf, len_ int32) {
	if sb[0].s_n > len_ {
		sb[0].s_n = len_
	}
}

// sbuf_printf - transpiled function from  sbuf.c:89
func sbuf_printf(sbuf_c4go_postfix []sbuf, s []byte, c4goArgs ...interface{}) {
	var buf []byte = make([]byte, 256)
	var ap *va_list
	va_start(ap, s)
	noarch.Vsnprintf(buf, int32(256), s, ap)
	va_end(ap)
	sbuf_str(sbuf_c4go_postfix, buf)
}

// tab - transpiled function from  tab.c:6
// A Dictionary
type tab struct {
	keys [][]byte
	vals []interface{}
	n    int32
	next []int32
	head [256]int32
}

// tab_alloc - transpiled function from  tab.c:14
func tab_alloc(sz int32) []tab {
	var tab_c4go_postfix []tab = (*[1000000]tab)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, 1)
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	var i int32
	noarch.Memset((*[1000000]byte)(unsafe.Pointer(uintptr(int64(uintptr(unsafe.Pointer(&tab_c4go_postfix[0]))) / int64(1))))[:], byte(0), 1080)
	tab_c4go_postfix[0].keys = (*[1000000][]byte)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(sz)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	tab_c4go_postfix[0].vals = (*[1000000]interface{})(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(sz)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	tab_c4go_postfix[0].next = (*[1000000]int32)(unsafe.Pointer(uintptr(func() int64 {
		c4go_temp_name := make([]uint32, uint32(sz)*uint32(1))
		return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
	}())))[:]
	for i = 0; i < 256; i++ {
		tab_c4go_postfix[0].head[:][i] = -1
	}
	return tab_c4go_postfix
}

// tab_free - transpiled function from  tab.c:27
func tab_free(tab_c4go_postfix []tab) {
	_ = tab_c4go_postfix[0].keys
	_ = tab_c4go_postfix[0].vals
	_ = tab_c4go_postfix[0].next
	_ = tab_c4go_postfix
}

// tab_put - transpiled function from  tab.c:35
func tab_put(tab_c4go_postfix []tab, k []byte, v interface{}) {
	tab_c4go_postfix[0].keys[tab_c4go_postfix[0].n] = k
	tab_c4go_postfix[0].vals[tab_c4go_postfix[0].n] = v
	tab_c4go_postfix[0].next[tab_c4go_postfix[0].n] = tab_c4go_postfix[0].head[:][uint8(k[0])]
	tab_c4go_postfix[0].head[:][uint8(k[0])] = tab_c4go_postfix[0].n
	tab_c4go_postfix[0].n++
}

// tab_get - transpiled function from  tab.c:44
func tab_get(tab_c4go_postfix []tab, k []byte) interface{} {
	var i int32 = tab_c4go_postfix[0].head[:][uint8(k[0])]
	for i >= 0 {
		if int32(k[1]) == int32(tab_c4go_postfix[0].keys[i][1]) && noarch.Not(noarch.Strcmp(k, tab_c4go_postfix[0].keys[i])) {
			return tab_c4go_postfix[0].vals[i]
		}
		i = tab_c4go_postfix[0].next[i]
	}
	return nil
}

// agl - transpiled function from  trfn_agl.h:3
// Adobe Glyph List
var agl [][][]byte = [][][]byte{{[]byte("A\x00"), []byte("0041\x00")}, {[]byte("AE\x00"), []byte("00C6\x00")}, {[]byte("AEacute\x00"), []byte("01FC\x00")}, {[]byte("AEmacron\x00"), []byte("01E2\x00")}, {[]byte("AEsmall\x00"), []byte("F7E6\x00")}, {[]byte("Aacute\x00"), []byte("00C1\x00")}, {[]byte("Aacutesmall\x00"), []byte("F7E1\x00")}, {[]byte("Abreve\x00"), []byte("0102\x00")}, {[]byte("Abreveacute\x00"), []byte("1EAE\x00")}, {[]byte("Abrevecyrillic\x00"), []byte("04D0\x00")}, {[]byte("Abrevedotbelow\x00"), []byte("1EB6\x00")}, {[]byte("Abrevegrave\x00"), []byte("1EB0\x00")}, {[]byte("Abrevehookabove\x00"), []byte("1EB2\x00")}, {[]byte("Abrevetilde\x00"), []byte("1EB4\x00")}, {[]byte("Acaron\x00"), []byte("01CD\x00")}, {[]byte("Acircle\x00"), []byte("24B6\x00")}, {[]byte("Acircumflex\x00"), []byte("00C2\x00")}, {[]byte("Acircumflexacute\x00"), []byte("1EA4\x00")}, {[]byte("Acircumflexdotbelow\x00"), []byte("1EAC\x00")}, {[]byte("Acircumflexgrave\x00"), []byte("1EA6\x00")}, {[]byte("Acircumflexhookabove\x00"), []byte("1EA8\x00")}, {[]byte("Acircumflexsmall\x00"), []byte("F7E2\x00")}, {[]byte("Acircumflextilde\x00"), []byte("1EAA\x00")}, {[]byte("Acute\x00"), []byte("F6C9\x00")}, {[]byte("Acutesmall\x00"), []byte("F7B4\x00")}, {[]byte("Acyrillic\x00"), []byte("0410\x00")}, {[]byte("Adblgrave\x00"), []byte("0200\x00")}, {[]byte("Adieresis\x00"), []byte("00C4\x00")}, {[]byte("Adieresiscyrillic\x00"), []byte("04D2\x00")}, {[]byte("Adieresismacron\x00"), []byte("01DE\x00")}, {[]byte("Adieresissmall\x00"), []byte("F7E4\x00")}, {[]byte("Adotbelow\x00"), []byte("1EA0\x00")}, {[]byte("Adotmacron\x00"), []byte("01E0\x00")}, {[]byte("Agrave\x00"), []byte("00C0\x00")}, {[]byte("Agravesmall\x00"), []byte("F7E0\x00")}, {[]byte("Ahookabove\x00"), []byte("1EA2\x00")}, {[]byte("Aiecyrillic\x00"), []byte("04D4\x00")}, {[]byte("Ainvertedbreve\x00"), []byte("0202\x00")}, {[]byte("Alpha\x00"), []byte("0391\x00")}, {[]byte("Alphatonos\x00"), []byte("0386\x00")}, {[]byte("Amacron\x00"), []byte("0100\x00")}, {[]byte("Amonospace\x00"), []byte("FF21\x00")}, {[]byte("Aogonek\x00"), []byte("0104\x00")}, {[]byte("Aring\x00"), []byte("00C5\x00")}, {[]byte("Aringacute\x00"), []byte("01FA\x00")}, {[]byte("Aringbelow\x00"), []byte("1E00\x00")}, {[]byte("Aringsmall\x00"), []byte("F7E5\x00")}, {[]byte("Asmall\x00"), []byte("F761\x00")}, {[]byte("Atilde\x00"), []byte("00C3\x00")}, {[]byte("Atildesmall\x00"), []byte("F7E3\x00")}, {[]byte("Aybarmenian\x00"), []byte("0531\x00")}, {[]byte("B\x00"), []byte("0042\x00")}, {[]byte("Bcircle\x00"), []byte("24B7\x00")}, {[]byte("Bdotaccent\x00"), []byte("1E02\x00")}, {[]byte("Bdotbelow\x00"), []byte("1E04\x00")}, {[]byte("Becyrillic\x00"), []byte("0411\x00")}, {[]byte("Benarmenian\x00"), []byte("0532\x00")}, {[]byte("Beta\x00"), []byte("0392\x00")}, {[]byte("Bhook\x00"), []byte("0181\x00")}, {[]byte("Blinebelow\x00"), []byte("1E06\x00")}, {[]byte("Bmonospace\x00"), []byte("FF22\x00")}, {[]byte("Brevesmall\x00"), []byte("F6F4\x00")}, {[]byte("Bsmall\x00"), []byte("F762\x00")}, {[]byte("Btopbar\x00"), []byte("0182\x00")}, {[]byte("C\x00"), []byte("0043\x00")}, {[]byte("Caarmenian\x00"), []byte("053E\x00")}, {[]byte("Cacute\x00"), []byte("0106\x00")}, {[]byte("Caron\x00"), []byte("F6CA\x00")}, {[]byte("Caronsmall\x00"), []byte("F6F5\x00")}, {[]byte("Ccaron\x00"), []byte("010C\x00")}, {[]byte("Ccedilla\x00"), []byte("00C7\x00")}, {[]byte("Ccedillaacute\x00"), []byte("1E08\x00")}, {[]byte("Ccedillasmall\x00"), []byte("F7E7\x00")}, {[]byte("Ccircle\x00"), []byte("24B8\x00")}, {[]byte("Ccircumflex\x00"), []byte("0108\x00")}, {[]byte("Cdot\x00"), []byte("010A\x00")}, {[]byte("Cdotaccent\x00"), []byte("010A\x00")}, {[]byte("Cedillasmall\x00"), []byte("F7B8\x00")}, {[]byte("Chaarmenian\x00"), []byte("0549\x00")}, {[]byte("Cheabkhasiancyrillic\x00"), []byte("04BC\x00")}, {[]byte("Checyrillic\x00"), []byte("0427\x00")}, {[]byte("Chedescenderabkhasiancyrillic\x00"), []byte("04BE\x00")}, {[]byte("Chedescendercyrillic\x00"), []byte("04B6\x00")}, {[]byte("Chedieresiscyrillic\x00"), []byte("04F4\x00")}, {[]byte("Cheharmenian\x00"), []byte("0543\x00")}, {[]byte("Chekhakassiancyrillic\x00"), []byte("04CB\x00")}, {[]byte("Cheverticalstrokecyrillic\x00"), []byte("04B8\x00")}, {[]byte("Chi\x00"), []byte("03A7\x00")}, {[]byte("Chook\x00"), []byte("0187\x00")}, {[]byte("Circumflexsmall\x00"), []byte("F6F6\x00")}, {[]byte("Cmonospace\x00"), []byte("FF23\x00")}, {[]byte("Coarmenian\x00"), []byte("0551\x00")}, {[]byte("Csmall\x00"), []byte("F763\x00")}, {[]byte("D\x00"), []byte("0044\x00")}, {[]byte("DZ\x00"), []byte("01F1\x00")}, {[]byte("DZcaron\x00"), []byte("01C4\x00")}, {[]byte("Daarmenian\x00"), []byte("0534\x00")}, {[]byte("Dafrican\x00"), []byte("0189\x00")}, {[]byte("Dcaron\x00"), []byte("010E\x00")}, {[]byte("Dcedilla\x00"), []byte("1E10\x00")}, {[]byte("Dcircle\x00"), []byte("24B9\x00")}, {[]byte("Dcircumflexbelow\x00"), []byte("1E12\x00")}, {[]byte("Dcroat\x00"), []byte("0110\x00")}, {[]byte("Ddotaccent\x00"), []byte("1E0A\x00")}, {[]byte("Ddotbelow\x00"), []byte("1E0C\x00")}, {[]byte("Decyrillic\x00"), []byte("0414\x00")}, {[]byte("Deicoptic\x00"), []byte("03EE\x00")}, {[]byte("Delta\x00"), []byte("2206\x00")}, {[]byte("Deltagreek\x00"), []byte("0394\x00")}, {[]byte("Dhook\x00"), []byte("018A\x00")}, {[]byte("Dieresis\x00"), []byte("F6CB\x00")}, {[]byte("DieresisAcute\x00"), []byte("F6CC\x00")}, {[]byte("DieresisGrave\x00"), []byte("F6CD\x00")}, {[]byte("Dieresissmall\x00"), []byte("F7A8\x00")}, {[]byte("Digammagreek\x00"), []byte("03DC\x00")}, {[]byte("Djecyrillic\x00"), []byte("0402\x00")}, {[]byte("Dlinebelow\x00"), []byte("1E0E\x00")}, {[]byte("Dmonospace\x00"), []byte("FF24\x00")}, {[]byte("Dotaccentsmall\x00"), []byte("F6F7\x00")}, {[]byte("Dslash\x00"), []byte("0110\x00")}, {[]byte("Dsmall\x00"), []byte("F764\x00")}, {[]byte("Dtopbar\x00"), []byte("018B\x00")}, {[]byte("Dz\x00"), []byte("01F2\x00")}, {[]byte("Dzcaron\x00"), []byte("01C5\x00")}, {[]byte("Dzeabkhasiancyrillic\x00"), []byte("04E0\x00")}, {[]byte("Dzecyrillic\x00"), []byte("0405\x00")}, {[]byte("Dzhecyrillic\x00"), []byte("040F\x00")}, {[]byte("E\x00"), []byte("0045\x00")}, {[]byte("Eacute\x00"), []byte("00C9\x00")}, {[]byte("Eacutesmall\x00"), []byte("F7E9\x00")}, {[]byte("Ebreve\x00"), []byte("0114\x00")}, {[]byte("Ecaron\x00"), []byte("011A\x00")}, {[]byte("Ecedillabreve\x00"), []byte("1E1C\x00")}, {[]byte("Echarmenian\x00"), []byte("0535\x00")}, {[]byte("Ecircle\x00"), []byte("24BA\x00")}, {[]byte("Ecircumflex\x00"), []byte("00CA\x00")}, {[]byte("Ecircumflexacute\x00"), []byte("1EBE\x00")}, {[]byte("Ecircumflexbelow\x00"), []byte("1E18\x00")}, {[]byte("Ecircumflexdotbelow\x00"), []byte("1EC6\x00")}, {[]byte("Ecircumflexgrave\x00"), []byte("1EC0\x00")}, {[]byte("Ecircumflexhookabove\x00"), []byte("1EC2\x00")}, {[]byte("Ecircumflexsmall\x00"), []byte("F7EA\x00")}, {[]byte("Ecircumflextilde\x00"), []byte("1EC4\x00")}, {[]byte("Ecyrillic\x00"), []byte("0404\x00")}, {[]byte("Edblgrave\x00"), []byte("0204\x00")}, {[]byte("Edieresis\x00"), []byte("00CB\x00")}, {[]byte("Edieresissmall\x00"), []byte("F7EB\x00")}, {[]byte("Edot\x00"), []byte("0116\x00")}, {[]byte("Edotaccent\x00"), []byte("0116\x00")}, {[]byte("Edotbelow\x00"), []byte("1EB8\x00")}, {[]byte("Efcyrillic\x00"), []byte("0424\x00")}, {[]byte("Egrave\x00"), []byte("00C8\x00")}, {[]byte("Egravesmall\x00"), []byte("F7E8\x00")}, {[]byte("Eharmenian\x00"), []byte("0537\x00")}, {[]byte("Ehookabove\x00"), []byte("1EBA\x00")}, {[]byte("Eightroman\x00"), []byte("2167\x00")}, {[]byte("Einvertedbreve\x00"), []byte("0206\x00")}, {[]byte("Eiotifiedcyrillic\x00"), []byte("0464\x00")}, {[]byte("Elcyrillic\x00"), []byte("041B\x00")}, {[]byte("Elevenroman\x00"), []byte("216A\x00")}, {[]byte("Emacron\x00"), []byte("0112\x00")}, {[]byte("Emacronacute\x00"), []byte("1E16\x00")}, {[]byte("Emacrongrave\x00"), []byte("1E14\x00")}, {[]byte("Emcyrillic\x00"), []byte("041C\x00")}, {[]byte("Emonospace\x00"), []byte("FF25\x00")}, {[]byte("Encyrillic\x00"), []byte("041D\x00")}, {[]byte("Endescendercyrillic\x00"), []byte("04A2\x00")}, {[]byte("Eng\x00"), []byte("014A\x00")}, {[]byte("Enghecyrillic\x00"), []byte("04A4\x00")}, {[]byte("Enhookcyrillic\x00"), []byte("04C7\x00")}, {[]byte("Eogonek\x00"), []byte("0118\x00")}, {[]byte("Eopen\x00"), []byte("0190\x00")}, {[]byte("Epsilon\x00"), []byte("0395\x00")}, {[]byte("Epsilontonos\x00"), []byte("0388\x00")}, {[]byte("Ercyrillic\x00"), []byte("0420\x00")}, {[]byte("Ereversed\x00"), []byte("018E\x00")}, {[]byte("Ereversedcyrillic\x00"), []byte("042D\x00")}, {[]byte("Escyrillic\x00"), []byte("0421\x00")}, {[]byte("Esdescendercyrillic\x00"), []byte("04AA\x00")}, {[]byte("Esh\x00"), []byte("01A9\x00")}, {[]byte("Esmall\x00"), []byte("F765\x00")}, {[]byte("Eta\x00"), []byte("0397\x00")}, {[]byte("Etarmenian\x00"), []byte("0538\x00")}, {[]byte("Etatonos\x00"), []byte("0389\x00")}, {[]byte("Eth\x00"), []byte("00D0\x00")}, {[]byte("Ethsmall\x00"), []byte("F7F0\x00")}, {[]byte("Etilde\x00"), []byte("1EBC\x00")}, {[]byte("Etildebelow\x00"), []byte("1E1A\x00")}, {[]byte("Euro\x00"), []byte("20AC\x00")}, {[]byte("Ezh\x00"), []byte("01B7\x00")}, {[]byte("Ezhcaron\x00"), []byte("01EE\x00")}, {[]byte("Ezhreversed\x00"), []byte("01B8\x00")}, {[]byte("F\x00"), []byte("0046\x00")}, {[]byte("Fcircle\x00"), []byte("24BB\x00")}, {[]byte("Fdotaccent\x00"), []byte("1E1E\x00")}, {[]byte("Feharmenian\x00"), []byte("0556\x00")}, {[]byte("Feicoptic\x00"), []byte("03E4\x00")}, {[]byte("Fhook\x00"), []byte("0191\x00")}, {[]byte("Fitacyrillic\x00"), []byte("0472\x00")}, {[]byte("Fiveroman\x00"), []byte("2164\x00")}, {[]byte("Fmonospace\x00"), []byte("FF26\x00")}, {[]byte("Fourroman\x00"), []byte("2163\x00")}, {[]byte("Fsmall\x00"), []byte("F766\x00")}, {[]byte("G\x00"), []byte("0047\x00")}, {[]byte("GBsquare\x00"), []byte("3387\x00")}, {[]byte("Gacute\x00"), []byte("01F4\x00")}, {[]byte("Gamma\x00"), []byte("0393\x00")}, {[]byte("Gammaafrican\x00"), []byte("0194\x00")}, {[]byte("Gangiacoptic\x00"), []byte("03EA\x00")}, {[]byte("Gbreve\x00"), []byte("011E\x00")}, {[]byte("Gcaron\x00"), []byte("01E6\x00")}, {[]byte("Gcedilla\x00"), []byte("0122\x00")}, {[]byte("Gcircle\x00"), []byte("24BC\x00")}, {[]byte("Gcircumflex\x00"), []byte("011C\x00")}, {[]byte("Gcommaaccent\x00"), []byte("0122\x00")}, {[]byte("Gdot\x00"), []byte("0120\x00")}, {[]byte("Gdotaccent\x00"), []byte("0120\x00")}, {[]byte("Gecyrillic\x00"), []byte("0413\x00")}, {[]byte("Ghadarmenian\x00"), []byte("0542\x00")}, {[]byte("Ghemiddlehookcyrillic\x00"), []byte("0494\x00")}, {[]byte("Ghestrokecyrillic\x00"), []byte("0492\x00")}, {[]byte("Gheupturncyrillic\x00"), []byte("0490\x00")}, {[]byte("Ghook\x00"), []byte("0193\x00")}, {[]byte("Gimarmenian\x00"), []byte("0533\x00")}, {[]byte("Gjecyrillic\x00"), []byte("0403\x00")}, {[]byte("Gmacron\x00"), []byte("1E20\x00")}, {[]byte("Gmonospace\x00"), []byte("FF27\x00")}, {[]byte("Grave\x00"), []byte("F6CE\x00")}, {[]byte("Gravesmall\x00"), []byte("F760\x00")}, {[]byte("Gsmall\x00"), []byte("F767\x00")}, {[]byte("Gsmallhook\x00"), []byte("029B\x00")}, {[]byte("Gstroke\x00"), []byte("01E4\x00")}, {[]byte("H\x00"), []byte("0048\x00")}, {[]byte("H18533\x00"), []byte("25CF\x00")}, {[]byte("H18543\x00"), []byte("25AA\x00")}, {[]byte("H18551\x00"), []byte("25AB\x00")}, {[]byte("H22073\x00"), []byte("25A1\x00")}, {[]byte("HPsquare\x00"), []byte("33CB\x00")}, {[]byte("Haabkhasiancyrillic\x00"), []byte("04A8\x00")}, {[]byte("Hadescendercyrillic\x00"), []byte("04B2\x00")}, {[]byte("Hardsigncyrillic\x00"), []byte("042A\x00")}, {[]byte("Hbar\x00"), []byte("0126\x00")}, {[]byte("Hbrevebelow\x00"), []byte("1E2A\x00")}, {[]byte("Hcedilla\x00"), []byte("1E28\x00")}, {[]byte("Hcircle\x00"), []byte("24BD\x00")}, {[]byte("Hcircumflex\x00"), []byte("0124\x00")}, {[]byte("Hdieresis\x00"), []byte("1E26\x00")}, {[]byte("Hdotaccent\x00"), []byte("1E22\x00")}, {[]byte("Hdotbelow\x00"), []byte("1E24\x00")}, {[]byte("Hmonospace\x00"), []byte("FF28\x00")}, {[]byte("Hoarmenian\x00"), []byte("0540\x00")}, {[]byte("Horicoptic\x00"), []byte("03E8\x00")}, {[]byte("Hsmall\x00"), []byte("F768\x00")}, {[]byte("Hungarumlaut\x00"), []byte("F6CF\x00")}, {[]byte("Hungarumlautsmall\x00"), []byte("F6F8\x00")}, {[]byte("Hzsquare\x00"), []byte("3390\x00")}, {[]byte("I\x00"), []byte("0049\x00")}, {[]byte("IAcyrillic\x00"), []byte("042F\x00")}, {[]byte("IJ\x00"), []byte("0132\x00")}, {[]byte("IUcyrillic\x00"), []byte("042E\x00")}, {[]byte("Iacute\x00"), []byte("00CD\x00")}, {[]byte("Iacutesmall\x00"), []byte("F7ED\x00")}, {[]byte("Ibreve\x00"), []byte("012C\x00")}, {[]byte("Icaron\x00"), []byte("01CF\x00")}, {[]byte("Icircle\x00"), []byte("24BE\x00")}, {[]byte("Icircumflex\x00"), []byte("00CE\x00")}, {[]byte("Icircumflexsmall\x00"), []byte("F7EE\x00")}, {[]byte("Icyrillic\x00"), []byte("0406\x00")}, {[]byte("Idblgrave\x00"), []byte("0208\x00")}, {[]byte("Idieresis\x00"), []byte("00CF\x00")}, {[]byte("Idieresisacute\x00"), []byte("1E2E\x00")}, {[]byte("Idieresiscyrillic\x00"), []byte("04E4\x00")}, {[]byte("Idieresissmall\x00"), []byte("F7EF\x00")}, {[]byte("Idot\x00"), []byte("0130\x00")}, {[]byte("Idotaccent\x00"), []byte("0130\x00")}, {[]byte("Idotbelow\x00"), []byte("1ECA\x00")}, {[]byte("Iebrevecyrillic\x00"), []byte("04D6\x00")}, {[]byte("Iecyrillic\x00"), []byte("0415\x00")}, {[]byte("Ifraktur\x00"), []byte("2111\x00")}, {[]byte("Igrave\x00"), []byte("00CC\x00")}, {[]byte("Igravesmall\x00"), []byte("F7EC\x00")}, {[]byte("Ihookabove\x00"), []byte("1EC8\x00")}, {[]byte("Iicyrillic\x00"), []byte("0418\x00")}, {[]byte("Iinvertedbreve\x00"), []byte("020A\x00")}, {[]byte("Iishortcyrillic\x00"), []byte("0419\x00")}, {[]byte("Imacron\x00"), []byte("012A\x00")}, {[]byte("Imacroncyrillic\x00"), []byte("04E2\x00")}, {[]byte("Imonospace\x00"), []byte("FF29\x00")}, {[]byte("Iniarmenian\x00"), []byte("053B\x00")}, {[]byte("Iocyrillic\x00"), []byte("0401\x00")}, {[]byte("Iogonek\x00"), []byte("012E\x00")}, {[]byte("Iota\x00"), []byte("0399\x00")}, {[]byte("Iotaafrican\x00"), []byte("0196\x00")}, {[]byte("Iotadieresis\x00"), []byte("03AA\x00")}, {[]byte("Iotatonos\x00"), []byte("038A\x00")}, {[]byte("Ismall\x00"), []byte("F769\x00")}, {[]byte("Istroke\x00"), []byte("0197\x00")}, {[]byte("Itilde\x00"), []byte("0128\x00")}, {[]byte("Itildebelow\x00"), []byte("1E2C\x00")}, {[]byte("Izhitsacyrillic\x00"), []byte("0474\x00")}, {[]byte("Izhitsadblgravecyrillic\x00"), []byte("0476\x00")}, {[]byte("J\x00"), []byte("004A\x00")}, {[]byte("Jaarmenian\x00"), []byte("0541\x00")}, {[]byte("Jcircle\x00"), []byte("24BF\x00")}, {[]byte("Jcircumflex\x00"), []byte("0134\x00")}, {[]byte("Jecyrillic\x00"), []byte("0408\x00")}, {[]byte("Jheharmenian\x00"), []byte("054B\x00")}, {[]byte("Jmonospace\x00"), []byte("FF2A\x00")}, {[]byte("Jsmall\x00"), []byte("F76A\x00")}, {[]byte("K\x00"), []byte("004B\x00")}, {[]byte("KBsquare\x00"), []byte("3385\x00")}, {[]byte("KKsquare\x00"), []byte("33CD\x00")}, {[]byte("Kabashkircyrillic\x00"), []byte("04A0\x00")}, {[]byte("Kacute\x00"), []byte("1E30\x00")}, {[]byte("Kacyrillic\x00"), []byte("041A\x00")}, {[]byte("Kadescendercyrillic\x00"), []byte("049A\x00")}, {[]byte("Kahookcyrillic\x00"), []byte("04C3\x00")}, {[]byte("Kappa\x00"), []byte("039A\x00")}, {[]byte("Kastrokecyrillic\x00"), []byte("049E\x00")}, {[]byte("Kaverticalstrokecyrillic\x00"), []byte("049C\x00")}, {[]byte("Kcaron\x00"), []byte("01E8\x00")}, {[]byte("Kcedilla\x00"), []byte("0136\x00")}, {[]byte("Kcircle\x00"), []byte("24C0\x00")}, {[]byte("Kcommaaccent\x00"), []byte("0136\x00")}, {[]byte("Kdotbelow\x00"), []byte("1E32\x00")}, {[]byte("Keharmenian\x00"), []byte("0554\x00")}, {[]byte("Kenarmenian\x00"), []byte("053F\x00")}, {[]byte("Khacyrillic\x00"), []byte("0425\x00")}, {[]byte("Kheicoptic\x00"), []byte("03E6\x00")}, {[]byte("Khook\x00"), []byte("0198\x00")}, {[]byte("Kjecyrillic\x00"), []byte("040C\x00")}, {[]byte("Klinebelow\x00"), []byte("1E34\x00")}, {[]byte("Kmonospace\x00"), []byte("FF2B\x00")}, {[]byte("Koppacyrillic\x00"), []byte("0480\x00")}, {[]byte("Koppagreek\x00"), []byte("03DE\x00")}, {[]byte("Ksicyrillic\x00"), []byte("046E\x00")}, {[]byte("Ksmall\x00"), []byte("F76B\x00")}, {[]byte("L\x00"), []byte("004C\x00")}, {[]byte("LJ\x00"), []byte("01C7\x00")}, {[]byte("LL\x00"), []byte("F6BF\x00")}, {[]byte("Lacute\x00"), []byte("0139\x00")}, {[]byte("Lambda\x00"), []byte("039B\x00")}, {[]byte("Lcaron\x00"), []byte("013D\x00")}, {[]byte("Lcedilla\x00"), []byte("013B\x00")}, {[]byte("Lcircle\x00"), []byte("24C1\x00")}, {[]byte("Lcircumflexbelow\x00"), []byte("1E3C\x00")}, {[]byte("Lcommaaccent\x00"), []byte("013B\x00")}, {[]byte("Ldot\x00"), []byte("013F\x00")}, {[]byte("Ldotaccent\x00"), []byte("013F\x00")}, {[]byte("Ldotbelow\x00"), []byte("1E36\x00")}, {[]byte("Ldotbelowmacron\x00"), []byte("1E38\x00")}, {[]byte("Liwnarmenian\x00"), []byte("053C\x00")}, {[]byte("Lj\x00"), []byte("01C8\x00")}, {[]byte("Ljecyrillic\x00"), []byte("0409\x00")}, {[]byte("Llinebelow\x00"), []byte("1E3A\x00")}, {[]byte("Lmonospace\x00"), []byte("FF2C\x00")}, {[]byte("Lslash\x00"), []byte("0141\x00")}, {[]byte("Lslashsmall\x00"), []byte("F6F9\x00")}, {[]byte("Lsmall\x00"), []byte("F76C\x00")}, {[]byte("M\x00"), []byte("004D\x00")}, {[]byte("MBsquare\x00"), []byte("3386\x00")}, {[]byte("Macron\x00"), []byte("F6D0\x00")}, {[]byte("Macronsmall\x00"), []byte("F7AF\x00")}, {[]byte("Macute\x00"), []byte("1E3E\x00")}, {[]byte("Mcircle\x00"), []byte("24C2\x00")}, {[]byte("Mdotaccent\x00"), []byte("1E40\x00")}, {[]byte("Mdotbelow\x00"), []byte("1E42\x00")}, {[]byte("Menarmenian\x00"), []byte("0544\x00")}, {[]byte("Mmonospace\x00"), []byte("FF2D\x00")}, {[]byte("Msmall\x00"), []byte("F76D\x00")}, {[]byte("Mturned\x00"), []byte("019C\x00")}, {[]byte("Mu\x00"), []byte("039C\x00")}, {[]byte("N\x00"), []byte("004E\x00")}, {[]byte("NJ\x00"), []byte("01CA\x00")}, {[]byte("Nacute\x00"), []byte("0143\x00")}, {[]byte("Ncaron\x00"), []byte("0147\x00")}, {[]byte("Ncedilla\x00"), []byte("0145\x00")}, {[]byte("Ncircle\x00"), []byte("24C3\x00")}, {[]byte("Ncircumflexbelow\x00"), []byte("1E4A\x00")}, {[]byte("Ncommaaccent\x00"), []byte("0145\x00")}, {[]byte("Ndotaccent\x00"), []byte("1E44\x00")}, {[]byte("Ndotbelow\x00"), []byte("1E46\x00")}, {[]byte("Nhookleft\x00"), []byte("019D\x00")}, {[]byte("Nineroman\x00"), []byte("2168\x00")}, {[]byte("Nj\x00"), []byte("01CB\x00")}, {[]byte("Njecyrillic\x00"), []byte("040A\x00")}, {[]byte("Nlinebelow\x00"), []byte("1E48\x00")}, {[]byte("Nmonospace\x00"), []byte("FF2E\x00")}, {[]byte("Nowarmenian\x00"), []byte("0546\x00")}, {[]byte("Nsmall\x00"), []byte("F76E\x00")}, {[]byte("Ntilde\x00"), []byte("00D1\x00")}, {[]byte("Ntildesmall\x00"), []byte("F7F1\x00")}, {[]byte("Nu\x00"), []byte("039D\x00")}, {[]byte("O\x00"), []byte("004F\x00")}, {[]byte("OE\x00"), []byte("0152\x00")}, {[]byte("OEsmall\x00"), []byte("F6FA\x00")}, {[]byte("Oacute\x00"), []byte("00D3\x00")}, {[]byte("Oacutesmall\x00"), []byte("F7F3\x00")}, {[]byte("Obarredcyrillic\x00"), []byte("04E8\x00")}, {[]byte("Obarreddieresiscyrillic\x00"), []byte("04EA\x00")}, {[]byte("Obreve\x00"), []byte("014E\x00")}, {[]byte("Ocaron\x00"), []byte("01D1\x00")}, {[]byte("Ocenteredtilde\x00"), []byte("019F\x00")}, {[]byte("Ocircle\x00"), []byte("24C4\x00")}, {[]byte("Ocircumflex\x00"), []byte("00D4\x00")}, {[]byte("Ocircumflexacute\x00"), []byte("1ED0\x00")}, {[]byte("Ocircumflexdotbelow\x00"), []byte("1ED8\x00")}, {[]byte("Ocircumflexgrave\x00"), []byte("1ED2\x00")}, {[]byte("Ocircumflexhookabove\x00"), []byte("1ED4\x00")}, {[]byte("Ocircumflexsmall\x00"), []byte("F7F4\x00")}, {[]byte("Ocircumflextilde\x00"), []byte("1ED6\x00")}, {[]byte("Ocyrillic\x00"), []byte("041E\x00")}, {[]byte("Odblacute\x00"), []byte("0150\x00")}, {[]byte("Odblgrave\x00"), []byte("020C\x00")}, {[]byte("Odieresis\x00"), []byte("00D6\x00")}, {[]byte("Odieresiscyrillic\x00"), []byte("04E6\x00")}, {[]byte("Odieresissmall\x00"), []byte("F7F6\x00")}, {[]byte("Odotbelow\x00"), []byte("1ECC\x00")}, {[]byte("Ogoneksmall\x00"), []byte("F6FB\x00")}, {[]byte("Ograve\x00"), []byte("00D2\x00")}, {[]byte("Ogravesmall\x00"), []byte("F7F2\x00")}, {[]byte("Oharmenian\x00"), []byte("0555\x00")}, {[]byte("Ohm\x00"), []byte("2126\x00")}, {[]byte("Ohookabove\x00"), []byte("1ECE\x00")}, {[]byte("Ohorn\x00"), []byte("01A0\x00")}, {[]byte("Ohornacute\x00"), []byte("1EDA\x00")}, {[]byte("Ohorndotbelow\x00"), []byte("1EE2\x00")}, {[]byte("Ohorngrave\x00"), []byte("1EDC\x00")}, {[]byte("Ohornhookabove\x00"), []byte("1EDE\x00")}, {[]byte("Ohorntilde\x00"), []byte("1EE0\x00")}, {[]byte("Ohungarumlaut\x00"), []byte("0150\x00")}, {[]byte("Oi\x00"), []byte("01A2\x00")}, {[]byte("Oinvertedbreve\x00"), []byte("020E\x00")}, {[]byte("Omacron\x00"), []byte("014C\x00")}, {[]byte("Omacronacute\x00"), []byte("1E52\x00")}, {[]byte("Omacrongrave\x00"), []byte("1E50\x00")}, {[]byte("Omega\x00"), []byte("2126\x00")}, {[]byte("Omegacyrillic\x00"), []byte("0460\x00")}, {[]byte("Omegagreek\x00"), []byte("03A9\x00")}, {[]byte("Omegaroundcyrillic\x00"), []byte("047A\x00")}, {[]byte("Omegatitlocyrillic\x00"), []byte("047C\x00")}, {[]byte("Omegatonos\x00"), []byte("038F\x00")}, {[]byte("Omicron\x00"), []byte("039F\x00")}, {[]byte("Omicrontonos\x00"), []byte("038C\x00")}, {[]byte("Omonospace\x00"), []byte("FF2F\x00")}, {[]byte("Oneroman\x00"), []byte("2160\x00")}, {[]byte("Oogonek\x00"), []byte("01EA\x00")}, {[]byte("Oogonekmacron\x00"), []byte("01EC\x00")}, {[]byte("Oopen\x00"), []byte("0186\x00")}, {[]byte("Oslash\x00"), []byte("00D8\x00")}, {[]byte("Oslashacute\x00"), []byte("01FE\x00")}, {[]byte("Oslashsmall\x00"), []byte("F7F8\x00")}, {[]byte("Osmall\x00"), []byte("F76F\x00")}, {[]byte("Ostrokeacute\x00"), []byte("01FE\x00")}, {[]byte("Otcyrillic\x00"), []byte("047E\x00")}, {[]byte("Otilde\x00"), []byte("00D5\x00")}, {[]byte("Otildeacute\x00"), []byte("1E4C\x00")}, {[]byte("Otildedieresis\x00"), []byte("1E4E\x00")}, {[]byte("Otildesmall\x00"), []byte("F7F5\x00")}, {[]byte("P\x00"), []byte("0050\x00")}, {[]byte("Pacute\x00"), []byte("1E54\x00")}, {[]byte("Pcircle\x00"), []byte("24C5\x00")}, {[]byte("Pdotaccent\x00"), []byte("1E56\x00")}, {[]byte("Pecyrillic\x00"), []byte("041F\x00")}, {[]byte("Peharmenian\x00"), []byte("054A\x00")}, {[]byte("Pemiddlehookcyrillic\x00"), []byte("04A6\x00")}, {[]byte("Phi\x00"), []byte("03A6\x00")}, {[]byte("Phook\x00"), []byte("01A4\x00")}, {[]byte("Pi\x00"), []byte("03A0\x00")}, {[]byte("Piwrarmenian\x00"), []byte("0553\x00")}, {[]byte("Pmonospace\x00"), []byte("FF30\x00")}, {[]byte("Psi\x00"), []byte("03A8\x00")}, {[]byte("Psicyrillic\x00"), []byte("0470\x00")}, {[]byte("Psmall\x00"), []byte("F770\x00")}, {[]byte("Q\x00"), []byte("0051\x00")}, {[]byte("Qcircle\x00"), []byte("24C6\x00")}, {[]byte("Qmonospace\x00"), []byte("FF31\x00")}, {[]byte("Qsmall\x00"), []byte("F771\x00")}, {[]byte("R\x00"), []byte("0052\x00")}, {[]byte("Raarmenian\x00"), []byte("054C\x00")}, {[]byte("Racute\x00"), []byte("0154\x00")}, {[]byte("Rcaron\x00"), []byte("0158\x00")}, {[]byte("Rcedilla\x00"), []byte("0156\x00")}, {[]byte("Rcircle\x00"), []byte("24C7\x00")}, {[]byte("Rcommaaccent\x00"), []byte("0156\x00")}, {[]byte("Rdblgrave\x00"), []byte("0210\x00")}, {[]byte("Rdotaccent\x00"), []byte("1E58\x00")}, {[]byte("Rdotbelow\x00"), []byte("1E5A\x00")}, {[]byte("Rdotbelowmacron\x00"), []byte("1E5C\x00")}, {[]byte("Reharmenian\x00"), []byte("0550\x00")}, {[]byte("Rfraktur\x00"), []byte("211C\x00")}, {[]byte("Rho\x00"), []byte("03A1\x00")}, {[]byte("Ringsmall\x00"), []byte("F6FC\x00")}, {[]byte("Rinvertedbreve\x00"), []byte("0212\x00")}, {[]byte("Rlinebelow\x00"), []byte("1E5E\x00")}, {[]byte("Rmonospace\x00"), []byte("FF32\x00")}, {[]byte("Rsmall\x00"), []byte("F772\x00")}, {[]byte("Rsmallinverted\x00"), []byte("0281\x00")}, {[]byte("Rsmallinvertedsuperior\x00"), []byte("02B6\x00")}, {[]byte("S\x00"), []byte("0053\x00")}, {[]byte("SF010000\x00"), []byte("250C\x00")}, {[]byte("SF020000\x00"), []byte("2514\x00")}, {[]byte("SF030000\x00"), []byte("2510\x00")}, {[]byte("SF040000\x00"), []byte("2518\x00")}, {[]byte("SF050000\x00"), []byte("253C\x00")}, {[]byte("SF060000\x00"), []byte("252C\x00")}, {[]byte("SF070000\x00"), []byte("2534\x00")}, {[]byte("SF080000\x00"), []byte("251C\x00")}, {[]byte("SF090000\x00"), []byte("2524\x00")}, {[]byte("SF100000\x00"), []byte("2500\x00")}, {[]byte("SF110000\x00"), []byte("2502\x00")}, {[]byte("SF190000\x00"), []byte("2561\x00")}, {[]byte("SF200000\x00"), []byte("2562\x00")}, {[]byte("SF210000\x00"), []byte("2556\x00")}, {[]byte("SF220000\x00"), []byte("2555\x00")}, {[]byte("SF230000\x00"), []byte("2563\x00")}, {[]byte("SF240000\x00"), []byte("2551\x00")}, {[]byte("SF250000\x00"), []byte("2557\x00")}, {[]byte("SF260000\x00"), []byte("255D\x00")}, {[]byte("SF270000\x00"), []byte("255C\x00")}, {[]byte("SF280000\x00"), []byte("255B\x00")}, {[]byte("SF360000\x00"), []byte("255E\x00")}, {[]byte("SF370000\x00"), []byte("255F\x00")}, {[]byte("SF380000\x00"), []byte("255A\x00")}, {[]byte("SF390000\x00"), []byte("2554\x00")}, {[]byte("SF400000\x00"), []byte("2569\x00")}, {[]byte("SF410000\x00"), []byte("2566\x00")}, {[]byte("SF420000\x00"), []byte("2560\x00")}, {[]byte("SF430000\x00"), []byte("2550\x00")}, {[]byte("SF440000\x00"), []byte("256C\x00")}, {[]byte("SF450000\x00"), []byte("2567\x00")}, {[]byte("SF460000\x00"), []byte("2568\x00")}, {[]byte("SF470000\x00"), []byte("2564\x00")}, {[]byte("SF480000\x00"), []byte("2565\x00")}, {[]byte("SF490000\x00"), []byte("2559\x00")}, {[]byte("SF500000\x00"), []byte("2558\x00")}, {[]byte("SF510000\x00"), []byte("2552\x00")}, {[]byte("SF520000\x00"), []byte("2553\x00")}, {[]byte("SF530000\x00"), []byte("256B\x00")}, {[]byte("SF540000\x00"), []byte("256A\x00")}, {[]byte("Sacute\x00"), []byte("015A\x00")}, {[]byte("Sacutedotaccent\x00"), []byte("1E64\x00")}, {[]byte("Sampigreek\x00"), []byte("03E0\x00")}, {[]byte("Scaron\x00"), []byte("0160\x00")}, {[]byte("Scarondotaccent\x00"), []byte("1E66\x00")}, {[]byte("Scaronsmall\x00"), []byte("F6FD\x00")}, {[]byte("Scedilla\x00"), []byte("015E\x00")}, {[]byte("Schwa\x00"), []byte("018F\x00")}, {[]byte("Schwacyrillic\x00"), []byte("04D8\x00")}, {[]byte("Schwadieresiscyrillic\x00"), []byte("04DA\x00")}, {[]byte("Scircle\x00"), []byte("24C8\x00")}, {[]byte("Scircumflex\x00"), []byte("015C\x00")}, {[]byte("Scommaaccent\x00"), []byte("0218\x00")}, {[]byte("Sdotaccent\x00"), []byte("1E60\x00")}, {[]byte("Sdotbelow\x00"), []byte("1E62\x00")}, {[]byte("Sdotbelowdotaccent\x00"), []byte("1E68\x00")}, {[]byte("Seharmenian\x00"), []byte("054D\x00")}, {[]byte("Sevenroman\x00"), []byte("2166\x00")}, {[]byte("Shaarmenian\x00"), []byte("0547\x00")}, {[]byte("Shacyrillic\x00"), []byte("0428\x00")}, {[]byte("Shchacyrillic\x00"), []byte("0429\x00")}, {[]byte("Sheicoptic\x00"), []byte("03E2\x00")}, {[]byte("Shhacyrillic\x00"), []byte("04BA\x00")}, {[]byte("Shimacoptic\x00"), []byte("03EC\x00")}, {[]byte("Sigma\x00"), []byte("03A3\x00")}, {[]byte("Sixroman\x00"), []byte("2165\x00")}, {[]byte("Smonospace\x00"), []byte("FF33\x00")}, {[]byte("Softsigncyrillic\x00"), []byte("042C\x00")}, {[]byte("Ssmall\x00"), []byte("F773\x00")}, {[]byte("Stigmagreek\x00"), []byte("03DA\x00")}, {[]byte("T\x00"), []byte("0054\x00")}, {[]byte("Tau\x00"), []byte("03A4\x00")}, {[]byte("Tbar\x00"), []byte("0166\x00")}, {[]byte("Tcaron\x00"), []byte("0164\x00")}, {[]byte("Tcedilla\x00"), []byte("0162\x00")}, {[]byte("Tcircle\x00"), []byte("24C9\x00")}, {[]byte("Tcircumflexbelow\x00"), []byte("1E70\x00")}, {[]byte("Tcommaaccent\x00"), []byte("0162\x00")}, {[]byte("Tdotaccent\x00"), []byte("1E6A\x00")}, {[]byte("Tdotbelow\x00"), []byte("1E6C\x00")}, {[]byte("Tecyrillic\x00"), []byte("0422\x00")}, {[]byte("Tedescendercyrillic\x00"), []byte("04AC\x00")}, {[]byte("Tenroman\x00"), []byte("2169\x00")}, {[]byte("Tetsecyrillic\x00"), []byte("04B4\x00")}, {[]byte("Theta\x00"), []byte("0398\x00")}, {[]byte("Thook\x00"), []byte("01AC\x00")}, {[]byte("Thorn\x00"), []byte("00DE\x00")}, {[]byte("Thornsmall\x00"), []byte("F7FE\x00")}, {[]byte("Threeroman\x00"), []byte("2162\x00")}, {[]byte("Tildesmall\x00"), []byte("F6FE\x00")}, {[]byte("Tiwnarmenian\x00"), []byte("054F\x00")}, {[]byte("Tlinebelow\x00"), []byte("1E6E\x00")}, {[]byte("Tmonospace\x00"), []byte("FF34\x00")}, {[]byte("Toarmenian\x00"), []byte("0539\x00")}, {[]byte("Tonefive\x00"), []byte("01BC\x00")}, {[]byte("Tonesix\x00"), []byte("0184\x00")}, {[]byte("Tonetwo\x00"), []byte("01A7\x00")}, {[]byte("Tretroflexhook\x00"), []byte("01AE\x00")}, {[]byte("Tsecyrillic\x00"), []byte("0426\x00")}, {[]byte("Tshecyrillic\x00"), []byte("040B\x00")}, {[]byte("Tsmall\x00"), []byte("F774\x00")}, {[]byte("Twelveroman\x00"), []byte("216B\x00")}, {[]byte("Tworoman\x00"), []byte("2161\x00")}, {[]byte("U\x00"), []byte("0055\x00")}, {[]byte("Uacute\x00"), []byte("00DA\x00")}, {[]byte("Uacutesmall\x00"), []byte("F7FA\x00")}, {[]byte("Ubreve\x00"), []byte("016C\x00")}, {[]byte("Ucaron\x00"), []byte("01D3\x00")}, {[]byte("Ucircle\x00"), []byte("24CA\x00")}, {[]byte("Ucircumflex\x00"), []byte("00DB\x00")}, {[]byte("Ucircumflexbelow\x00"), []byte("1E76\x00")}, {[]byte("Ucircumflexsmall\x00"), []byte("F7FB\x00")}, {[]byte("Ucyrillic\x00"), []byte("0423\x00")}, {[]byte("Udblacute\x00"), []byte("0170\x00")}, {[]byte("Udblgrave\x00"), []byte("0214\x00")}, {[]byte("Udieresis\x00"), []byte("00DC\x00")}, {[]byte("Udieresisacute\x00"), []byte("01D7\x00")}, {[]byte("Udieresisbelow\x00"), []byte("1E72\x00")}, {[]byte("Udieresiscaron\x00"), []byte("01D9\x00")}, {[]byte("Udieresiscyrillic\x00"), []byte("04F0\x00")}, {[]byte("Udieresisgrave\x00"), []byte("01DB\x00")}, {[]byte("Udieresismacron\x00"), []byte("01D5\x00")}, {[]byte("Udieresissmall\x00"), []byte("F7FC\x00")}, {[]byte("Udotbelow\x00"), []byte("1EE4\x00")}, {[]byte("Ugrave\x00"), []byte("00D9\x00")}, {[]byte("Ugravesmall\x00"), []byte("F7F9\x00")}, {[]byte("Uhookabove\x00"), []byte("1EE6\x00")}, {[]byte("Uhorn\x00"), []byte("01AF\x00")}, {[]byte("Uhornacute\x00"), []byte("1EE8\x00")}, {[]byte("Uhorndotbelow\x00"), []byte("1EF0\x00")}, {[]byte("Uhorngrave\x00"), []byte("1EEA\x00")}, {[]byte("Uhornhookabove\x00"), []byte("1EEC\x00")}, {[]byte("Uhorntilde\x00"), []byte("1EEE\x00")}, {[]byte("Uhungarumlaut\x00"), []byte("0170\x00")}, {[]byte("Uhungarumlautcyrillic\x00"), []byte("04F2\x00")}, {[]byte("Uinvertedbreve\x00"), []byte("0216\x00")}, {[]byte("Ukcyrillic\x00"), []byte("0478\x00")}, {[]byte("Umacron\x00"), []byte("016A\x00")}, {[]byte("Umacroncyrillic\x00"), []byte("04EE\x00")}, {[]byte("Umacrondieresis\x00"), []byte("1E7A\x00")}, {[]byte("Umonospace\x00"), []byte("FF35\x00")}, {[]byte("Uogonek\x00"), []byte("0172\x00")}, {[]byte("Upsilon\x00"), []byte("03A5\x00")}, {[]byte("Upsilon1\x00"), []byte("03D2\x00")}, {[]byte("Upsilonacutehooksymbolgreek\x00"), []byte("03D3\x00")}, {[]byte("Upsilonafrican\x00"), []byte("01B1\x00")}, {[]byte("Upsilondieresis\x00"), []byte("03AB\x00")}, {[]byte("Upsilondieresishooksymbolgreek\x00"), []byte("03D4\x00")}, {[]byte("Upsilonhooksymbol\x00"), []byte("03D2\x00")}, {[]byte("Upsilontonos\x00"), []byte("038E\x00")}, {[]byte("Uring\x00"), []byte("016E\x00")}, {[]byte("Ushortcyrillic\x00"), []byte("040E\x00")}, {[]byte("Usmall\x00"), []byte("F775\x00")}, {[]byte("Ustraightcyrillic\x00"), []byte("04AE\x00")}, {[]byte("Ustraightstrokecyrillic\x00"), []byte("04B0\x00")}, {[]byte("Utilde\x00"), []byte("0168\x00")}, {[]byte("Utildeacute\x00"), []byte("1E78\x00")}, {[]byte("Utildebelow\x00"), []byte("1E74\x00")}, {[]byte("V\x00"), []byte("0056\x00")}, {[]byte("Vcircle\x00"), []byte("24CB\x00")}, {[]byte("Vdotbelow\x00"), []byte("1E7E\x00")}, {[]byte("Vecyrillic\x00"), []byte("0412\x00")}, {[]byte("Vewarmenian\x00"), []byte("054E\x00")}, {[]byte("Vhook\x00"), []byte("01B2\x00")}, {[]byte("Vmonospace\x00"), []byte("FF36\x00")}, {[]byte("Voarmenian\x00"), []byte("0548\x00")}, {[]byte("Vsmall\x00"), []byte("F776\x00")}, {[]byte("Vtilde\x00"), []byte("1E7C\x00")}, {[]byte("W\x00"), []byte("0057\x00")}, {[]byte("Wacute\x00"), []byte("1E82\x00")}, {[]byte("Wcircle\x00"), []byte("24CC\x00")}, {[]byte("Wcircumflex\x00"), []byte("0174\x00")}, {[]byte("Wdieresis\x00"), []byte("1E84\x00")}, {[]byte("Wdotaccent\x00"), []byte("1E86\x00")}, {[]byte("Wdotbelow\x00"), []byte("1E88\x00")}, {[]byte("Wgrave\x00"), []byte("1E80\x00")}, {[]byte("Wmonospace\x00"), []byte("FF37\x00")}, {[]byte("Wsmall\x00"), []byte("F777\x00")}, {[]byte("X\x00"), []byte("0058\x00")}, {[]byte("Xcircle\x00"), []byte("24CD\x00")}, {[]byte("Xdieresis\x00"), []byte("1E8C\x00")}, {[]byte("Xdotaccent\x00"), []byte("1E8A\x00")}, {[]byte("Xeharmenian\x00"), []byte("053D\x00")}, {[]byte("Xi\x00"), []byte("039E\x00")}, {[]byte("Xmonospace\x00"), []byte("FF38\x00")}, {[]byte("Xsmall\x00"), []byte("F778\x00")}, {[]byte("Y\x00"), []byte("0059\x00")}, {[]byte("Yacute\x00"), []byte("00DD\x00")}, {[]byte("Yacutesmall\x00"), []byte("F7FD\x00")}, {[]byte("Yatcyrillic\x00"), []byte("0462\x00")}, {[]byte("Ycircle\x00"), []byte("24CE\x00")}, {[]byte("Ycircumflex\x00"), []byte("0176\x00")}, {[]byte("Ydieresis\x00"), []byte("0178\x00")}, {[]byte("Ydieresissmall\x00"), []byte("F7FF\x00")}, {[]byte("Ydotaccent\x00"), []byte("1E8E\x00")}, {[]byte("Ydotbelow\x00"), []byte("1EF4\x00")}, {[]byte("Yericyrillic\x00"), []byte("042B\x00")}, {[]byte("Yerudieresiscyrillic\x00"), []byte("04F8\x00")}, {[]byte("Ygrave\x00"), []byte("1EF2\x00")}, {[]byte("Yhook\x00"), []byte("01B3\x00")}, {[]byte("Yhookabove\x00"), []byte("1EF6\x00")}, {[]byte("Yiarmenian\x00"), []byte("0545\x00")}, {[]byte("Yicyrillic\x00"), []byte("0407\x00")}, {[]byte("Yiwnarmenian\x00"), []byte("0552\x00")}, {[]byte("Ymonospace\x00"), []byte("FF39\x00")}, {[]byte("Ysmall\x00"), []byte("F779\x00")}, {[]byte("Ytilde\x00"), []byte("1EF8\x00")}, {[]byte("Yusbigcyrillic\x00"), []byte("046A\x00")}, {[]byte("Yusbigiotifiedcyrillic\x00"), []byte("046C\x00")}, {[]byte("Yuslittlecyrillic\x00"), []byte("0466\x00")}, {[]byte("Yuslittleiotifiedcyrillic\x00"), []byte("0468\x00")}, {[]byte("Z\x00"), []byte("005A\x00")}, {[]byte("Zaarmenian\x00"), []byte("0536\x00")}, {[]byte("Zacute\x00"), []byte("0179\x00")}, {[]byte("Zcaron\x00"), []byte("017D\x00")}, {[]byte("Zcaronsmall\x00"), []byte("F6FF\x00")}, {[]byte("Zcircle\x00"), []byte("24CF\x00")}, {[]byte("Zcircumflex\x00"), []byte("1E90\x00")}, {[]byte("Zdot\x00"), []byte("017B\x00")}, {[]byte("Zdotaccent\x00"), []byte("017B\x00")}, {[]byte("Zdotbelow\x00"), []byte("1E92\x00")}, {[]byte("Zecyrillic\x00"), []byte("0417\x00")}, {[]byte("Zedescendercyrillic\x00"), []byte("0498\x00")}, {[]byte("Zedieresiscyrillic\x00"), []byte("04DE\x00")}, {[]byte("Zeta\x00"), []byte("0396\x00")}, {[]byte("Zhearmenian\x00"), []byte("053A\x00")}, {[]byte("Zhebrevecyrillic\x00"), []byte("04C1\x00")}, {[]byte("Zhecyrillic\x00"), []byte("0416\x00")}, {[]byte("Zhedescendercyrillic\x00"), []byte("0496\x00")}, {[]byte("Zhedieresiscyrillic\x00"), []byte("04DC\x00")}, {[]byte("Zlinebelow\x00"), []byte("1E94\x00")}, {[]byte("Zmonospace\x00"), []byte("FF3A\x00")}, {[]byte("Zsmall\x00"), []byte("F77A\x00")}, {[]byte("Zstroke\x00"), []byte("01B5\x00")}, {[]byte("a\x00"), []byte("0061\x00")}, {[]byte("aabengali\x00"), []byte("0986\x00")}, {[]byte("aacute\x00"), []byte("00E1\x00")}, {[]byte("aadeva\x00"), []byte("0906\x00")}, {[]byte("aagujarati\x00"), []byte("0A86\x00")}, {[]byte("aagurmukhi\x00"), []byte("0A06\x00")}, {[]byte("aamatragurmukhi\x00"), []byte("0A3E\x00")}, {[]byte("aarusquare\x00"), []byte("3303\x00")}, {[]byte("aavowelsignbengali\x00"), []byte("09BE\x00")}, {[]byte("aavowelsigndeva\x00"), []byte("093E\x00")}, {[]byte("aavowelsigngujarati\x00"), []byte("0ABE\x00")}, {[]byte("abbreviationmarkarmenian\x00"), []byte("055F\x00")}, {[]byte("abbreviationsigndeva\x00"), []byte("0970\x00")}, {[]byte("abengali\x00"), []byte("0985\x00")}, {[]byte("abopomofo\x00"), []byte("311A\x00")}, {[]byte("abreve\x00"), []byte("0103\x00")}, {[]byte("abreveacute\x00"), []byte("1EAF\x00")}, {[]byte("abrevecyrillic\x00"), []byte("04D1\x00")}, {[]byte("abrevedotbelow\x00"), []byte("1EB7\x00")}, {[]byte("abrevegrave\x00"), []byte("1EB1\x00")}, {[]byte("abrevehookabove\x00"), []byte("1EB3\x00")}, {[]byte("abrevetilde\x00"), []byte("1EB5\x00")}, {[]byte("acaron\x00"), []byte("01CE\x00")}, {[]byte("acircle\x00"), []byte("24D0\x00")}, {[]byte("acircumflex\x00"), []byte("00E2\x00")}, {[]byte("acircumflexacute\x00"), []byte("1EA5\x00")}, {[]byte("acircumflexdotbelow\x00"), []byte("1EAD\x00")}, {[]byte("acircumflexgrave\x00"), []byte("1EA7\x00")}, {[]byte("acircumflexhookabove\x00"), []byte("1EA9\x00")}, {[]byte("acircumflextilde\x00"), []byte("1EAB\x00")}, {[]byte("acute\x00"), []byte("00B4\x00")}, {[]byte("acutebelowcmb\x00"), []byte("0317\x00")}, {[]byte("acutecmb\x00"), []byte("0301\x00")}, {[]byte("acutecomb\x00"), []byte("0301\x00")}, {[]byte("acutedeva\x00"), []byte("0954\x00")}, {[]byte("acutelowmod\x00"), []byte("02CF\x00")}, {[]byte("acutetonecmb\x00"), []byte("0341\x00")}, {[]byte("acyrillic\x00"), []byte("0430\x00")}, {[]byte("adblgrave\x00"), []byte("0201\x00")}, {[]byte("addakgurmukhi\x00"), []byte("0A71\x00")}, {[]byte("adeva\x00"), []byte("0905\x00")}, {[]byte("adieresis\x00"), []byte("00E4\x00")}, {[]byte("adieresiscyrillic\x00"), []byte("04D3\x00")}, {[]byte("adieresismacron\x00"), []byte("01DF\x00")}, {[]byte("adotbelow\x00"), []byte("1EA1\x00")}, {[]byte("adotmacron\x00"), []byte("01E1\x00")}, {[]byte("ae\x00"), []byte("00E6\x00")}, {[]byte("aeacute\x00"), []byte("01FD\x00")}, {[]byte("aekorean\x00"), []byte("3150\x00")}, {[]byte("aemacron\x00"), []byte("01E3\x00")}, {[]byte("afii00208\x00"), []byte("2015\x00")}, {[]byte("afii08941\x00"), []byte("20A4\x00")}, {[]byte("afii10017\x00"), []byte("0410\x00")}, {[]byte("afii10018\x00"), []byte("0411\x00")}, {[]byte("afii10019\x00"), []byte("0412\x00")}, {[]byte("afii10020\x00"), []byte("0413\x00")}, {[]byte("afii10021\x00"), []byte("0414\x00")}, {[]byte("afii10022\x00"), []byte("0415\x00")}, {[]byte("afii10023\x00"), []byte("0401\x00")}, {[]byte("afii10024\x00"), []byte("0416\x00")}, {[]byte("afii10025\x00"), []byte("0417\x00")}, {[]byte("afii10026\x00"), []byte("0418\x00")}, {[]byte("afii10027\x00"), []byte("0419\x00")}, {[]byte("afii10028\x00"), []byte("041A\x00")}, {[]byte("afii10029\x00"), []byte("041B\x00")}, {[]byte("afii10030\x00"), []byte("041C\x00")}, {[]byte("afii10031\x00"), []byte("041D\x00")}, {[]byte("afii10032\x00"), []byte("041E\x00")}, {[]byte("afii10033\x00"), []byte("041F\x00")}, {[]byte("afii10034\x00"), []byte("0420\x00")}, {[]byte("afii10035\x00"), []byte("0421\x00")}, {[]byte("afii10036\x00"), []byte("0422\x00")}, {[]byte("afii10037\x00"), []byte("0423\x00")}, {[]byte("afii10038\x00"), []byte("0424\x00")}, {[]byte("afii10039\x00"), []byte("0425\x00")}, {[]byte("afii10040\x00"), []byte("0426\x00")}, {[]byte("afii10041\x00"), []byte("0427\x00")}, {[]byte("afii10042\x00"), []byte("0428\x00")}, {[]byte("afii10043\x00"), []byte("0429\x00")}, {[]byte("afii10044\x00"), []byte("042A\x00")}, {[]byte("afii10045\x00"), []byte("042B\x00")}, {[]byte("afii10046\x00"), []byte("042C\x00")}, {[]byte("afii10047\x00"), []byte("042D\x00")}, {[]byte("afii10048\x00"), []byte("042E\x00")}, {[]byte("afii10049\x00"), []byte("042F\x00")}, {[]byte("afii10050\x00"), []byte("0490\x00")}, {[]byte("afii10051\x00"), []byte("0402\x00")}, {[]byte("afii10052\x00"), []byte("0403\x00")}, {[]byte("afii10053\x00"), []byte("0404\x00")}, {[]byte("afii10054\x00"), []byte("0405\x00")}, {[]byte("afii10055\x00"), []byte("0406\x00")}, {[]byte("afii10056\x00"), []byte("0407\x00")}, {[]byte("afii10057\x00"), []byte("0408\x00")}, {[]byte("afii10058\x00"), []byte("0409\x00")}, {[]byte("afii10059\x00"), []byte("040A\x00")}, {[]byte("afii10060\x00"), []byte("040B\x00")}, {[]byte("afii10061\x00"), []byte("040C\x00")}, {[]byte("afii10062\x00"), []byte("040E\x00")}, {[]byte("afii10063\x00"), []byte("F6C4\x00")}, {[]byte("afii10064\x00"), []byte("F6C5\x00")}, {[]byte("afii10065\x00"), []byte("0430\x00")}, {[]byte("afii10066\x00"), []byte("0431\x00")}, {[]byte("afii10067\x00"), []byte("0432\x00")}, {[]byte("afii10068\x00"), []byte("0433\x00")}, {[]byte("afii10069\x00"), []byte("0434\x00")}, {[]byte("afii10070\x00"), []byte("0435\x00")}, {[]byte("afii10071\x00"), []byte("0451\x00")}, {[]byte("afii10072\x00"), []byte("0436\x00")}, {[]byte("afii10073\x00"), []byte("0437\x00")}, {[]byte("afii10074\x00"), []byte("0438\x00")}, {[]byte("afii10075\x00"), []byte("0439\x00")}, {[]byte("afii10076\x00"), []byte("043A\x00")}, {[]byte("afii10077\x00"), []byte("043B\x00")}, {[]byte("afii10078\x00"), []byte("043C\x00")}, {[]byte("afii10079\x00"), []byte("043D\x00")}, {[]byte("afii10080\x00"), []byte("043E\x00")}, {[]byte("afii10081\x00"), []byte("043F\x00")}, {[]byte("afii10082\x00"), []byte("0440\x00")}, {[]byte("afii10083\x00"), []byte("0441\x00")}, {[]byte("afii10084\x00"), []byte("0442\x00")}, {[]byte("afii10085\x00"), []byte("0443\x00")}, {[]byte("afii10086\x00"), []byte("0444\x00")}, {[]byte("afii10087\x00"), []byte("0445\x00")}, {[]byte("afii10088\x00"), []byte("0446\x00")}, {[]byte("afii10089\x00"), []byte("0447\x00")}, {[]byte("afii10090\x00"), []byte("0448\x00")}, {[]byte("afii10091\x00"), []byte("0449\x00")}, {[]byte("afii10092\x00"), []byte("044A\x00")}, {[]byte("afii10093\x00"), []byte("044B\x00")}, {[]byte("afii10094\x00"), []byte("044C\x00")}, {[]byte("afii10095\x00"), []byte("044D\x00")}, {[]byte("afii10096\x00"), []byte("044E\x00")}, {[]byte("afii10097\x00"), []byte("044F\x00")}, {[]byte("afii10098\x00"), []byte("0491\x00")}, {[]byte("afii10099\x00"), []byte("0452\x00")}, {[]byte("afii10100\x00"), []byte("0453\x00")}, {[]byte("afii10101\x00"), []byte("0454\x00")}, {[]byte("afii10102\x00"), []byte("0455\x00")}, {[]byte("afii10103\x00"), []byte("0456\x00")}, {[]byte("afii10104\x00"), []byte("0457\x00")}, {[]byte("afii10105\x00"), []byte("0458\x00")}, {[]byte("afii10106\x00"), []byte("0459\x00")}, {[]byte("afii10107\x00"), []byte("045A\x00")}, {[]byte("afii10108\x00"), []byte("045B\x00")}, {[]byte("afii10109\x00"), []byte("045C\x00")}, {[]byte("afii10110\x00"), []byte("045E\x00")}, {[]byte("afii10145\x00"), []byte("040F\x00")}, {[]byte("afii10146\x00"), []byte("0462\x00")}, {[]byte("afii10147\x00"), []byte("0472\x00")}, {[]byte("afii10148\x00"), []byte("0474\x00")}, {[]byte("afii10192\x00"), []byte("F6C6\x00")}, {[]byte("afii10193\x00"), []byte("045F\x00")}, {[]byte("afii10194\x00"), []byte("0463\x00")}, {[]byte("afii10195\x00"), []byte("0473\x00")}, {[]byte("afii10196\x00"), []byte("0475\x00")}, {[]byte("afii10831\x00"), []byte("F6C7\x00")}, {[]byte("afii10832\x00"), []byte("F6C8\x00")}, {[]byte("afii10846\x00"), []byte("04D9\x00")}, {[]byte("afii299\x00"), []byte("200E\x00")}, {[]byte("afii300\x00"), []byte("200F\x00")}, {[]byte("afii301\x00"), []byte("200D\x00")}, {[]byte("afii57381\x00"), []byte("066A\x00")}, {[]byte("afii57388\x00"), []byte("060C\x00")}, {[]byte("afii57392\x00"), []byte("0660\x00")}, {[]byte("afii57393\x00"), []byte("0661\x00")}, {[]byte("afii57394\x00"), []byte("0662\x00")}, {[]byte("afii57395\x00"), []byte("0663\x00")}, {[]byte("afii57396\x00"), []byte("0664\x00")}, {[]byte("afii57397\x00"), []byte("0665\x00")}, {[]byte("afii57398\x00"), []byte("0666\x00")}, {[]byte("afii57399\x00"), []byte("0667\x00")}, {[]byte("afii57400\x00"), []byte("0668\x00")}, {[]byte("afii57401\x00"), []byte("0669\x00")}, {[]byte("afii57403\x00"), []byte("061B\x00")}, {[]byte("afii57407\x00"), []byte("061F\x00")}, {[]byte("afii57409\x00"), []byte("0621\x00")}, {[]byte("afii57410\x00"), []byte("0622\x00")}, {[]byte("afii57411\x00"), []byte("0623\x00")}, {[]byte("afii57412\x00"), []byte("0624\x00")}, {[]byte("afii57413\x00"), []byte("0625\x00")}, {[]byte("afii57414\x00"), []byte("0626\x00")}, {[]byte("afii57415\x00"), []byte("0627\x00")}, {[]byte("afii57416\x00"), []byte("0628\x00")}, {[]byte("afii57417\x00"), []byte("0629\x00")}, {[]byte("afii57418\x00"), []byte("062A\x00")}, {[]byte("afii57419\x00"), []byte("062B\x00")}, {[]byte("afii57420\x00"), []byte("062C\x00")}, {[]byte("afii57421\x00"), []byte("062D\x00")}, {[]byte("afii57422\x00"), []byte("062E\x00")}, {[]byte("afii57423\x00"), []byte("062F\x00")}, {[]byte("afii57424\x00"), []byte("0630\x00")}, {[]byte("afii57425\x00"), []byte("0631\x00")}, {[]byte("afii57426\x00"), []byte("0632\x00")}, {[]byte("afii57427\x00"), []byte("0633\x00")}, {[]byte("afii57428\x00"), []byte("0634\x00")}, {[]byte("afii57429\x00"), []byte("0635\x00")}, {[]byte("afii57430\x00"), []byte("0636\x00")}, {[]byte("afii57431\x00"), []byte("0637\x00")}, {[]byte("afii57432\x00"), []byte("0638\x00")}, {[]byte("afii57433\x00"), []byte("0639\x00")}, {[]byte("afii57434\x00"), []byte("063A\x00")}, {[]byte("afii57440\x00"), []byte("0640\x00")}, {[]byte("afii57441\x00"), []byte("0641\x00")}, {[]byte("afii57442\x00"), []byte("0642\x00")}, {[]byte("afii57443\x00"), []byte("0643\x00")}, {[]byte("afii57444\x00"), []byte("0644\x00")}, {[]byte("afii57445\x00"), []byte("0645\x00")}, {[]byte("afii57446\x00"), []byte("0646\x00")}, {[]byte("afii57448\x00"), []byte("0648\x00")}, {[]byte("afii57449\x00"), []byte("0649\x00")}, {[]byte("afii57450\x00"), []byte("064A\x00")}, {[]byte("afii57451\x00"), []byte("064B\x00")}, {[]byte("afii57452\x00"), []byte("064C\x00")}, {[]byte("afii57453\x00"), []byte("064D\x00")}, {[]byte("afii57454\x00"), []byte("064E\x00")}, {[]byte("afii57455\x00"), []byte("064F\x00")}, {[]byte("afii57456\x00"), []byte("0650\x00")}, {[]byte("afii57457\x00"), []byte("0651\x00")}, {[]byte("afii57458\x00"), []byte("0652\x00")}, {[]byte("afii57470\x00"), []byte("0647\x00")}, {[]byte("afii57505\x00"), []byte("06A4\x00")}, {[]byte("afii57506\x00"), []byte("067E\x00")}, {[]byte("afii57507\x00"), []byte("0686\x00")}, {[]byte("afii57508\x00"), []byte("0698\x00")}, {[]byte("afii57509\x00"), []byte("06AF\x00")}, {[]byte("afii57511\x00"), []byte("0679\x00")}, {[]byte("afii57512\x00"), []byte("0688\x00")}, {[]byte("afii57513\x00"), []byte("0691\x00")}, {[]byte("afii57514\x00"), []byte("06BA\x00")}, {[]byte("afii57519\x00"), []byte("06D2\x00")}, {[]byte("afii57534\x00"), []byte("06D5\x00")}, {[]byte("afii57636\x00"), []byte("20AA\x00")}, {[]byte("afii57645\x00"), []byte("05BE\x00")}, {[]byte("afii57658\x00"), []byte("05C3\x00")}, {[]byte("afii57664\x00"), []byte("05D0\x00")}, {[]byte("afii57665\x00"), []byte("05D1\x00")}, {[]byte("afii57666\x00"), []byte("05D2\x00")}, {[]byte("afii57667\x00"), []byte("05D3\x00")}, {[]byte("afii57668\x00"), []byte("05D4\x00")}, {[]byte("afii57669\x00"), []byte("05D5\x00")}, {[]byte("afii57670\x00"), []byte("05D6\x00")}, {[]byte("afii57671\x00"), []byte("05D7\x00")}, {[]byte("afii57672\x00"), []byte("05D8\x00")}, {[]byte("afii57673\x00"), []byte("05D9\x00")}, {[]byte("afii57674\x00"), []byte("05DA\x00")}, {[]byte("afii57675\x00"), []byte("05DB\x00")}, {[]byte("afii57676\x00"), []byte("05DC\x00")}, {[]byte("afii57677\x00"), []byte("05DD\x00")}, {[]byte("afii57678\x00"), []byte("05DE\x00")}, {[]byte("afii57679\x00"), []byte("05DF\x00")}, {[]byte("afii57680\x00"), []byte("05E0\x00")}, {[]byte("afii57681\x00"), []byte("05E1\x00")}, {[]byte("afii57682\x00"), []byte("05E2\x00")}, {[]byte("afii57683\x00"), []byte("05E3\x00")}, {[]byte("afii57684\x00"), []byte("05E4\x00")}, {[]byte("afii57685\x00"), []byte("05E5\x00")}, {[]byte("afii57686\x00"), []byte("05E6\x00")}, {[]byte("afii57687\x00"), []byte("05E7\x00")}, {[]byte("afii57688\x00"), []byte("05E8\x00")}, {[]byte("afii57689\x00"), []byte("05E9\x00")}, {[]byte("afii57690\x00"), []byte("05EA\x00")}, {[]byte("afii57694\x00"), []byte("FB2A\x00")}, {[]byte("afii57695\x00"), []byte("FB2B\x00")}, {[]byte("afii57700\x00"), []byte("FB4B\x00")}, {[]byte("afii57705\x00"), []byte("FB1F\x00")}, {[]byte("afii57716\x00"), []byte("05F0\x00")}, {[]byte("afii57717\x00"), []byte("05F1\x00")}, {[]byte("afii57718\x00"), []byte("05F2\x00")}, {[]byte("afii57723\x00"), []byte("FB35\x00")}, {[]byte("afii57793\x00"), []byte("05B4\x00")}, {[]byte("afii57794\x00"), []byte("05B5\x00")}, {[]byte("afii57795\x00"), []byte("05B6\x00")}, {[]byte("afii57796\x00"), []byte("05BB\x00")}, {[]byte("afii57797\x00"), []byte("05B8\x00")}, {[]byte("afii57798\x00"), []byte("05B7\x00")}, {[]byte("afii57799\x00"), []byte("05B0\x00")}, {[]byte("afii57800\x00"), []byte("05B2\x00")}, {[]byte("afii57801\x00"), []byte("05B1\x00")}, {[]byte("afii57802\x00"), []byte("05B3\x00")}, {[]byte("afii57803\x00"), []byte("05C2\x00")}, {[]byte("afii57804\x00"), []byte("05C1\x00")}, {[]byte("afii57806\x00"), []byte("05B9\x00")}, {[]byte("afii57807\x00"), []byte("05BC\x00")}, {[]byte("afii57839\x00"), []byte("05BD\x00")}, {[]byte("afii57841\x00"), []byte("05BF\x00")}, {[]byte("afii57842\x00"), []byte("05C0\x00")}, {[]byte("afii57929\x00"), []byte("02BC\x00")}, {[]byte("afii61248\x00"), []byte("2105\x00")}, {[]byte("afii61289\x00"), []byte("2113\x00")}, {[]byte("afii61352\x00"), []byte("2116\x00")}, {[]byte("afii61573\x00"), []byte("202C\x00")}, {[]byte("afii61574\x00"), []byte("202D\x00")}, {[]byte("afii61575\x00"), []byte("202E\x00")}, {[]byte("afii61664\x00"), []byte("200C\x00")}, {[]byte("afii63167\x00"), []byte("066D\x00")}, {[]byte("afii64937\x00"), []byte("02BD\x00")}, {[]byte("agrave\x00"), []byte("00E0\x00")}, {[]byte("agujarati\x00"), []byte("0A85\x00")}, {[]byte("agurmukhi\x00"), []byte("0A05\x00")}, {[]byte("ahiragana\x00"), []byte("3042\x00")}, {[]byte("ahookabove\x00"), []byte("1EA3\x00")}, {[]byte("aibengali\x00"), []byte("0990\x00")}, {[]byte("aibopomofo\x00"), []byte("311E\x00")}, {[]byte("aideva\x00"), []byte("0910\x00")}, {[]byte("aiecyrillic\x00"), []byte("04D5\x00")}, {[]byte("aigujarati\x00"), []byte("0A90\x00")}, {[]byte("aigurmukhi\x00"), []byte("0A10\x00")}, {[]byte("aimatragurmukhi\x00"), []byte("0A48\x00")}, {[]byte("ainarabic\x00"), []byte("0639\x00")}, {[]byte("ainfinalarabic\x00"), []byte("FECA\x00")}, {[]byte("aininitialarabic\x00"), []byte("FECB\x00")}, {[]byte("ainmedialarabic\x00"), []byte("FECC\x00")}, {[]byte("ainvertedbreve\x00"), []byte("0203\x00")}, {[]byte("aivowelsignbengali\x00"), []byte("09C8\x00")}, {[]byte("aivowelsigndeva\x00"), []byte("0948\x00")}, {[]byte("aivowelsigngujarati\x00"), []byte("0AC8\x00")}, {[]byte("akatakana\x00"), []byte("30A2\x00")}, {[]byte("akatakanahalfwidth\x00"), []byte("FF71\x00")}, {[]byte("akorean\x00"), []byte("314F\x00")}, {[]byte("alef\x00"), []byte("05D0\x00")}, {[]byte("alefarabic\x00"), []byte("0627\x00")}, {[]byte("alefdageshhebrew\x00"), []byte("FB30\x00")}, {[]byte("aleffinalarabic\x00"), []byte("FE8E\x00")}, {[]byte("alefhamzaabovearabic\x00"), []byte("0623\x00")}, {[]byte("alefhamzaabovefinalarabic\x00"), []byte("FE84\x00")}, {[]byte("alefhamzabelowarabic\x00"), []byte("0625\x00")}, {[]byte("alefhamzabelowfinalarabic\x00"), []byte("FE88\x00")}, {[]byte("alefhebrew\x00"), []byte("05D0\x00")}, {[]byte("aleflamedhebrew\x00"), []byte("FB4F\x00")}, {[]byte("alefmaddaabovearabic\x00"), []byte("0622\x00")}, {[]byte("alefmaddaabovefinalarabic\x00"), []byte("FE82\x00")}, {[]byte("alefmaksuraarabic\x00"), []byte("0649\x00")}, {[]byte("alefmaksurafinalarabic\x00"), []byte("FEF0\x00")}, {[]byte("alefmaksurainitialarabic\x00"), []byte("FEF3\x00")}, {[]byte("alefmaksuramedialarabic\x00"), []byte("FEF4\x00")}, {[]byte("alefpatahhebrew\x00"), []byte("FB2E\x00")}, {[]byte("alefqamatshebrew\x00"), []byte("FB2F\x00")}, {[]byte("aleph\x00"), []byte("2135\x00")}, {[]byte("allequal\x00"), []byte("224C\x00")}, {[]byte("alpha\x00"), []byte("03B1\x00")}, {[]byte("alphatonos\x00"), []byte("03AC\x00")}, {[]byte("amacron\x00"), []byte("0101\x00")}, {[]byte("amonospace\x00"), []byte("FF41\x00")}, {[]byte("ampersand\x00"), []byte("0026\x00")}, {[]byte("ampersandmonospace\x00"), []byte("FF06\x00")}, {[]byte("ampersandsmall\x00"), []byte("F726\x00")}, {[]byte("amsquare\x00"), []byte("33C2\x00")}, {[]byte("anbopomofo\x00"), []byte("3122\x00")}, {[]byte("angbopomofo\x00"), []byte("3124\x00")}, {[]byte("angkhankhuthai\x00"), []byte("0E5A\x00")}, {[]byte("angle\x00"), []byte("2220\x00")}, {[]byte("anglebracketleft\x00"), []byte("3008\x00")}, {[]byte("anglebracketleftvertical\x00"), []byte("FE3F\x00")}, {[]byte("anglebracketright\x00"), []byte("3009\x00")}, {[]byte("anglebracketrightvertical\x00"), []byte("FE40\x00")}, {[]byte("angleleft\x00"), []byte("2329\x00")}, {[]byte("angleright\x00"), []byte("232A\x00")}, {[]byte("angstrom\x00"), []byte("212B\x00")}, {[]byte("anoteleia\x00"), []byte("0387\x00")}, {[]byte("anudattadeva\x00"), []byte("0952\x00")}, {[]byte("anusvarabengali\x00"), []byte("0982\x00")}, {[]byte("anusvaradeva\x00"), []byte("0902\x00")}, {[]byte("anusvaragujarati\x00"), []byte("0A82\x00")}, {[]byte("aogonek\x00"), []byte("0105\x00")}, {[]byte("apaatosquare\x00"), []byte("3300\x00")}, {[]byte("aparen\x00"), []byte("249C\x00")}, {[]byte("apostrophearmenian\x00"), []byte("055A\x00")}, {[]byte("apostrophemod\x00"), []byte("02BC\x00")}, {[]byte("apple\x00"), []byte("F8FF\x00")}, {[]byte("approaches\x00"), []byte("2250\x00")}, {[]byte("approxequal\x00"), []byte("2248\x00")}, {[]byte("approxequalorimage\x00"), []byte("2252\x00")}, {[]byte("approximatelyequal\x00"), []byte("2245\x00")}, {[]byte("araeaekorean\x00"), []byte("318E\x00")}, {[]byte("araeakorean\x00"), []byte("318D\x00")}, {[]byte("arc\x00"), []byte("2312\x00")}, {[]byte("arighthalfring\x00"), []byte("1E9A\x00")}, {[]byte("aring\x00"), []byte("00E5\x00")}, {[]byte("aringacute\x00"), []byte("01FB\x00")}, {[]byte("aringbelow\x00"), []byte("1E01\x00")}, {[]byte("arrowboth\x00"), []byte("2194\x00")}, {[]byte("arrowdashdown\x00"), []byte("21E3\x00")}, {[]byte("arrowdashleft\x00"), []byte("21E0\x00")}, {[]byte("arrowdashright\x00"), []byte("21E2\x00")}, {[]byte("arrowdashup\x00"), []byte("21E1\x00")}, {[]byte("arrowdblboth\x00"), []byte("21D4\x00")}, {[]byte("arrowdbldown\x00"), []byte("21D3\x00")}, {[]byte("arrowdblleft\x00"), []byte("21D0\x00")}, {[]byte("arrowdblright\x00"), []byte("21D2\x00")}, {[]byte("arrowdblup\x00"), []byte("21D1\x00")}, {[]byte("arrowdown\x00"), []byte("2193\x00")}, {[]byte("arrowdownleft\x00"), []byte("2199\x00")}, {[]byte("arrowdownright\x00"), []byte("2198\x00")}, {[]byte("arrowdownwhite\x00"), []byte("21E9\x00")}, {[]byte("arrowheaddownmod\x00"), []byte("02C5\x00")}, {[]byte("arrowheadleftmod\x00"), []byte("02C2\x00")}, {[]byte("arrowheadrightmod\x00"), []byte("02C3\x00")}, {[]byte("arrowheadupmod\x00"), []byte("02C4\x00")}, {[]byte("arrowhorizex\x00"), []byte("F8E7\x00")}, {[]byte("arrowleft\x00"), []byte("2190\x00")}, {[]byte("arrowleftdbl\x00"), []byte("21D0\x00")}, {[]byte("arrowleftdblstroke\x00"), []byte("21CD\x00")}, {[]byte("arrowleftoverright\x00"), []byte("21C6\x00")}, {[]byte("arrowleftwhite\x00"), []byte("21E6\x00")}, {[]byte("arrowright\x00"), []byte("2192\x00")}, {[]byte("arrowrightdblstroke\x00"), []byte("21CF\x00")}, {[]byte("arrowrightheavy\x00"), []byte("279E\x00")}, {[]byte("arrowrightoverleft\x00"), []byte("21C4\x00")}, {[]byte("arrowrightwhite\x00"), []byte("21E8\x00")}, {[]byte("arrowtableft\x00"), []byte("21E4\x00")}, {[]byte("arrowtabright\x00"), []byte("21E5\x00")}, {[]byte("arrowup\x00"), []byte("2191\x00")}, {[]byte("arrowupdn\x00"), []byte("2195\x00")}, {[]byte("arrowupdnbse\x00"), []byte("21A8\x00")}, {[]byte("arrowupdownbase\x00"), []byte("21A8\x00")}, {[]byte("arrowupleft\x00"), []byte("2196\x00")}, {[]byte("arrowupleftofdown\x00"), []byte("21C5\x00")}, {[]byte("arrowupright\x00"), []byte("2197\x00")}, {[]byte("arrowupwhite\x00"), []byte("21E7\x00")}, {[]byte("arrowvertex\x00"), []byte("F8E6\x00")}, {[]byte("asciicircum\x00"), []byte("005E\x00")}, {[]byte("asciicircummonospace\x00"), []byte("FF3E\x00")}, {[]byte("asciitilde\x00"), []byte("007E\x00")}, {[]byte("asciitildemonospace\x00"), []byte("FF5E\x00")}, {[]byte("ascript\x00"), []byte("0251\x00")}, {[]byte("ascriptturned\x00"), []byte("0252\x00")}, {[]byte("asmallhiragana\x00"), []byte("3041\x00")}, {[]byte("asmallkatakana\x00"), []byte("30A1\x00")}, {[]byte("asmallkatakanahalfwidth\x00"), []byte("FF67\x00")}, {[]byte("asterisk\x00"), []byte("002A\x00")}, {[]byte("asteriskaltonearabic\x00"), []byte("066D\x00")}, {[]byte("asteriskarabic\x00"), []byte("066D\x00")}, {[]byte("asteriskmath\x00"), []byte("2217\x00")}, {[]byte("asteriskmonospace\x00"), []byte("FF0A\x00")}, {[]byte("asterisksmall\x00"), []byte("FE61\x00")}, {[]byte("asterism\x00"), []byte("2042\x00")}, {[]byte("asuperior\x00"), []byte("F6E9\x00")}, {[]byte("asymptoticallyequal\x00"), []byte("2243\x00")}, {[]byte("at\x00"), []byte("0040\x00")}, {[]byte("atilde\x00"), []byte("00E3\x00")}, {[]byte("atmonospace\x00"), []byte("FF20\x00")}, {[]byte("atsmall\x00"), []byte("FE6B\x00")}, {[]byte("aturned\x00"), []byte("0250\x00")}, {[]byte("aubengali\x00"), []byte("0994\x00")}, {[]byte("aubopomofo\x00"), []byte("3120\x00")}, {[]byte("audeva\x00"), []byte("0914\x00")}, {[]byte("augujarati\x00"), []byte("0A94\x00")}, {[]byte("augurmukhi\x00"), []byte("0A14\x00")}, {[]byte("aulengthmarkbengali\x00"), []byte("09D7\x00")}, {[]byte("aumatragurmukhi\x00"), []byte("0A4C\x00")}, {[]byte("auvowelsignbengali\x00"), []byte("09CC\x00")}, {[]byte("auvowelsigndeva\x00"), []byte("094C\x00")}, {[]byte("auvowelsigngujarati\x00"), []byte("0ACC\x00")}, {[]byte("avagrahadeva\x00"), []byte("093D\x00")}, {[]byte("aybarmenian\x00"), []byte("0561\x00")}, {[]byte("ayin\x00"), []byte("05E2\x00")}, {[]byte("ayinaltonehebrew\x00"), []byte("FB20\x00")}, {[]byte("ayinhebrew\x00"), []byte("05E2\x00")}, {[]byte("b\x00"), []byte("0062\x00")}, {[]byte("babengali\x00"), []byte("09AC\x00")}, {[]byte("backslash\x00"), []byte("005C\x00")}, {[]byte("backslashmonospace\x00"), []byte("FF3C\x00")}, {[]byte("badeva\x00"), []byte("092C\x00")}, {[]byte("bagujarati\x00"), []byte("0AAC\x00")}, {[]byte("bagurmukhi\x00"), []byte("0A2C\x00")}, {[]byte("bahiragana\x00"), []byte("3070\x00")}, {[]byte("bahtthai\x00"), []byte("0E3F\x00")}, {[]byte("bakatakana\x00"), []byte("30D0\x00")}, {[]byte("bar\x00"), []byte("007C\x00")}, {[]byte("barmonospace\x00"), []byte("FF5C\x00")}, {[]byte("bbopomofo\x00"), []byte("3105\x00")}, {[]byte("bcircle\x00"), []byte("24D1\x00")}, {[]byte("bdotaccent\x00"), []byte("1E03\x00")}, {[]byte("bdotbelow\x00"), []byte("1E05\x00")}, {[]byte("beamedsixteenthnotes\x00"), []byte("266C\x00")}, {[]byte("because\x00"), []byte("2235\x00")}, {[]byte("becyrillic\x00"), []byte("0431\x00")}, {[]byte("beharabic\x00"), []byte("0628\x00")}, {[]byte("behfinalarabic\x00"), []byte("FE90\x00")}, {[]byte("behinitialarabic\x00"), []byte("FE91\x00")}, {[]byte("behiragana\x00"), []byte("3079\x00")}, {[]byte("behmedialarabic\x00"), []byte("FE92\x00")}, {[]byte("behmeeminitialarabic\x00"), []byte("FC9F\x00")}, {[]byte("behmeemisolatedarabic\x00"), []byte("FC08\x00")}, {[]byte("behnoonfinalarabic\x00"), []byte("FC6D\x00")}, {[]byte("bekatakana\x00"), []byte("30D9\x00")}, {[]byte("benarmenian\x00"), []byte("0562\x00")}, {[]byte("bet\x00"), []byte("05D1\x00")}, {[]byte("beta\x00"), []byte("03B2\x00")}, {[]byte("betasymbolgreek\x00"), []byte("03D0\x00")}, {[]byte("betdagesh\x00"), []byte("FB31\x00")}, {[]byte("betdageshhebrew\x00"), []byte("FB31\x00")}, {[]byte("bethebrew\x00"), []byte("05D1\x00")}, {[]byte("betrafehebrew\x00"), []byte("FB4C\x00")}, {[]byte("bhabengali\x00"), []byte("09AD\x00")}, {[]byte("bhadeva\x00"), []byte("092D\x00")}, {[]byte("bhagujarati\x00"), []byte("0AAD\x00")}, {[]byte("bhagurmukhi\x00"), []byte("0A2D\x00")}, {[]byte("bhook\x00"), []byte("0253\x00")}, {[]byte("bihiragana\x00"), []byte("3073\x00")}, {[]byte("bikatakana\x00"), []byte("30D3\x00")}, {[]byte("bilabialclick\x00"), []byte("0298\x00")}, {[]byte("bindigurmukhi\x00"), []byte("0A02\x00")}, {[]byte("birusquare\x00"), []byte("3331\x00")}, {[]byte("blackcircle\x00"), []byte("25CF\x00")}, {[]byte("blackdiamond\x00"), []byte("25C6\x00")}, {[]byte("blackdownpointingtriangle\x00"), []byte("25BC\x00")}, {[]byte("blackleftpointingpointer\x00"), []byte("25C4\x00")}, {[]byte("blackleftpointingtriangle\x00"), []byte("25C0\x00")}, {[]byte("blacklenticularbracketleft\x00"), []byte("3010\x00")}, {[]byte("blacklenticularbracketleftvertical\x00"), []byte("FE3B\x00")}, {[]byte("blacklenticularbracketright\x00"), []byte("3011\x00")}, {[]byte("blacklenticularbracketrightvertical\x00"), []byte("FE3C\x00")}, {[]byte("blacklowerlefttriangle\x00"), []byte("25E3\x00")}, {[]byte("blacklowerrighttriangle\x00"), []byte("25E2\x00")}, {[]byte("blackrectangle\x00"), []byte("25AC\x00")}, {[]byte("blackrightpointingpointer\x00"), []byte("25BA\x00")}, {[]byte("blackrightpointingtriangle\x00"), []byte("25B6\x00")}, {[]byte("blacksmallsquare\x00"), []byte("25AA\x00")}, {[]byte("blacksmilingface\x00"), []byte("263B\x00")}, {[]byte("blacksquare\x00"), []byte("25A0\x00")}, {[]byte("blackstar\x00"), []byte("2605\x00")}, {[]byte("blackupperlefttriangle\x00"), []byte("25E4\x00")}, {[]byte("blackupperrighttriangle\x00"), []byte("25E5\x00")}, {[]byte("blackuppointingsmalltriangle\x00"), []byte("25B4\x00")}, {[]byte("blackuppointingtriangle\x00"), []byte("25B2\x00")}, {[]byte("blank\x00"), []byte("2423\x00")}, {[]byte("blinebelow\x00"), []byte("1E07\x00")}, {[]byte("block\x00"), []byte("2588\x00")}, {[]byte("bmonospace\x00"), []byte("FF42\x00")}, {[]byte("bobaimaithai\x00"), []byte("0E1A\x00")}, {[]byte("bohiragana\x00"), []byte("307C\x00")}, {[]byte("bokatakana\x00"), []byte("30DC\x00")}, {[]byte("bparen\x00"), []byte("249D\x00")}, {[]byte("bqsquare\x00"), []byte("33C3\x00")}, {[]byte("braceex\x00"), []byte("F8F4\x00")}, {[]byte("braceleft\x00"), []byte("007B\x00")}, {[]byte("braceleftbt\x00"), []byte("F8F3\x00")}, {[]byte("braceleftmid\x00"), []byte("F8F2\x00")}, {[]byte("braceleftmonospace\x00"), []byte("FF5B\x00")}, {[]byte("braceleftsmall\x00"), []byte("FE5B\x00")}, {[]byte("bracelefttp\x00"), []byte("F8F1\x00")}, {[]byte("braceleftvertical\x00"), []byte("FE37\x00")}, {[]byte("braceright\x00"), []byte("007D\x00")}, {[]byte("bracerightbt\x00"), []byte("F8FE\x00")}, {[]byte("bracerightmid\x00"), []byte("F8FD\x00")}, {[]byte("bracerightmonospace\x00"), []byte("FF5D\x00")}, {[]byte("bracerightsmall\x00"), []byte("FE5C\x00")}, {[]byte("bracerighttp\x00"), []byte("F8FC\x00")}, {[]byte("bracerightvertical\x00"), []byte("FE38\x00")}, {[]byte("bracketleft\x00"), []byte("005B\x00")}, {[]byte("bracketleftbt\x00"), []byte("F8F0\x00")}, {[]byte("bracketleftex\x00"), []byte("F8EF\x00")}, {[]byte("bracketleftmonospace\x00"), []byte("FF3B\x00")}, {[]byte("bracketlefttp\x00"), []byte("F8EE\x00")}, {[]byte("bracketright\x00"), []byte("005D\x00")}, {[]byte("bracketrightbt\x00"), []byte("F8FB\x00")}, {[]byte("bracketrightex\x00"), []byte("F8FA\x00")}, {[]byte("bracketrightmonospace\x00"), []byte("FF3D\x00")}, {[]byte("bracketrighttp\x00"), []byte("F8F9\x00")}, {[]byte("breve\x00"), []byte("02D8\x00")}, {[]byte("brevebelowcmb\x00"), []byte("032E\x00")}, {[]byte("brevecmb\x00"), []byte("0306\x00")}, {[]byte("breveinvertedbelowcmb\x00"), []byte("032F\x00")}, {[]byte("breveinvertedcmb\x00"), []byte("0311\x00")}, {[]byte("breveinverteddoublecmb\x00"), []byte("0361\x00")}, {[]byte("bridgebelowcmb\x00"), []byte("032A\x00")}, {[]byte("bridgeinvertedbelowcmb\x00"), []byte("033A\x00")}, {[]byte("brokenbar\x00"), []byte("00A6\x00")}, {[]byte("bstroke\x00"), []byte("0180\x00")}, {[]byte("bsuperior\x00"), []byte("F6EA\x00")}, {[]byte("btopbar\x00"), []byte("0183\x00")}, {[]byte("buhiragana\x00"), []byte("3076\x00")}, {[]byte("bukatakana\x00"), []byte("30D6\x00")}, {[]byte("bullet\x00"), []byte("2022\x00")}, {[]byte("bulletinverse\x00"), []byte("25D8\x00")}, {[]byte("bulletoperator\x00"), []byte("2219\x00")}, {[]byte("bullseye\x00"), []byte("25CE\x00")}, {[]byte("c\x00"), []byte("0063\x00")}, {[]byte("caarmenian\x00"), []byte("056E\x00")}, {[]byte("cabengali\x00"), []byte("099A\x00")}, {[]byte("cacute\x00"), []byte("0107\x00")}, {[]byte("cadeva\x00"), []byte("091A\x00")}, {[]byte("cagujarati\x00"), []byte("0A9A\x00")}, {[]byte("cagurmukhi\x00"), []byte("0A1A\x00")}, {[]byte("calsquare\x00"), []byte("3388\x00")}, {[]byte("candrabindubengali\x00"), []byte("0981\x00")}, {[]byte("candrabinducmb\x00"), []byte("0310\x00")}, {[]byte("candrabindudeva\x00"), []byte("0901\x00")}, {[]byte("candrabindugujarati\x00"), []byte("0A81\x00")}, {[]byte("capslock\x00"), []byte("21EA\x00")}, {[]byte("careof\x00"), []byte("2105\x00")}, {[]byte("caron\x00"), []byte("02C7\x00")}, {[]byte("caronbelowcmb\x00"), []byte("032C\x00")}, {[]byte("caroncmb\x00"), []byte("030C\x00")}, {[]byte("carriagereturn\x00"), []byte("21B5\x00")}, {[]byte("cbopomofo\x00"), []byte("3118\x00")}, {[]byte("ccaron\x00"), []byte("010D\x00")}, {[]byte("ccedilla\x00"), []byte("00E7\x00")}, {[]byte("ccedillaacute\x00"), []byte("1E09\x00")}, {[]byte("ccircle\x00"), []byte("24D2\x00")}, {[]byte("ccircumflex\x00"), []byte("0109\x00")}, {[]byte("ccurl\x00"), []byte("0255\x00")}, {[]byte("cdot\x00"), []byte("010B\x00")}, {[]byte("cdotaccent\x00"), []byte("010B\x00")}, {[]byte("cdsquare\x00"), []byte("33C5\x00")}, {[]byte("cedilla\x00"), []byte("00B8\x00")}, {[]byte("cedillacmb\x00"), []byte("0327\x00")}, {[]byte("cent\x00"), []byte("00A2\x00")}, {[]byte("centigrade\x00"), []byte("2103\x00")}, {[]byte("centinferior\x00"), []byte("F6DF\x00")}, {[]byte("centmonospace\x00"), []byte("FFE0\x00")}, {[]byte("centoldstyle\x00"), []byte("F7A2\x00")}, {[]byte("centsuperior\x00"), []byte("F6E0\x00")}, {[]byte("chaarmenian\x00"), []byte("0579\x00")}, {[]byte("chabengali\x00"), []byte("099B\x00")}, {[]byte("chadeva\x00"), []byte("091B\x00")}, {[]byte("chagujarati\x00"), []byte("0A9B\x00")}, {[]byte("chagurmukhi\x00"), []byte("0A1B\x00")}, {[]byte("chbopomofo\x00"), []byte("3114\x00")}, {[]byte("cheabkhasiancyrillic\x00"), []byte("04BD\x00")}, {[]byte("checkmark\x00"), []byte("2713\x00")}, {[]byte("checyrillic\x00"), []byte("0447\x00")}, {[]byte("chedescenderabkhasiancyrillic\x00"), []byte("04BF\x00")}, {[]byte("chedescendercyrillic\x00"), []byte("04B7\x00")}, {[]byte("chedieresiscyrillic\x00"), []byte("04F5\x00")}, {[]byte("cheharmenian\x00"), []byte("0573\x00")}, {[]byte("chekhakassiancyrillic\x00"), []byte("04CC\x00")}, {[]byte("cheverticalstrokecyrillic\x00"), []byte("04B9\x00")}, {[]byte("chi\x00"), []byte("03C7\x00")}, {[]byte("chieuchacirclekorean\x00"), []byte("3277\x00")}, {[]byte("chieuchaparenkorean\x00"), []byte("3217\x00")}, {[]byte("chieuchcirclekorean\x00"), []byte("3269\x00")}, {[]byte("chieuchkorean\x00"), []byte("314A\x00")}, {[]byte("chieuchparenkorean\x00"), []byte("3209\x00")}, {[]byte("chochangthai\x00"), []byte("0E0A\x00")}, {[]byte("chochanthai\x00"), []byte("0E08\x00")}, {[]byte("chochingthai\x00"), []byte("0E09\x00")}, {[]byte("chochoethai\x00"), []byte("0E0C\x00")}, {[]byte("chook\x00"), []byte("0188\x00")}, {[]byte("cieucacirclekorean\x00"), []byte("3276\x00")}, {[]byte("cieucaparenkorean\x00"), []byte("3216\x00")}, {[]byte("cieuccirclekorean\x00"), []byte("3268\x00")}, {[]byte("cieuckorean\x00"), []byte("3148\x00")}, {[]byte("cieucparenkorean\x00"), []byte("3208\x00")}, {[]byte("cieucuparenkorean\x00"), []byte("321C\x00")}, {[]byte("circle\x00"), []byte("25CB\x00")}, {[]byte("circlemultiply\x00"), []byte("2297\x00")}, {[]byte("circleot\x00"), []byte("2299\x00")}, {[]byte("circleplus\x00"), []byte("2295\x00")}, {[]byte("circlepostalmark\x00"), []byte("3036\x00")}, {[]byte("circlewithlefthalfblack\x00"), []byte("25D0\x00")}, {[]byte("circlewithrighthalfblack\x00"), []byte("25D1\x00")}, {[]byte("circumflex\x00"), []byte("02C6\x00")}, {[]byte("circumflexbelowcmb\x00"), []byte("032D\x00")}, {[]byte("circumflexcmb\x00"), []byte("0302\x00")}, {[]byte("clear\x00"), []byte("2327\x00")}, {[]byte("clickalveolar\x00"), []byte("01C2\x00")}, {[]byte("clickdental\x00"), []byte("01C0\x00")}, {[]byte("clicklateral\x00"), []byte("01C1\x00")}, {[]byte("clickretroflex\x00"), []byte("01C3\x00")}, {[]byte("club\x00"), []byte("2663\x00")}, {[]byte("clubsuitblack\x00"), []byte("2663\x00")}, {[]byte("clubsuitwhite\x00"), []byte("2667\x00")}, {[]byte("cmcubedsquare\x00"), []byte("33A4\x00")}, {[]byte("cmonospace\x00"), []byte("FF43\x00")}, {[]byte("cmsquaredsquare\x00"), []byte("33A0\x00")}, {[]byte("coarmenian\x00"), []byte("0581\x00")}, {[]byte("colon\x00"), []byte("003A\x00")}, {[]byte("colonmonetary\x00"), []byte("20A1\x00")}, {[]byte("colonmonospace\x00"), []byte("FF1A\x00")}, {[]byte("colonsign\x00"), []byte("20A1\x00")}, {[]byte("colonsmall\x00"), []byte("FE55\x00")}, {[]byte("colontriangularhalfmod\x00"), []byte("02D1\x00")}, {[]byte("colontriangularmod\x00"), []byte("02D0\x00")}, {[]byte("comma\x00"), []byte("002C\x00")}, {[]byte("commaabovecmb\x00"), []byte("0313\x00")}, {[]byte("commaaboverightcmb\x00"), []byte("0315\x00")}, {[]byte("commaaccent\x00"), []byte("F6C3\x00")}, {[]byte("commaarabic\x00"), []byte("060C\x00")}, {[]byte("commaarmenian\x00"), []byte("055D\x00")}, {[]byte("commainferior\x00"), []byte("F6E1\x00")}, {[]byte("commamonospace\x00"), []byte("FF0C\x00")}, {[]byte("commareversedabovecmb\x00"), []byte("0314\x00")}, {[]byte("commareversedmod\x00"), []byte("02BD\x00")}, {[]byte("commasmall\x00"), []byte("FE50\x00")}, {[]byte("commasuperior\x00"), []byte("F6E2\x00")}, {[]byte("commaturnedabovecmb\x00"), []byte("0312\x00")}, {[]byte("commaturnedmod\x00"), []byte("02BB\x00")}, {[]byte("compass\x00"), []byte("263C\x00")}, {[]byte("congruent\x00"), []byte("2245\x00")}, {[]byte("contourintegral\x00"), []byte("222E\x00")}, {[]byte("control\x00"), []byte("2303\x00")}, {[]byte("controlACK\x00"), []byte("0006\x00")}, {[]byte("controlBEL\x00"), []byte("0007\x00")}, {[]byte("controlBS\x00"), []byte("0008\x00")}, {[]byte("controlCAN\x00"), []byte("0018\x00")}, {[]byte("controlCR\x00"), []byte("000D\x00")}, {[]byte("controlDC1\x00"), []byte("0011\x00")}, {[]byte("controlDC2\x00"), []byte("0012\x00")}, {[]byte("controlDC3\x00"), []byte("0013\x00")}, {[]byte("controlDC4\x00"), []byte("0014\x00")}, {[]byte("controlDEL\x00"), []byte("007F\x00")}, {[]byte("controlDLE\x00"), []byte("0010\x00")}, {[]byte("controlEM\x00"), []byte("0019\x00")}, {[]byte("controlENQ\x00"), []byte("0005\x00")}, {[]byte("controlEOT\x00"), []byte("0004\x00")}, {[]byte("controlESC\x00"), []byte("001B\x00")}, {[]byte("controlETB\x00"), []byte("0017\x00")}, {[]byte("controlETX\x00"), []byte("0003\x00")}, {[]byte("controlFF\x00"), []byte("000C\x00")}, {[]byte("controlFS\x00"), []byte("001C\x00")}, {[]byte("controlGS\x00"), []byte("001D\x00")}, {[]byte("controlHT\x00"), []byte("0009\x00")}, {[]byte("controlLF\x00"), []byte("000A\x00")}, {[]byte("controlNAK\x00"), []byte("0015\x00")}, {[]byte("controlRS\x00"), []byte("001E\x00")}, {[]byte("controlSI\x00"), []byte("000F\x00")}, {[]byte("controlSO\x00"), []byte("000E\x00")}, {[]byte("controlSOT\x00"), []byte("0002\x00")}, {[]byte("controlSTX\x00"), []byte("0001\x00")}, {[]byte("controlSUB\x00"), []byte("001A\x00")}, {[]byte("controlSYN\x00"), []byte("0016\x00")}, {[]byte("controlUS\x00"), []byte("001F\x00")}, {[]byte("controlVT\x00"), []byte("000B\x00")}, {[]byte("copyright\x00"), []byte("00A9\x00")}, {[]byte("copyrightsans\x00"), []byte("F8E9\x00")}, {[]byte("copyrightserif\x00"), []byte("F6D9\x00")}, {[]byte("cornerbracketleft\x00"), []byte("300C\x00")}, {[]byte("cornerbracketlefthalfwidth\x00"), []byte("FF62\x00")}, {[]byte("cornerbracketleftvertical\x00"), []byte("FE41\x00")}, {[]byte("cornerbracketright\x00"), []byte("300D\x00")}, {[]byte("cornerbracketrighthalfwidth\x00"), []byte("FF63\x00")}, {[]byte("cornerbracketrightvertical\x00"), []byte("FE42\x00")}, {[]byte("corporationsquare\x00"), []byte("337F\x00")}, {[]byte("cosquare\x00"), []byte("33C7\x00")}, {[]byte("coverkgsquare\x00"), []byte("33C6\x00")}, {[]byte("cparen\x00"), []byte("249E\x00")}, {[]byte("cruzeiro\x00"), []byte("20A2\x00")}, {[]byte("cstretched\x00"), []byte("0297\x00")}, {[]byte("curlyand\x00"), []byte("22CF\x00")}, {[]byte("curlyor\x00"), []byte("22CE\x00")}, {[]byte("currency\x00"), []byte("00A4\x00")}, {[]byte("cyrBreve\x00"), []byte("F6D1\x00")}, {[]byte("cyrFlex\x00"), []byte("F6D2\x00")}, {[]byte("cyrbreve\x00"), []byte("F6D4\x00")}, {[]byte("cyrflex\x00"), []byte("F6D5\x00")}, {[]byte("d\x00"), []byte("0064\x00")}, {[]byte("daarmenian\x00"), []byte("0564\x00")}, {[]byte("dabengali\x00"), []byte("09A6\x00")}, {[]byte("dadarabic\x00"), []byte("0636\x00")}, {[]byte("dadeva\x00"), []byte("0926\x00")}, {[]byte("dadfinalarabic\x00"), []byte("FEBE\x00")}, {[]byte("dadinitialarabic\x00"), []byte("FEBF\x00")}, {[]byte("dadmedialarabic\x00"), []byte("FEC0\x00")}, {[]byte("dagesh\x00"), []byte("05BC\x00")}, {[]byte("dageshhebrew\x00"), []byte("05BC\x00")}, {[]byte("dagger\x00"), []byte("2020\x00")}, {[]byte("daggerdbl\x00"), []byte("2021\x00")}, {[]byte("dagujarati\x00"), []byte("0AA6\x00")}, {[]byte("dagurmukhi\x00"), []byte("0A26\x00")}, {[]byte("dahiragana\x00"), []byte("3060\x00")}, {[]byte("dakatakana\x00"), []byte("30C0\x00")}, {[]byte("dalarabic\x00"), []byte("062F\x00")}, {[]byte("dalet\x00"), []byte("05D3\x00")}, {[]byte("daletdagesh\x00"), []byte("FB33\x00")}, {[]byte("daletdageshhebrew\x00"), []byte("FB33\x00")}, {[]byte("dalethatafpatah\x00"), []byte("05D3 05B2\x00")}, {[]byte("dalethatafpatahhebrew\x00"), []byte("05D3 05B2\x00")}, {[]byte("dalethatafsegol\x00"), []byte("05D3 05B1\x00")}, {[]byte("dalethatafsegolhebrew\x00"), []byte("05D3 05B1\x00")}, {[]byte("dalethebrew\x00"), []byte("05D3\x00")}, {[]byte("dalethiriq\x00"), []byte("05D3 05B4\x00")}, {[]byte("dalethiriqhebrew\x00"), []byte("05D3 05B4\x00")}, {[]byte("daletholam\x00"), []byte("05D3 05B9\x00")}, {[]byte("daletholamhebrew\x00"), []byte("05D3 05B9\x00")}, {[]byte("daletpatah\x00"), []byte("05D3 05B7\x00")}, {[]byte("daletpatahhebrew\x00"), []byte("05D3 05B7\x00")}, {[]byte("daletqamats\x00"), []byte("05D3 05B8\x00")}, {[]byte("daletqamatshebrew\x00"), []byte("05D3 05B8\x00")}, {[]byte("daletqubuts\x00"), []byte("05D3 05BB\x00")}, {[]byte("daletqubutshebrew\x00"), []byte("05D3 05BB\x00")}, {[]byte("daletsegol\x00"), []byte("05D3 05B6\x00")}, {[]byte("daletsegolhebrew\x00"), []byte("05D3 05B6\x00")}, {[]byte("daletsheva\x00"), []byte("05D3 05B0\x00")}, {[]byte("daletshevahebrew\x00"), []byte("05D3 05B0\x00")}, {[]byte("dalettsere\x00"), []byte("05D3 05B5\x00")}, {[]byte("dalettserehebrew\x00"), []byte("05D3 05B5\x00")}, {[]byte("dalfinalarabic\x00"), []byte("FEAA\x00")}, {[]byte("dammaarabic\x00"), []byte("064F\x00")}, {[]byte("dammalowarabic\x00"), []byte("064F\x00")}, {[]byte("dammatanaltonearabic\x00"), []byte("064C\x00")}, {[]byte("dammatanarabic\x00"), []byte("064C\x00")}, {[]byte("danda\x00"), []byte("0964\x00")}, {[]byte("dargahebrew\x00"), []byte("05A7\x00")}, {[]byte("dargalefthebrew\x00"), []byte("05A7\x00")}, {[]byte("dasiapneumatacyrilliccmb\x00"), []byte("0485\x00")}, {[]byte("dblGrave\x00"), []byte("F6D3\x00")}, {[]byte("dblanglebracketleft\x00"), []byte("300A\x00")}, {[]byte("dblanglebracketleftvertical\x00"), []byte("FE3D\x00")}, {[]byte("dblanglebracketright\x00"), []byte("300B\x00")}, {[]byte("dblanglebracketrightvertical\x00"), []byte("FE3E\x00")}, {[]byte("dblarchinvertedbelowcmb\x00"), []byte("032B\x00")}, {[]byte("dblarrowleft\x00"), []byte("21D4\x00")}, {[]byte("dblarrowright\x00"), []byte("21D2\x00")}, {[]byte("dbldanda\x00"), []byte("0965\x00")}, {[]byte("dblgrave\x00"), []byte("F6D6\x00")}, {[]byte("dblgravecmb\x00"), []byte("030F\x00")}, {[]byte("dblintegral\x00"), []byte("222C\x00")}, {[]byte("dbllowline\x00"), []byte("2017\x00")}, {[]byte("dbllowlinecmb\x00"), []byte("0333\x00")}, {[]byte("dbloverlinecmb\x00"), []byte("033F\x00")}, {[]byte("dblprimemod\x00"), []byte("02BA\x00")}, {[]byte("dblverticalbar\x00"), []byte("2016\x00")}, {[]byte("dblverticallineabovecmb\x00"), []byte("030E\x00")}, {[]byte("dbopomofo\x00"), []byte("3109\x00")}, {[]byte("dbsquare\x00"), []byte("33C8\x00")}, {[]byte("dcaron\x00"), []byte("010F\x00")}, {[]byte("dcedilla\x00"), []byte("1E11\x00")}, {[]byte("dcircle\x00"), []byte("24D3\x00")}, {[]byte("dcircumflexbelow\x00"), []byte("1E13\x00")}, {[]byte("dcroat\x00"), []byte("0111\x00")}, {[]byte("ddabengali\x00"), []byte("09A1\x00")}, {[]byte("ddadeva\x00"), []byte("0921\x00")}, {[]byte("ddagujarati\x00"), []byte("0AA1\x00")}, {[]byte("ddagurmukhi\x00"), []byte("0A21\x00")}, {[]byte("ddalarabic\x00"), []byte("0688\x00")}, {[]byte("ddalfinalarabic\x00"), []byte("FB89\x00")}, {[]byte("dddhadeva\x00"), []byte("095C\x00")}, {[]byte("ddhabengali\x00"), []byte("09A2\x00")}, {[]byte("ddhadeva\x00"), []byte("0922\x00")}, {[]byte("ddhagujarati\x00"), []byte("0AA2\x00")}, {[]byte("ddhagurmukhi\x00"), []byte("0A22\x00")}, {[]byte("ddotaccent\x00"), []byte("1E0B\x00")}, {[]byte("ddotbelow\x00"), []byte("1E0D\x00")}, {[]byte("decimalseparatorarabic\x00"), []byte("066B\x00")}, {[]byte("decimalseparatorpersian\x00"), []byte("066B\x00")}, {[]byte("decyrillic\x00"), []byte("0434\x00")}, {[]byte("degree\x00"), []byte("00B0\x00")}, {[]byte("dehihebrew\x00"), []byte("05AD\x00")}, {[]byte("dehiragana\x00"), []byte("3067\x00")}, {[]byte("deicoptic\x00"), []byte("03EF\x00")}, {[]byte("dekatakana\x00"), []byte("30C7\x00")}, {[]byte("deleteleft\x00"), []byte("232B\x00")}, {[]byte("deleteright\x00"), []byte("2326\x00")}, {[]byte("delta\x00"), []byte("03B4\x00")}, {[]byte("deltaturned\x00"), []byte("018D\x00")}, {[]byte("denominatorminusonenumeratorbengali\x00"), []byte("09F8\x00")}, {[]byte("dezh\x00"), []byte("02A4\x00")}, {[]byte("dhabengali\x00"), []byte("09A7\x00")}, {[]byte("dhadeva\x00"), []byte("0927\x00")}, {[]byte("dhagujarati\x00"), []byte("0AA7\x00")}, {[]byte("dhagurmukhi\x00"), []byte("0A27\x00")}, {[]byte("dhook\x00"), []byte("0257\x00")}, {[]byte("dialytikatonos\x00"), []byte("0385\x00")}, {[]byte("dialytikatonoscmb\x00"), []byte("0344\x00")}, {[]byte("diamond\x00"), []byte("2666\x00")}, {[]byte("diamondsuitwhite\x00"), []byte("2662\x00")}, {[]byte("dieresis\x00"), []byte("00A8\x00")}, {[]byte("dieresisacute\x00"), []byte("F6D7\x00")}, {[]byte("dieresisbelowcmb\x00"), []byte("0324\x00")}, {[]byte("dieresiscmb\x00"), []byte("0308\x00")}, {[]byte("dieresisgrave\x00"), []byte("F6D8\x00")}, {[]byte("dieresistonos\x00"), []byte("0385\x00")}, {[]byte("dihiragana\x00"), []byte("3062\x00")}, {[]byte("dikatakana\x00"), []byte("30C2\x00")}, {[]byte("dittomark\x00"), []byte("3003\x00")}, {[]byte("divide\x00"), []byte("00F7\x00")}, {[]byte("divides\x00"), []byte("2223\x00")}, {[]byte("divisionslash\x00"), []byte("2215\x00")}, {[]byte("djecyrillic\x00"), []byte("0452\x00")}, {[]byte("dkshade\x00"), []byte("2593\x00")}, {[]byte("dlinebelow\x00"), []byte("1E0F\x00")}, {[]byte("dlsquare\x00"), []byte("3397\x00")}, {[]byte("dmacron\x00"), []byte("0111\x00")}, {[]byte("dmonospace\x00"), []byte("FF44\x00")}, {[]byte("dnblock\x00"), []byte("2584\x00")}, {[]byte("dochadathai\x00"), []byte("0E0E\x00")}, {[]byte("dodekthai\x00"), []byte("0E14\x00")}, {[]byte("dohiragana\x00"), []byte("3069\x00")}, {[]byte("dokatakana\x00"), []byte("30C9\x00")}, {[]byte("dollar\x00"), []byte("0024\x00")}, {[]byte("dollarinferior\x00"), []byte("F6E3\x00")}, {[]byte("dollarmonospace\x00"), []byte("FF04\x00")}, {[]byte("dollaroldstyle\x00"), []byte("F724\x00")}, {[]byte("dollarsmall\x00"), []byte("FE69\x00")}, {[]byte("dollarsuperior\x00"), []byte("F6E4\x00")}, {[]byte("dong\x00"), []byte("20AB\x00")}, {[]byte("dorusquare\x00"), []byte("3326\x00")}, {[]byte("dotaccent\x00"), []byte("02D9\x00")}, {[]byte("dotaccentcmb\x00"), []byte("0307\x00")}, {[]byte("dotbelowcmb\x00"), []byte("0323\x00")}, {[]byte("dotbelowcomb\x00"), []byte("0323\x00")}, {[]byte("dotkatakana\x00"), []byte("30FB\x00")}, {[]byte("dotlessi\x00"), []byte("0131\x00")}, {[]byte("dotlessj\x00"), []byte("F6BE\x00")}, {[]byte("dotlessjstrokehook\x00"), []byte("0284\x00")}, {[]byte("dotmath\x00"), []byte("22C5\x00")}, {[]byte("dottedcircle\x00"), []byte("25CC\x00")}, {[]byte("doubleyodpatah\x00"), []byte("FB1F\x00")}, {[]byte("doubleyodpatahhebrew\x00"), []byte("FB1F\x00")}, {[]byte("downtackbelowcmb\x00"), []byte("031E\x00")}, {[]byte("downtackmod\x00"), []byte("02D5\x00")}, {[]byte("dparen\x00"), []byte("249F\x00")}, {[]byte("dsuperior\x00"), []byte("F6EB\x00")}, {[]byte("dtail\x00"), []byte("0256\x00")}, {[]byte("dtopbar\x00"), []byte("018C\x00")}, {[]byte("duhiragana\x00"), []byte("3065\x00")}, {[]byte("dukatakana\x00"), []byte("30C5\x00")}, {[]byte("dz\x00"), []byte("01F3\x00")}, {[]byte("dzaltone\x00"), []byte("02A3\x00")}, {[]byte("dzcaron\x00"), []byte("01C6\x00")}, {[]byte("dzcurl\x00"), []byte("02A5\x00")}, {[]byte("dzeabkhasiancyrillic\x00"), []byte("04E1\x00")}, {[]byte("dzecyrillic\x00"), []byte("0455\x00")}, {[]byte("dzhecyrillic\x00"), []byte("045F\x00")}, {[]byte("e\x00"), []byte("0065\x00")}, {[]byte("eacute\x00"), []byte("00E9\x00")}, {[]byte("earth\x00"), []byte("2641\x00")}, {[]byte("ebengali\x00"), []byte("098F\x00")}, {[]byte("ebopomofo\x00"), []byte("311C\x00")}, {[]byte("ebreve\x00"), []byte("0115\x00")}, {[]byte("ecandradeva\x00"), []byte("090D\x00")}, {[]byte("ecandragujarati\x00"), []byte("0A8D\x00")}, {[]byte("ecandravowelsigndeva\x00"), []byte("0945\x00")}, {[]byte("ecandravowelsigngujarati\x00"), []byte("0AC5\x00")}, {[]byte("ecaron\x00"), []byte("011B\x00")}, {[]byte("ecedillabreve\x00"), []byte("1E1D\x00")}, {[]byte("echarmenian\x00"), []byte("0565\x00")}, {[]byte("echyiwnarmenian\x00"), []byte("0587\x00")}, {[]byte("ecircle\x00"), []byte("24D4\x00")}, {[]byte("ecircumflex\x00"), []byte("00EA\x00")}, {[]byte("ecircumflexacute\x00"), []byte("1EBF\x00")}, {[]byte("ecircumflexbelow\x00"), []byte("1E19\x00")}, {[]byte("ecircumflexdotbelow\x00"), []byte("1EC7\x00")}, {[]byte("ecircumflexgrave\x00"), []byte("1EC1\x00")}, {[]byte("ecircumflexhookabove\x00"), []byte("1EC3\x00")}, {[]byte("ecircumflextilde\x00"), []byte("1EC5\x00")}, {[]byte("ecyrillic\x00"), []byte("0454\x00")}, {[]byte("edblgrave\x00"), []byte("0205\x00")}, {[]byte("edeva\x00"), []byte("090F\x00")}, {[]byte("edieresis\x00"), []byte("00EB\x00")}, {[]byte("edot\x00"), []byte("0117\x00")}, {[]byte("edotaccent\x00"), []byte("0117\x00")}, {[]byte("edotbelow\x00"), []byte("1EB9\x00")}, {[]byte("eegurmukhi\x00"), []byte("0A0F\x00")}, {[]byte("eematragurmukhi\x00"), []byte("0A47\x00")}, {[]byte("efcyrillic\x00"), []byte("0444\x00")}, {[]byte("egrave\x00"), []byte("00E8\x00")}, {[]byte("egujarati\x00"), []byte("0A8F\x00")}, {[]byte("eharmenian\x00"), []byte("0567\x00")}, {[]byte("ehbopomofo\x00"), []byte("311D\x00")}, {[]byte("ehiragana\x00"), []byte("3048\x00")}, {[]byte("ehookabove\x00"), []byte("1EBB\x00")}, {[]byte("eibopomofo\x00"), []byte("311F\x00")}, {[]byte("eight\x00"), []byte("0038\x00")}, {[]byte("eightarabic\x00"), []byte("0668\x00")}, {[]byte("eightbengali\x00"), []byte("09EE\x00")}, {[]byte("eightcircle\x00"), []byte("2467\x00")}, {[]byte("eightcircleinversesansserif\x00"), []byte("2791\x00")}, {[]byte("eightdeva\x00"), []byte("096E\x00")}, {[]byte("eighteencircle\x00"), []byte("2471\x00")}, {[]byte("eighteenparen\x00"), []byte("2485\x00")}, {[]byte("eighteenperiod\x00"), []byte("2499\x00")}, {[]byte("eightgujarati\x00"), []byte("0AEE\x00")}, {[]byte("eightgurmukhi\x00"), []byte("0A6E\x00")}, {[]byte("eighthackarabic\x00"), []byte("0668\x00")}, {[]byte("eighthangzhou\x00"), []byte("3028\x00")}, {[]byte("eighthnotebeamed\x00"), []byte("266B\x00")}, {[]byte("eightideographicparen\x00"), []byte("3227\x00")}, {[]byte("eightinferior\x00"), []byte("2088\x00")}, {[]byte("eightmonospace\x00"), []byte("FF18\x00")}, {[]byte("eightoldstyle\x00"), []byte("F738\x00")}, {[]byte("eightparen\x00"), []byte("247B\x00")}, {[]byte("eightperiod\x00"), []byte("248F\x00")}, {[]byte("eightpersian\x00"), []byte("06F8\x00")}, {[]byte("eightroman\x00"), []byte("2177\x00")}, {[]byte("eightsuperior\x00"), []byte("2078\x00")}, {[]byte("eightthai\x00"), []byte("0E58\x00")}, {[]byte("einvertedbreve\x00"), []byte("0207\x00")}, {[]byte("eiotifiedcyrillic\x00"), []byte("0465\x00")}, {[]byte("ekatakana\x00"), []byte("30A8\x00")}, {[]byte("ekatakanahalfwidth\x00"), []byte("FF74\x00")}, {[]byte("ekonkargurmukhi\x00"), []byte("0A74\x00")}, {[]byte("ekorean\x00"), []byte("3154\x00")}, {[]byte("elcyrillic\x00"), []byte("043B\x00")}, {[]byte("element\x00"), []byte("2208\x00")}, {[]byte("elevencircle\x00"), []byte("246A\x00")}, {[]byte("elevenparen\x00"), []byte("247E\x00")}, {[]byte("elevenperiod\x00"), []byte("2492\x00")}, {[]byte("elevenroman\x00"), []byte("217A\x00")}, {[]byte("ellipsis\x00"), []byte("2026\x00")}, {[]byte("ellipsisvertical\x00"), []byte("22EE\x00")}, {[]byte("emacron\x00"), []byte("0113\x00")}, {[]byte("emacronacute\x00"), []byte("1E17\x00")}, {[]byte("emacrongrave\x00"), []byte("1E15\x00")}, {[]byte("emcyrillic\x00"), []byte("043C\x00")}, {[]byte("emdash\x00"), []byte("2014\x00")}, {[]byte("emdashvertical\x00"), []byte("FE31\x00")}, {[]byte("emonospace\x00"), []byte("FF45\x00")}, {[]byte("emphasismarkarmenian\x00"), []byte("055B\x00")}, {[]byte("emptyset\x00"), []byte("2205\x00")}, {[]byte("enbopomofo\x00"), []byte("3123\x00")}, {[]byte("encyrillic\x00"), []byte("043D\x00")}, {[]byte("endash\x00"), []byte("2013\x00")}, {[]byte("endashvertical\x00"), []byte("FE32\x00")}, {[]byte("endescendercyrillic\x00"), []byte("04A3\x00")}, {[]byte("eng\x00"), []byte("014B\x00")}, {[]byte("engbopomofo\x00"), []byte("3125\x00")}, {[]byte("enghecyrillic\x00"), []byte("04A5\x00")}, {[]byte("enhookcyrillic\x00"), []byte("04C8\x00")}, {[]byte("enspace\x00"), []byte("2002\x00")}, {[]byte("eogonek\x00"), []byte("0119\x00")}, {[]byte("eokorean\x00"), []byte("3153\x00")}, {[]byte("eopen\x00"), []byte("025B\x00")}, {[]byte("eopenclosed\x00"), []byte("029A\x00")}, {[]byte("eopenreversed\x00"), []byte("025C\x00")}, {[]byte("eopenreversedclosed\x00"), []byte("025E\x00")}, {[]byte("eopenreversedhook\x00"), []byte("025D\x00")}, {[]byte("eparen\x00"), []byte("24A0\x00")}, {[]byte("epsilon\x00"), []byte("03B5\x00")}, {[]byte("epsilontonos\x00"), []byte("03AD\x00")}, {[]byte("equal\x00"), []byte("003D\x00")}, {[]byte("equalmonospace\x00"), []byte("FF1D\x00")}, {[]byte("equalsmall\x00"), []byte("FE66\x00")}, {[]byte("equalsuperior\x00"), []byte("207C\x00")}, {[]byte("equivalence\x00"), []byte("2261\x00")}, {[]byte("erbopomofo\x00"), []byte("3126\x00")}, {[]byte("ercyrillic\x00"), []byte("0440\x00")}, {[]byte("ereversed\x00"), []byte("0258\x00")}, {[]byte("ereversedcyrillic\x00"), []byte("044D\x00")}, {[]byte("escyrillic\x00"), []byte("0441\x00")}, {[]byte("esdescendercyrillic\x00"), []byte("04AB\x00")}, {[]byte("esh\x00"), []byte("0283\x00")}, {[]byte("eshcurl\x00"), []byte("0286\x00")}, {[]byte("eshortdeva\x00"), []byte("090E\x00")}, {[]byte("eshortvowelsigndeva\x00"), []byte("0946\x00")}, {[]byte("eshreversedloop\x00"), []byte("01AA\x00")}, {[]byte("eshsquatreversed\x00"), []byte("0285\x00")}, {[]byte("esmallhiragana\x00"), []byte("3047\x00")}, {[]byte("esmallkatakana\x00"), []byte("30A7\x00")}, {[]byte("esmallkatakanahalfwidth\x00"), []byte("FF6A\x00")}, {[]byte("estimated\x00"), []byte("212E\x00")}, {[]byte("esuperior\x00"), []byte("F6EC\x00")}, {[]byte("eta\x00"), []byte("03B7\x00")}, {[]byte("etarmenian\x00"), []byte("0568\x00")}, {[]byte("etatonos\x00"), []byte("03AE\x00")}, {[]byte("eth\x00"), []byte("00F0\x00")}, {[]byte("etilde\x00"), []byte("1EBD\x00")}, {[]byte("etildebelow\x00"), []byte("1E1B\x00")}, {[]byte("etnahtafoukhhebrew\x00"), []byte("0591\x00")}, {[]byte("etnahtafoukhlefthebrew\x00"), []byte("0591\x00")}, {[]byte("etnahtahebrew\x00"), []byte("0591\x00")}, {[]byte("etnahtalefthebrew\x00"), []byte("0591\x00")}, {[]byte("eturned\x00"), []byte("01DD\x00")}, {[]byte("eukorean\x00"), []byte("3161\x00")}, {[]byte("euro\x00"), []byte("20AC\x00")}, {[]byte("evowelsignbengali\x00"), []byte("09C7\x00")}, {[]byte("evowelsigndeva\x00"), []byte("0947\x00")}, {[]byte("evowelsigngujarati\x00"), []byte("0AC7\x00")}, {[]byte("exclam\x00"), []byte("0021\x00")}, {[]byte("exclamarmenian\x00"), []byte("055C\x00")}, {[]byte("exclamdbl\x00"), []byte("203C\x00")}, {[]byte("exclamdown\x00"), []byte("00A1\x00")}, {[]byte("exclamdownsmall\x00"), []byte("F7A1\x00")}, {[]byte("exclammonospace\x00"), []byte("FF01\x00")}, {[]byte("exclamsmall\x00"), []byte("F721\x00")}, {[]byte("existential\x00"), []byte("2203\x00")}, {[]byte("ezh\x00"), []byte("0292\x00")}, {[]byte("ezhcaron\x00"), []byte("01EF\x00")}, {[]byte("ezhcurl\x00"), []byte("0293\x00")}, {[]byte("ezhreversed\x00"), []byte("01B9\x00")}, {[]byte("ezhtail\x00"), []byte("01BA\x00")}, {[]byte("f\x00"), []byte("0066\x00")}, {[]byte("fadeva\x00"), []byte("095E\x00")}, {[]byte("fagurmukhi\x00"), []byte("0A5E\x00")}, {[]byte("fahrenheit\x00"), []byte("2109\x00")}, {[]byte("fathaarabic\x00"), []byte("064E\x00")}, {[]byte("fathalowarabic\x00"), []byte("064E\x00")}, {[]byte("fathatanarabic\x00"), []byte("064B\x00")}, {[]byte("fbopomofo\x00"), []byte("3108\x00")}, {[]byte("fcircle\x00"), []byte("24D5\x00")}, {[]byte("fdotaccent\x00"), []byte("1E1F\x00")}, {[]byte("feharabic\x00"), []byte("0641\x00")}, {[]byte("feharmenian\x00"), []byte("0586\x00")}, {[]byte("fehfinalarabic\x00"), []byte("FED2\x00")}, {[]byte("fehinitialarabic\x00"), []byte("FED3\x00")}, {[]byte("fehmedialarabic\x00"), []byte("FED4\x00")}, {[]byte("feicoptic\x00"), []byte("03E5\x00")}, {[]byte("female\x00"), []byte("2640\x00")}, {[]byte("ff\x00"), []byte("FB00\x00")}, {[]byte("ffi\x00"), []byte("FB03\x00")}, {[]byte("ffl\x00"), []byte("FB04\x00")}, {[]byte("fi\x00"), []byte("FB01\x00")}, {[]byte("fifteencircle\x00"), []byte("246E\x00")}, {[]byte("fifteenparen\x00"), []byte("2482\x00")}, {[]byte("fifteenperiod\x00"), []byte("2496\x00")}, {[]byte("figuredash\x00"), []byte("2012\x00")}, {[]byte("filledbox\x00"), []byte("25A0\x00")}, {[]byte("filledrect\x00"), []byte("25AC\x00")}, {[]byte("finalkaf\x00"), []byte("05DA\x00")}, {[]byte("finalkafdagesh\x00"), []byte("FB3A\x00")}, {[]byte("finalkafdageshhebrew\x00"), []byte("FB3A\x00")}, {[]byte("finalkafhebrew\x00"), []byte("05DA\x00")}, {[]byte("finalkafqamats\x00"), []byte("05DA 05B8\x00")}, {[]byte("finalkafqamatshebrew\x00"), []byte("05DA 05B8\x00")}, {[]byte("finalkafsheva\x00"), []byte("05DA 05B0\x00")}, {[]byte("finalkafshevahebrew\x00"), []byte("05DA 05B0\x00")}, {[]byte("finalmem\x00"), []byte("05DD\x00")}, {[]byte("finalmemhebrew\x00"), []byte("05DD\x00")}, {[]byte("finalnun\x00"), []byte("05DF\x00")}, {[]byte("finalnunhebrew\x00"), []byte("05DF\x00")}, {[]byte("finalpe\x00"), []byte("05E3\x00")}, {[]byte("finalpehebrew\x00"), []byte("05E3\x00")}, {[]byte("finaltsadi\x00"), []byte("05E5\x00")}, {[]byte("finaltsadihebrew\x00"), []byte("05E5\x00")}, {[]byte("firsttonechinese\x00"), []byte("02C9\x00")}, {[]byte("fisheye\x00"), []byte("25C9\x00")}, {[]byte("fitacyrillic\x00"), []byte("0473\x00")}, {[]byte("five\x00"), []byte("0035\x00")}, {[]byte("fivearabic\x00"), []byte("0665\x00")}, {[]byte("fivebengali\x00"), []byte("09EB\x00")}, {[]byte("fivecircle\x00"), []byte("2464\x00")}, {[]byte("fivecircleinversesansserif\x00"), []byte("278E\x00")}, {[]byte("fivedeva\x00"), []byte("096B\x00")}, {[]byte("fiveeighths\x00"), []byte("215D\x00")}, {[]byte("fivegujarati\x00"), []byte("0AEB\x00")}, {[]byte("fivegurmukhi\x00"), []byte("0A6B\x00")}, {[]byte("fivehackarabic\x00"), []byte("0665\x00")}, {[]byte("fivehangzhou\x00"), []byte("3025\x00")}, {[]byte("fiveideographicparen\x00"), []byte("3224\x00")}, {[]byte("fiveinferior\x00"), []byte("2085\x00")}, {[]byte("fivemonospace\x00"), []byte("FF15\x00")}, {[]byte("fiveoldstyle\x00"), []byte("F735\x00")}, {[]byte("fiveparen\x00"), []byte("2478\x00")}, {[]byte("fiveperiod\x00"), []byte("248C\x00")}, {[]byte("fivepersian\x00"), []byte("06F5\x00")}, {[]byte("fiveroman\x00"), []byte("2174\x00")}, {[]byte("fivesuperior\x00"), []byte("2075\x00")}, {[]byte("fivethai\x00"), []byte("0E55\x00")}, {[]byte("fl\x00"), []byte("FB02\x00")}, {[]byte("florin\x00"), []byte("0192\x00")}, {[]byte("fmonospace\x00"), []byte("FF46\x00")}, {[]byte("fmsquare\x00"), []byte("3399\x00")}, {[]byte("fofanthai\x00"), []byte("0E1F\x00")}, {[]byte("fofathai\x00"), []byte("0E1D\x00")}, {[]byte("fongmanthai\x00"), []byte("0E4F\x00")}, {[]byte("forall\x00"), []byte("2200\x00")}, {[]byte("four\x00"), []byte("0034\x00")}, {[]byte("fourarabic\x00"), []byte("0664\x00")}, {[]byte("fourbengali\x00"), []byte("09EA\x00")}, {[]byte("fourcircle\x00"), []byte("2463\x00")}, {[]byte("fourcircleinversesansserif\x00"), []byte("278D\x00")}, {[]byte("fourdeva\x00"), []byte("096A\x00")}, {[]byte("fourgujarati\x00"), []byte("0AEA\x00")}, {[]byte("fourgurmukhi\x00"), []byte("0A6A\x00")}, {[]byte("fourhackarabic\x00"), []byte("0664\x00")}, {[]byte("fourhangzhou\x00"), []byte("3024\x00")}, {[]byte("fourideographicparen\x00"), []byte("3223\x00")}, {[]byte("fourinferior\x00"), []byte("2084\x00")}, {[]byte("fourmonospace\x00"), []byte("FF14\x00")}, {[]byte("fournumeratorbengali\x00"), []byte("09F7\x00")}, {[]byte("fouroldstyle\x00"), []byte("F734\x00")}, {[]byte("fourparen\x00"), []byte("2477\x00")}, {[]byte("fourperiod\x00"), []byte("248B\x00")}, {[]byte("fourpersian\x00"), []byte("06F4\x00")}, {[]byte("fourroman\x00"), []byte("2173\x00")}, {[]byte("foursuperior\x00"), []byte("2074\x00")}, {[]byte("fourteencircle\x00"), []byte("246D\x00")}, {[]byte("fourteenparen\x00"), []byte("2481\x00")}, {[]byte("fourteenperiod\x00"), []byte("2495\x00")}, {[]byte("fourthai\x00"), []byte("0E54\x00")}, {[]byte("fourthtonechinese\x00"), []byte("02CB\x00")}, {[]byte("fparen\x00"), []byte("24A1\x00")}, {[]byte("fraction\x00"), []byte("2044\x00")}, {[]byte("franc\x00"), []byte("20A3\x00")}, {[]byte("g\x00"), []byte("0067\x00")}, {[]byte("gabengali\x00"), []byte("0997\x00")}, {[]byte("gacute\x00"), []byte("01F5\x00")}, {[]byte("gadeva\x00"), []byte("0917\x00")}, {[]byte("gafarabic\x00"), []byte("06AF\x00")}, {[]byte("gaffinalarabic\x00"), []byte("FB93\x00")}, {[]byte("gafinitialarabic\x00"), []byte("FB94\x00")}, {[]byte("gafmedialarabic\x00"), []byte("FB95\x00")}, {[]byte("gagujarati\x00"), []byte("0A97\x00")}, {[]byte("gagurmukhi\x00"), []byte("0A17\x00")}, {[]byte("gahiragana\x00"), []byte("304C\x00")}, {[]byte("gakatakana\x00"), []byte("30AC\x00")}, {[]byte("gamma\x00"), []byte("03B3\x00")}, {[]byte("gammalatinsmall\x00"), []byte("0263\x00")}, {[]byte("gammasuperior\x00"), []byte("02E0\x00")}, {[]byte("gangiacoptic\x00"), []byte("03EB\x00")}, {[]byte("gbopomofo\x00"), []byte("310D\x00")}, {[]byte("gbreve\x00"), []byte("011F\x00")}, {[]byte("gcaron\x00"), []byte("01E7\x00")}, {[]byte("gcedilla\x00"), []byte("0123\x00")}, {[]byte("gcircle\x00"), []byte("24D6\x00")}, {[]byte("gcircumflex\x00"), []byte("011D\x00")}, {[]byte("gcommaaccent\x00"), []byte("0123\x00")}, {[]byte("gdot\x00"), []byte("0121\x00")}, {[]byte("gdotaccent\x00"), []byte("0121\x00")}, {[]byte("gecyrillic\x00"), []byte("0433\x00")}, {[]byte("gehiragana\x00"), []byte("3052\x00")}, {[]byte("gekatakana\x00"), []byte("30B2\x00")}, {[]byte("geometricallyequal\x00"), []byte("2251\x00")}, {[]byte("gereshaccenthebrew\x00"), []byte("059C\x00")}, {[]byte("gereshhebrew\x00"), []byte("05F3\x00")}, {[]byte("gereshmuqdamhebrew\x00"), []byte("059D\x00")}, {[]byte("germandbls\x00"), []byte("00DF\x00")}, {[]byte("gershayimaccenthebrew\x00"), []byte("059E\x00")}, {[]byte("gershayimhebrew\x00"), []byte("05F4\x00")}, {[]byte("getamark\x00"), []byte("3013\x00")}, {[]byte("ghabengali\x00"), []byte("0998\x00")}, {[]byte("ghadarmenian\x00"), []byte("0572\x00")}, {[]byte("ghadeva\x00"), []byte("0918\x00")}, {[]byte("ghagujarati\x00"), []byte("0A98\x00")}, {[]byte("ghagurmukhi\x00"), []byte("0A18\x00")}, {[]byte("ghainarabic\x00"), []byte("063A\x00")}, {[]byte("ghainfinalarabic\x00"), []byte("FECE\x00")}, {[]byte("ghaininitialarabic\x00"), []byte("FECF\x00")}, {[]byte("ghainmedialarabic\x00"), []byte("FED0\x00")}, {[]byte("ghemiddlehookcyrillic\x00"), []byte("0495\x00")}, {[]byte("ghestrokecyrillic\x00"), []byte("0493\x00")}, {[]byte("gheupturncyrillic\x00"), []byte("0491\x00")}, {[]byte("ghhadeva\x00"), []byte("095A\x00")}, {[]byte("ghhagurmukhi\x00"), []byte("0A5A\x00")}, {[]byte("ghook\x00"), []byte("0260\x00")}, {[]byte("ghzsquare\x00"), []byte("3393\x00")}, {[]byte("gihiragana\x00"), []byte("304E\x00")}, {[]byte("gikatakana\x00"), []byte("30AE\x00")}, {[]byte("gimarmenian\x00"), []byte("0563\x00")}, {[]byte("gimel\x00"), []byte("05D2\x00")}, {[]byte("gimeldagesh\x00"), []byte("FB32\x00")}, {[]byte("gimeldageshhebrew\x00"), []byte("FB32\x00")}, {[]byte("gimelhebrew\x00"), []byte("05D2\x00")}, {[]byte("gjecyrillic\x00"), []byte("0453\x00")}, {[]byte("glottalinvertedstroke\x00"), []byte("01BE\x00")}, {[]byte("glottalstop\x00"), []byte("0294\x00")}, {[]byte("glottalstopinverted\x00"), []byte("0296\x00")}, {[]byte("glottalstopmod\x00"), []byte("02C0\x00")}, {[]byte("glottalstopreversed\x00"), []byte("0295\x00")}, {[]byte("glottalstopreversedmod\x00"), []byte("02C1\x00")}, {[]byte("glottalstopreversedsuperior\x00"), []byte("02E4\x00")}, {[]byte("glottalstopstroke\x00"), []byte("02A1\x00")}, {[]byte("glottalstopstrokereversed\x00"), []byte("02A2\x00")}, {[]byte("gmacron\x00"), []byte("1E21\x00")}, {[]byte("gmonospace\x00"), []byte("FF47\x00")}, {[]byte("gohiragana\x00"), []byte("3054\x00")}, {[]byte("gokatakana\x00"), []byte("30B4\x00")}, {[]byte("gparen\x00"), []byte("24A2\x00")}, {[]byte("gpasquare\x00"), []byte("33AC\x00")}, {[]byte("gradient\x00"), []byte("2207\x00")}, {[]byte("grave\x00"), []byte("0060\x00")}, {[]byte("gravebelowcmb\x00"), []byte("0316\x00")}, {[]byte("gravecmb\x00"), []byte("0300\x00")}, {[]byte("gravecomb\x00"), []byte("0300\x00")}, {[]byte("gravedeva\x00"), []byte("0953\x00")}, {[]byte("gravelowmod\x00"), []byte("02CE\x00")}, {[]byte("gravemonospace\x00"), []byte("FF40\x00")}, {[]byte("gravetonecmb\x00"), []byte("0340\x00")}, {[]byte("greater\x00"), []byte("003E\x00")}, {[]byte("greaterequal\x00"), []byte("2265\x00")}, {[]byte("greaterequalorless\x00"), []byte("22DB\x00")}, {[]byte("greatermonospace\x00"), []byte("FF1E\x00")}, {[]byte("greaterorequivalent\x00"), []byte("2273\x00")}, {[]byte("greaterorless\x00"), []byte("2277\x00")}, {[]byte("greateroverequal\x00"), []byte("2267\x00")}, {[]byte("greatersmall\x00"), []byte("FE65\x00")}, {[]byte("gscript\x00"), []byte("0261\x00")}, {[]byte("gstroke\x00"), []byte("01E5\x00")}, {[]byte("guhiragana\x00"), []byte("3050\x00")}, {[]byte("guillemotleft\x00"), []byte("00AB\x00")}, {[]byte("guillemotright\x00"), []byte("00BB\x00")}, {[]byte("guilsinglleft\x00"), []byte("2039\x00")}, {[]byte("guilsinglright\x00"), []byte("203A\x00")}, {[]byte("gukatakana\x00"), []byte("30B0\x00")}, {[]byte("guramusquare\x00"), []byte("3318\x00")}, {[]byte("gysquare\x00"), []byte("33C9\x00")}, {[]byte("h\x00"), []byte("0068\x00")}, {[]byte("haabkhasiancyrillic\x00"), []byte("04A9\x00")}, {[]byte("haaltonearabic\x00"), []byte("06C1\x00")}, {[]byte("habengali\x00"), []byte("09B9\x00")}, {[]byte("hadescendercyrillic\x00"), []byte("04B3\x00")}, {[]byte("hadeva\x00"), []byte("0939\x00")}, {[]byte("hagujarati\x00"), []byte("0AB9\x00")}, {[]byte("hagurmukhi\x00"), []byte("0A39\x00")}, {[]byte("haharabic\x00"), []byte("062D\x00")}, {[]byte("hahfinalarabic\x00"), []byte("FEA2\x00")}, {[]byte("hahinitialarabic\x00"), []byte("FEA3\x00")}, {[]byte("hahiragana\x00"), []byte("306F\x00")}, {[]byte("hahmedialarabic\x00"), []byte("FEA4\x00")}, {[]byte("haitusquare\x00"), []byte("332A\x00")}, {[]byte("hakatakana\x00"), []byte("30CF\x00")}, {[]byte("hakatakanahalfwidth\x00"), []byte("FF8A\x00")}, {[]byte("halantgurmukhi\x00"), []byte("0A4D\x00")}, {[]byte("hamzaarabic\x00"), []byte("0621\x00")}, {[]byte("hamzadammaarabic\x00"), []byte("0621 064F\x00")}, {[]byte("hamzadammatanarabic\x00"), []byte("0621 064C\x00")}, {[]byte("hamzafathaarabic\x00"), []byte("0621 064E\x00")}, {[]byte("hamzafathatanarabic\x00"), []byte("0621 064B\x00")}, {[]byte("hamzalowarabic\x00"), []byte("0621\x00")}, {[]byte("hamzalowkasraarabic\x00"), []byte("0621 0650\x00")}, {[]byte("hamzalowkasratanarabic\x00"), []byte("0621 064D\x00")}, {[]byte("hamzasukunarabic\x00"), []byte("0621 0652\x00")}, {[]byte("hangulfiller\x00"), []byte("3164\x00")}, {[]byte("hardsigncyrillic\x00"), []byte("044A\x00")}, {[]byte("harpoonleftbarbup\x00"), []byte("21BC\x00")}, {[]byte("harpoonrightbarbup\x00"), []byte("21C0\x00")}, {[]byte("hasquare\x00"), []byte("33CA\x00")}, {[]byte("hatafpatah\x00"), []byte("05B2\x00")}, {[]byte("hatafpatah16\x00"), []byte("05B2\x00")}, {[]byte("hatafpatah23\x00"), []byte("05B2\x00")}, {[]byte("hatafpatah2f\x00"), []byte("05B2\x00")}, {[]byte("hatafpatahhebrew\x00"), []byte("05B2\x00")}, {[]byte("hatafpatahnarrowhebrew\x00"), []byte("05B2\x00")}, {[]byte("hatafpatahquarterhebrew\x00"), []byte("05B2\x00")}, {[]byte("hatafpatahwidehebrew\x00"), []byte("05B2\x00")}, {[]byte("hatafqamats\x00"), []byte("05B3\x00")}, {[]byte("hatafqamats1b\x00"), []byte("05B3\x00")}, {[]byte("hatafqamats28\x00"), []byte("05B3\x00")}, {[]byte("hatafqamats34\x00"), []byte("05B3\x00")}, {[]byte("hatafqamatshebrew\x00"), []byte("05B3\x00")}, {[]byte("hatafqamatsnarrowhebrew\x00"), []byte("05B3\x00")}, {[]byte("hatafqamatsquarterhebrew\x00"), []byte("05B3\x00")}, {[]byte("hatafqamatswidehebrew\x00"), []byte("05B3\x00")}, {[]byte("hatafsegol\x00"), []byte("05B1\x00")}, {[]byte("hatafsegol17\x00"), []byte("05B1\x00")}, {[]byte("hatafsegol24\x00"), []byte("05B1\x00")}, {[]byte("hatafsegol30\x00"), []byte("05B1\x00")}, {[]byte("hatafsegolhebrew\x00"), []byte("05B1\x00")}, {[]byte("hatafsegolnarrowhebrew\x00"), []byte("05B1\x00")}, {[]byte("hatafsegolquarterhebrew\x00"), []byte("05B1\x00")}, {[]byte("hatafsegolwidehebrew\x00"), []byte("05B1\x00")}, {[]byte("hbar\x00"), []byte("0127\x00")}, {[]byte("hbopomofo\x00"), []byte("310F\x00")}, {[]byte("hbrevebelow\x00"), []byte("1E2B\x00")}, {[]byte("hcedilla\x00"), []byte("1E29\x00")}, {[]byte("hcircle\x00"), []byte("24D7\x00")}, {[]byte("hcircumflex\x00"), []byte("0125\x00")}, {[]byte("hdieresis\x00"), []byte("1E27\x00")}, {[]byte("hdotaccent\x00"), []byte("1E23\x00")}, {[]byte("hdotbelow\x00"), []byte("1E25\x00")}, {[]byte("he\x00"), []byte("05D4\x00")}, {[]byte("heart\x00"), []byte("2665\x00")}, {[]byte("heartsuitblack\x00"), []byte("2665\x00")}, {[]byte("heartsuitwhite\x00"), []byte("2661\x00")}, {[]byte("hedagesh\x00"), []byte("FB34\x00")}, {[]byte("hedageshhebrew\x00"), []byte("FB34\x00")}, {[]byte("hehaltonearabic\x00"), []byte("06C1\x00")}, {[]byte("heharabic\x00"), []byte("0647\x00")}, {[]byte("hehebrew\x00"), []byte("05D4\x00")}, {[]byte("hehfinalaltonearabic\x00"), []byte("FBA7\x00")}, {[]byte("hehfinalalttwoarabic\x00"), []byte("FEEA\x00")}, {[]byte("hehfinalarabic\x00"), []byte("FEEA\x00")}, {[]byte("hehhamzaabovefinalarabic\x00"), []byte("FBA5\x00")}, {[]byte("hehhamzaaboveisolatedarabic\x00"), []byte("FBA4\x00")}, {[]byte("hehinitialaltonearabic\x00"), []byte("FBA8\x00")}, {[]byte("hehinitialarabic\x00"), []byte("FEEB\x00")}, {[]byte("hehiragana\x00"), []byte("3078\x00")}, {[]byte("hehmedialaltonearabic\x00"), []byte("FBA9\x00")}, {[]byte("hehmedialarabic\x00"), []byte("FEEC\x00")}, {[]byte("heiseierasquare\x00"), []byte("337B\x00")}, {[]byte("hekatakana\x00"), []byte("30D8\x00")}, {[]byte("hekatakanahalfwidth\x00"), []byte("FF8D\x00")}, {[]byte("hekutaarusquare\x00"), []byte("3336\x00")}, {[]byte("henghook\x00"), []byte("0267\x00")}, {[]byte("herutusquare\x00"), []byte("3339\x00")}, {[]byte("het\x00"), []byte("05D7\x00")}, {[]byte("hethebrew\x00"), []byte("05D7\x00")}, {[]byte("hhook\x00"), []byte("0266\x00")}, {[]byte("hhooksuperior\x00"), []byte("02B1\x00")}, {[]byte("hieuhacirclekorean\x00"), []byte("327B\x00")}, {[]byte("hieuhaparenkorean\x00"), []byte("321B\x00")}, {[]byte("hieuhcirclekorean\x00"), []byte("326D\x00")}, {[]byte("hieuhkorean\x00"), []byte("314E\x00")}, {[]byte("hieuhparenkorean\x00"), []byte("320D\x00")}, {[]byte("hihiragana\x00"), []byte("3072\x00")}, {[]byte("hikatakana\x00"), []byte("30D2\x00")}, {[]byte("hikatakanahalfwidth\x00"), []byte("FF8B\x00")}, {[]byte("hiriq\x00"), []byte("05B4\x00")}, {[]byte("hiriq14\x00"), []byte("05B4\x00")}, {[]byte("hiriq21\x00"), []byte("05B4\x00")}, {[]byte("hiriq2d\x00"), []byte("05B4\x00")}, {[]byte("hiriqhebrew\x00"), []byte("05B4\x00")}, {[]byte("hiriqnarrowhebrew\x00"), []byte("05B4\x00")}, {[]byte("hiriqquarterhebrew\x00"), []byte("05B4\x00")}, {[]byte("hiriqwidehebrew\x00"), []byte("05B4\x00")}, {[]byte("hlinebelow\x00"), []byte("1E96\x00")}, {[]byte("hmonospace\x00"), []byte("FF48\x00")}, {[]byte("hoarmenian\x00"), []byte("0570\x00")}, {[]byte("hohipthai\x00"), []byte("0E2B\x00")}, {[]byte("hohiragana\x00"), []byte("307B\x00")}, {[]byte("hokatakana\x00"), []byte("30DB\x00")}, {[]byte("hokatakanahalfwidth\x00"), []byte("FF8E\x00")}, {[]byte("holam\x00"), []byte("05B9\x00")}, {[]byte("holam19\x00"), []byte("05B9\x00")}, {[]byte("holam26\x00"), []byte("05B9\x00")}, {[]byte("holam32\x00"), []byte("05B9\x00")}, {[]byte("holamhebrew\x00"), []byte("05B9\x00")}, {[]byte("holamnarrowhebrew\x00"), []byte("05B9\x00")}, {[]byte("holamquarterhebrew\x00"), []byte("05B9\x00")}, {[]byte("holamwidehebrew\x00"), []byte("05B9\x00")}, {[]byte("honokhukthai\x00"), []byte("0E2E\x00")}, {[]byte("hookabovecomb\x00"), []byte("0309\x00")}, {[]byte("hookcmb\x00"), []byte("0309\x00")}, {[]byte("hookpalatalizedbelowcmb\x00"), []byte("0321\x00")}, {[]byte("hookretroflexbelowcmb\x00"), []byte("0322\x00")}, {[]byte("hoonsquare\x00"), []byte("3342\x00")}, {[]byte("horicoptic\x00"), []byte("03E9\x00")}, {[]byte("horizontalbar\x00"), []byte("2015\x00")}, {[]byte("horncmb\x00"), []byte("031B\x00")}, {[]byte("hotsprings\x00"), []byte("2668\x00")}, {[]byte("house\x00"), []byte("2302\x00")}, {[]byte("hparen\x00"), []byte("24A3\x00")}, {[]byte("hsuperior\x00"), []byte("02B0\x00")}, {[]byte("hturned\x00"), []byte("0265\x00")}, {[]byte("huhiragana\x00"), []byte("3075\x00")}, {[]byte("huiitosquare\x00"), []byte("3333\x00")}, {[]byte("hukatakana\x00"), []byte("30D5\x00")}, {[]byte("hukatakanahalfwidth\x00"), []byte("FF8C\x00")}, {[]byte("hungarumlaut\x00"), []byte("02DD\x00")}, {[]byte("hungarumlautcmb\x00"), []byte("030B\x00")}, {[]byte("hv\x00"), []byte("0195\x00")}, {[]byte("hyphen\x00"), []byte("002D\x00")}, {[]byte("hypheninferior\x00"), []byte("F6E5\x00")}, {[]byte("hyphenmonospace\x00"), []byte("FF0D\x00")}, {[]byte("hyphensmall\x00"), []byte("FE63\x00")}, {[]byte("hyphensuperior\x00"), []byte("F6E6\x00")}, {[]byte("hyphentwo\x00"), []byte("2010\x00")}, {[]byte("i\x00"), []byte("0069\x00")}, {[]byte("iacute\x00"), []byte("00ED\x00")}, {[]byte("iacyrillic\x00"), []byte("044F\x00")}, {[]byte("ibengali\x00"), []byte("0987\x00")}, {[]byte("ibopomofo\x00"), []byte("3127\x00")}, {[]byte("ibreve\x00"), []byte("012D\x00")}, {[]byte("icaron\x00"), []byte("01D0\x00")}, {[]byte("icircle\x00"), []byte("24D8\x00")}, {[]byte("icircumflex\x00"), []byte("00EE\x00")}, {[]byte("icyrillic\x00"), []byte("0456\x00")}, {[]byte("idblgrave\x00"), []byte("0209\x00")}, {[]byte("ideographearthcircle\x00"), []byte("328F\x00")}, {[]byte("ideographfirecircle\x00"), []byte("328B\x00")}, {[]byte("ideographicallianceparen\x00"), []byte("323F\x00")}, {[]byte("ideographiccallparen\x00"), []byte("323A\x00")}, {[]byte("ideographiccentrecircle\x00"), []byte("32A5\x00")}, {[]byte("ideographicclose\x00"), []byte("3006\x00")}, {[]byte("ideographiccomma\x00"), []byte("3001\x00")}, {[]byte("ideographiccommaleft\x00"), []byte("FF64\x00")}, {[]byte("ideographiccongratulationparen\x00"), []byte("3237\x00")}, {[]byte("ideographiccorrectcircle\x00"), []byte("32A3\x00")}, {[]byte("ideographicearthparen\x00"), []byte("322F\x00")}, {[]byte("ideographicenterpriseparen\x00"), []byte("323D\x00")}, {[]byte("ideographicexcellentcircle\x00"), []byte("329D\x00")}, {[]byte("ideographicfestivalparen\x00"), []byte("3240\x00")}, {[]byte("ideographicfinancialcircle\x00"), []byte("3296\x00")}, {[]byte("ideographicfinancialparen\x00"), []byte("3236\x00")}, {[]byte("ideographicfireparen\x00"), []byte("322B\x00")}, {[]byte("ideographichaveparen\x00"), []byte("3232\x00")}, {[]byte("ideographichighcircle\x00"), []byte("32A4\x00")}, {[]byte("ideographiciterationmark\x00"), []byte("3005\x00")}, {[]byte("ideographiclaborcircle\x00"), []byte("3298\x00")}, {[]byte("ideographiclaborparen\x00"), []byte("3238\x00")}, {[]byte("ideographicleftcircle\x00"), []byte("32A7\x00")}, {[]byte("ideographiclowcircle\x00"), []byte("32A6\x00")}, {[]byte("ideographicmedicinecircle\x00"), []byte("32A9\x00")}, {[]byte("ideographicmetalparen\x00"), []byte("322E\x00")}, {[]byte("ideographicmoonparen\x00"), []byte("322A\x00")}, {[]byte("ideographicnameparen\x00"), []byte("3234\x00")}, {[]byte("ideographicperiod\x00"), []byte("3002\x00")}, {[]byte("ideographicprintcircle\x00"), []byte("329E\x00")}, {[]byte("ideographicreachparen\x00"), []byte("3243\x00")}, {[]byte("ideographicrepresentparen\x00"), []byte("3239\x00")}, {[]byte("ideographicresourceparen\x00"), []byte("323E\x00")}, {[]byte("ideographicrightcircle\x00"), []byte("32A8\x00")}, {[]byte("ideographicsecretcircle\x00"), []byte("3299\x00")}, {[]byte("ideographicselfparen\x00"), []byte("3242\x00")}, {[]byte("ideographicsocietyparen\x00"), []byte("3233\x00")}, {[]byte("ideographicspace\x00"), []byte("3000\x00")}, {[]byte("ideographicspecialparen\x00"), []byte("3235\x00")}, {[]byte("ideographicstockparen\x00"), []byte("3231\x00")}, {[]byte("ideographicstudyparen\x00"), []byte("323B\x00")}, {[]byte("ideographicsunparen\x00"), []byte("3230\x00")}, {[]byte("ideographicsuperviseparen\x00"), []byte("323C\x00")}, {[]byte("ideographicwaterparen\x00"), []byte("322C\x00")}, {[]byte("ideographicwoodparen\x00"), []byte("322D\x00")}, {[]byte("ideographiczero\x00"), []byte("3007\x00")}, {[]byte("ideographmetalcircle\x00"), []byte("328E\x00")}, {[]byte("ideographmooncircle\x00"), []byte("328A\x00")}, {[]byte("ideographnamecircle\x00"), []byte("3294\x00")}, {[]byte("ideographsuncircle\x00"), []byte("3290\x00")}, {[]byte("ideographwatercircle\x00"), []byte("328C\x00")}, {[]byte("ideographwoodcircle\x00"), []byte("328D\x00")}, {[]byte("ideva\x00"), []byte("0907\x00")}, {[]byte("idieresis\x00"), []byte("00EF\x00")}, {[]byte("idieresisacute\x00"), []byte("1E2F\x00")}, {[]byte("idieresiscyrillic\x00"), []byte("04E5\x00")}, {[]byte("idotbelow\x00"), []byte("1ECB\x00")}, {[]byte("iebrevecyrillic\x00"), []byte("04D7\x00")}, {[]byte("iecyrillic\x00"), []byte("0435\x00")}, {[]byte("ieungacirclekorean\x00"), []byte("3275\x00")}, {[]byte("ieungaparenkorean\x00"), []byte("3215\x00")}, {[]byte("ieungcirclekorean\x00"), []byte("3267\x00")}, {[]byte("ieungkorean\x00"), []byte("3147\x00")}, {[]byte("ieungparenkorean\x00"), []byte("3207\x00")}, {[]byte("igrave\x00"), []byte("00EC\x00")}, {[]byte("igujarati\x00"), []byte("0A87\x00")}, {[]byte("igurmukhi\x00"), []byte("0A07\x00")}, {[]byte("ihiragana\x00"), []byte("3044\x00")}, {[]byte("ihookabove\x00"), []byte("1EC9\x00")}, {[]byte("iibengali\x00"), []byte("0988\x00")}, {[]byte("iicyrillic\x00"), []byte("0438\x00")}, {[]byte("iideva\x00"), []byte("0908\x00")}, {[]byte("iigujarati\x00"), []byte("0A88\x00")}, {[]byte("iigurmukhi\x00"), []byte("0A08\x00")}, {[]byte("iimatragurmukhi\x00"), []byte("0A40\x00")}, {[]byte("iinvertedbreve\x00"), []byte("020B\x00")}, {[]byte("iishortcyrillic\x00"), []byte("0439\x00")}, {[]byte("iivowelsignbengali\x00"), []byte("09C0\x00")}, {[]byte("iivowelsigndeva\x00"), []byte("0940\x00")}, {[]byte("iivowelsigngujarati\x00"), []byte("0AC0\x00")}, {[]byte("ij\x00"), []byte("0133\x00")}, {[]byte("ikatakana\x00"), []byte("30A4\x00")}, {[]byte("ikatakanahalfwidth\x00"), []byte("FF72\x00")}, {[]byte("ikorean\x00"), []byte("3163\x00")}, {[]byte("ilde\x00"), []byte("02DC\x00")}, {[]byte("iluyhebrew\x00"), []byte("05AC\x00")}, {[]byte("imacron\x00"), []byte("012B\x00")}, {[]byte("imacroncyrillic\x00"), []byte("04E3\x00")}, {[]byte("imageorapproximatelyequal\x00"), []byte("2253\x00")}, {[]byte("imatragurmukhi\x00"), []byte("0A3F\x00")}, {[]byte("imonospace\x00"), []byte("FF49\x00")}, {[]byte("increment\x00"), []byte("2206\x00")}, {[]byte("infinity\x00"), []byte("221E\x00")}, {[]byte("iniarmenian\x00"), []byte("056B\x00")}, {[]byte("integral\x00"), []byte("222B\x00")}, {[]byte("integralbottom\x00"), []byte("2321\x00")}, {[]byte("integralbt\x00"), []byte("2321\x00")}, {[]byte("integralex\x00"), []byte("F8F5\x00")}, {[]byte("integraltop\x00"), []byte("2320\x00")}, {[]byte("integraltp\x00"), []byte("2320\x00")}, {[]byte("intersection\x00"), []byte("2229\x00")}, {[]byte("intisquare\x00"), []byte("3305\x00")}, {[]byte("invbullet\x00"), []byte("25D8\x00")}, {[]byte("invcircle\x00"), []byte("25D9\x00")}, {[]byte("invsmileface\x00"), []byte("263B\x00")}, {[]byte("iocyrillic\x00"), []byte("0451\x00")}, {[]byte("iogonek\x00"), []byte("012F\x00")}, {[]byte("iota\x00"), []byte("03B9\x00")}, {[]byte("iotadieresis\x00"), []byte("03CA\x00")}, {[]byte("iotadieresistonos\x00"), []byte("0390\x00")}, {[]byte("iotalatin\x00"), []byte("0269\x00")}, {[]byte("iotatonos\x00"), []byte("03AF\x00")}, {[]byte("iparen\x00"), []byte("24A4\x00")}, {[]byte("irigurmukhi\x00"), []byte("0A72\x00")}, {[]byte("ismallhiragana\x00"), []byte("3043\x00")}, {[]byte("ismallkatakana\x00"), []byte("30A3\x00")}, {[]byte("ismallkatakanahalfwidth\x00"), []byte("FF68\x00")}, {[]byte("issharbengali\x00"), []byte("09FA\x00")}, {[]byte("istroke\x00"), []byte("0268\x00")}, {[]byte("isuperior\x00"), []byte("F6ED\x00")}, {[]byte("iterationhiragana\x00"), []byte("309D\x00")}, {[]byte("iterationkatakana\x00"), []byte("30FD\x00")}, {[]byte("itilde\x00"), []byte("0129\x00")}, {[]byte("itildebelow\x00"), []byte("1E2D\x00")}, {[]byte("iubopomofo\x00"), []byte("3129\x00")}, {[]byte("iucyrillic\x00"), []byte("044E\x00")}, {[]byte("ivowelsignbengali\x00"), []byte("09BF\x00")}, {[]byte("ivowelsigndeva\x00"), []byte("093F\x00")}, {[]byte("ivowelsigngujarati\x00"), []byte("0ABF\x00")}, {[]byte("izhitsacyrillic\x00"), []byte("0475\x00")}, {[]byte("izhitsadblgravecyrillic\x00"), []byte("0477\x00")}, {[]byte("j\x00"), []byte("006A\x00")}, {[]byte("jaarmenian\x00"), []byte("0571\x00")}, {[]byte("jabengali\x00"), []byte("099C\x00")}, {[]byte("jadeva\x00"), []byte("091C\x00")}, {[]byte("jagujarati\x00"), []byte("0A9C\x00")}, {[]byte("jagurmukhi\x00"), []byte("0A1C\x00")}, {[]byte("jbopomofo\x00"), []byte("3110\x00")}, {[]byte("jcaron\x00"), []byte("01F0\x00")}, {[]byte("jcircle\x00"), []byte("24D9\x00")}, {[]byte("jcircumflex\x00"), []byte("0135\x00")}, {[]byte("jcrossedtail\x00"), []byte("029D\x00")}, {[]byte("jdotlessstroke\x00"), []byte("025F\x00")}, {[]byte("jecyrillic\x00"), []byte("0458\x00")}, {[]byte("jeemarabic\x00"), []byte("062C\x00")}, {[]byte("jeemfinalarabic\x00"), []byte("FE9E\x00")}, {[]byte("jeeminitialarabic\x00"), []byte("FE9F\x00")}, {[]byte("jeemmedialarabic\x00"), []byte("FEA0\x00")}, {[]byte("jeharabic\x00"), []byte("0698\x00")}, {[]byte("jehfinalarabic\x00"), []byte("FB8B\x00")}, {[]byte("jhabengali\x00"), []byte("099D\x00")}, {[]byte("jhadeva\x00"), []byte("091D\x00")}, {[]byte("jhagujarati\x00"), []byte("0A9D\x00")}, {[]byte("jhagurmukhi\x00"), []byte("0A1D\x00")}, {[]byte("jheharmenian\x00"), []byte("057B\x00")}, {[]byte("jis\x00"), []byte("3004\x00")}, {[]byte("jmonospace\x00"), []byte("FF4A\x00")}, {[]byte("jparen\x00"), []byte("24A5\x00")}, {[]byte("jsuperior\x00"), []byte("02B2\x00")}, {[]byte("k\x00"), []byte("006B\x00")}, {[]byte("kabashkircyrillic\x00"), []byte("04A1\x00")}, {[]byte("kabengali\x00"), []byte("0995\x00")}, {[]byte("kacute\x00"), []byte("1E31\x00")}, {[]byte("kacyrillic\x00"), []byte("043A\x00")}, {[]byte("kadescendercyrillic\x00"), []byte("049B\x00")}, {[]byte("kadeva\x00"), []byte("0915\x00")}, {[]byte("kaf\x00"), []byte("05DB\x00")}, {[]byte("kafarabic\x00"), []byte("0643\x00")}, {[]byte("kafdagesh\x00"), []byte("FB3B\x00")}, {[]byte("kafdageshhebrew\x00"), []byte("FB3B\x00")}, {[]byte("kaffinalarabic\x00"), []byte("FEDA\x00")}, {[]byte("kafhebrew\x00"), []byte("05DB\x00")}, {[]byte("kafinitialarabic\x00"), []byte("FEDB\x00")}, {[]byte("kafmedialarabic\x00"), []byte("FEDC\x00")}, {[]byte("kafrafehebrew\x00"), []byte("FB4D\x00")}, {[]byte("kagujarati\x00"), []byte("0A95\x00")}, {[]byte("kagurmukhi\x00"), []byte("0A15\x00")}, {[]byte("kahiragana\x00"), []byte("304B\x00")}, {[]byte("kahookcyrillic\x00"), []byte("04C4\x00")}, {[]byte("kakatakana\x00"), []byte("30AB\x00")}, {[]byte("kakatakanahalfwidth\x00"), []byte("FF76\x00")}, {[]byte("kappa\x00"), []byte("03BA\x00")}, {[]byte("kappasymbolgreek\x00"), []byte("03F0\x00")}, {[]byte("kapyeounmieumkorean\x00"), []byte("3171\x00")}, {[]byte("kapyeounphieuphkorean\x00"), []byte("3184\x00")}, {[]byte("kapyeounpieupkorean\x00"), []byte("3178\x00")}, {[]byte("kapyeounssangpieupkorean\x00"), []byte("3179\x00")}, {[]byte("karoriisquare\x00"), []byte("330D\x00")}, {[]byte("kashidaautoarabic\x00"), []byte("0640\x00")}, {[]byte("kashidaautonosidebearingarabic\x00"), []byte("0640\x00")}, {[]byte("kasmallkatakana\x00"), []byte("30F5\x00")}, {[]byte("kasquare\x00"), []byte("3384\x00")}, {[]byte("kasraarabic\x00"), []byte("0650\x00")}, {[]byte("kasratanarabic\x00"), []byte("064D\x00")}, {[]byte("kastrokecyrillic\x00"), []byte("049F\x00")}, {[]byte("katahiraprolongmarkhalfwidth\x00"), []byte("FF70\x00")}, {[]byte("kaverticalstrokecyrillic\x00"), []byte("049D\x00")}, {[]byte("kbopomofo\x00"), []byte("310E\x00")}, {[]byte("kcalsquare\x00"), []byte("3389\x00")}, {[]byte("kcaron\x00"), []byte("01E9\x00")}, {[]byte("kcedilla\x00"), []byte("0137\x00")}, {[]byte("kcircle\x00"), []byte("24DA\x00")}, {[]byte("kcommaaccent\x00"), []byte("0137\x00")}, {[]byte("kdotbelow\x00"), []byte("1E33\x00")}, {[]byte("keharmenian\x00"), []byte("0584\x00")}, {[]byte("kehiragana\x00"), []byte("3051\x00")}, {[]byte("kekatakana\x00"), []byte("30B1\x00")}, {[]byte("kekatakanahalfwidth\x00"), []byte("FF79\x00")}, {[]byte("kenarmenian\x00"), []byte("056F\x00")}, {[]byte("kesmallkatakana\x00"), []byte("30F6\x00")}, {[]byte("kgreenlandic\x00"), []byte("0138\x00")}, {[]byte("khabengali\x00"), []byte("0996\x00")}, {[]byte("khacyrillic\x00"), []byte("0445\x00")}, {[]byte("khadeva\x00"), []byte("0916\x00")}, {[]byte("khagujarati\x00"), []byte("0A96\x00")}, {[]byte("khagurmukhi\x00"), []byte("0A16\x00")}, {[]byte("khaharabic\x00"), []byte("062E\x00")}, {[]byte("khahfinalarabic\x00"), []byte("FEA6\x00")}, {[]byte("khahinitialarabic\x00"), []byte("FEA7\x00")}, {[]byte("khahmedialarabic\x00"), []byte("FEA8\x00")}, {[]byte("kheicoptic\x00"), []byte("03E7\x00")}, {[]byte("khhadeva\x00"), []byte("0959\x00")}, {[]byte("khhagurmukhi\x00"), []byte("0A59\x00")}, {[]byte("khieukhacirclekorean\x00"), []byte("3278\x00")}, {[]byte("khieukhaparenkorean\x00"), []byte("3218\x00")}, {[]byte("khieukhcirclekorean\x00"), []byte("326A\x00")}, {[]byte("khieukhkorean\x00"), []byte("314B\x00")}, {[]byte("khieukhparenkorean\x00"), []byte("320A\x00")}, {[]byte("khokhaithai\x00"), []byte("0E02\x00")}, {[]byte("khokhonthai\x00"), []byte("0E05\x00")}, {[]byte("khokhuatthai\x00"), []byte("0E03\x00")}, {[]byte("khokhwaithai\x00"), []byte("0E04\x00")}, {[]byte("khomutthai\x00"), []byte("0E5B\x00")}, {[]byte("khook\x00"), []byte("0199\x00")}, {[]byte("khorakhangthai\x00"), []byte("0E06\x00")}, {[]byte("khzsquare\x00"), []byte("3391\x00")}, {[]byte("kihiragana\x00"), []byte("304D\x00")}, {[]byte("kikatakana\x00"), []byte("30AD\x00")}, {[]byte("kikatakanahalfwidth\x00"), []byte("FF77\x00")}, {[]byte("kiroguramusquare\x00"), []byte("3315\x00")}, {[]byte("kiromeetorusquare\x00"), []byte("3316\x00")}, {[]byte("kirosquare\x00"), []byte("3314\x00")}, {[]byte("kiyeokacirclekorean\x00"), []byte("326E\x00")}, {[]byte("kiyeokaparenkorean\x00"), []byte("320E\x00")}, {[]byte("kiyeokcirclekorean\x00"), []byte("3260\x00")}, {[]byte("kiyeokkorean\x00"), []byte("3131\x00")}, {[]byte("kiyeokparenkorean\x00"), []byte("3200\x00")}, {[]byte("kiyeoksioskorean\x00"), []byte("3133\x00")}, {[]byte("kjecyrillic\x00"), []byte("045C\x00")}, {[]byte("klinebelow\x00"), []byte("1E35\x00")}, {[]byte("klsquare\x00"), []byte("3398\x00")}, {[]byte("kmcubedsquare\x00"), []byte("33A6\x00")}, {[]byte("kmonospace\x00"), []byte("FF4B\x00")}, {[]byte("kmsquaredsquare\x00"), []byte("33A2\x00")}, {[]byte("kohiragana\x00"), []byte("3053\x00")}, {[]byte("kohmsquare\x00"), []byte("33C0\x00")}, {[]byte("kokaithai\x00"), []byte("0E01\x00")}, {[]byte("kokatakana\x00"), []byte("30B3\x00")}, {[]byte("kokatakanahalfwidth\x00"), []byte("FF7A\x00")}, {[]byte("kooposquare\x00"), []byte("331E\x00")}, {[]byte("koppacyrillic\x00"), []byte("0481\x00")}, {[]byte("koreanstandardsymbol\x00"), []byte("327F\x00")}, {[]byte("koroniscmb\x00"), []byte("0343\x00")}, {[]byte("kparen\x00"), []byte("24A6\x00")}, {[]byte("kpasquare\x00"), []byte("33AA\x00")}, {[]byte("ksicyrillic\x00"), []byte("046F\x00")}, {[]byte("ktsquare\x00"), []byte("33CF\x00")}, {[]byte("kturned\x00"), []byte("029E\x00")}, {[]byte("kuhiragana\x00"), []byte("304F\x00")}, {[]byte("kukatakana\x00"), []byte("30AF\x00")}, {[]byte("kukatakanahalfwidth\x00"), []byte("FF78\x00")}, {[]byte("kvsquare\x00"), []byte("33B8\x00")}, {[]byte("kwsquare\x00"), []byte("33BE\x00")}, {[]byte("l\x00"), []byte("006C\x00")}, {[]byte("labengali\x00"), []byte("09B2\x00")}, {[]byte("lacute\x00"), []byte("013A\x00")}, {[]byte("ladeva\x00"), []byte("0932\x00")}, {[]byte("lagujarati\x00"), []byte("0AB2\x00")}, {[]byte("lagurmukhi\x00"), []byte("0A32\x00")}, {[]byte("lakkhangyaothai\x00"), []byte("0E45\x00")}, {[]byte("lamaleffinalarabic\x00"), []byte("FEFC\x00")}, {[]byte("lamalefhamzaabovefinalarabic\x00"), []byte("FEF8\x00")}, {[]byte("lamalefhamzaaboveisolatedarabic\x00"), []byte("FEF7\x00")}, {[]byte("lamalefhamzabelowfinalarabic\x00"), []byte("FEFA\x00")}, {[]byte("lamalefhamzabelowisolatedarabic\x00"), []byte("FEF9\x00")}, {[]byte("lamalefisolatedarabic\x00"), []byte("FEFB\x00")}, {[]byte("lamalefmaddaabovefinalarabic\x00"), []byte("FEF6\x00")}, {[]byte("lamalefmaddaaboveisolatedarabic\x00"), []byte("FEF5\x00")}, {[]byte("lamarabic\x00"), []byte("0644\x00")}, {[]byte("lambda\x00"), []byte("03BB\x00")}, {[]byte("lambdastroke\x00"), []byte("019B\x00")}, {[]byte("lamed\x00"), []byte("05DC\x00")}, {[]byte("lameddagesh\x00"), []byte("FB3C\x00")}, {[]byte("lameddageshhebrew\x00"), []byte("FB3C\x00")}, {[]byte("lamedhebrew\x00"), []byte("05DC\x00")}, {[]byte("lamedholam\x00"), []byte("05DC 05B9\x00")}, {[]byte("lamedholamdagesh\x00"), []byte("05DC 05B9 05BC\x00")}, {[]byte("lamedholamdageshhebrew\x00"), []byte("05DC 05B9 05BC\x00")}, {[]byte("lamedholamhebrew\x00"), []byte("05DC 05B9\x00")}, {[]byte("lamfinalarabic\x00"), []byte("FEDE\x00")}, {[]byte("lamhahinitialarabic\x00"), []byte("FCCA\x00")}, {[]byte("laminitialarabic\x00"), []byte("FEDF\x00")}, {[]byte("lamjeeminitialarabic\x00"), []byte("FCC9\x00")}, {[]byte("lamkhahinitialarabic\x00"), []byte("FCCB\x00")}, {[]byte("lamlamhehisolatedarabic\x00"), []byte("FDF2\x00")}, {[]byte("lammedialarabic\x00"), []byte("FEE0\x00")}, {[]byte("lammeemhahinitialarabic\x00"), []byte("FD88\x00")}, {[]byte("lammeeminitialarabic\x00"), []byte("FCCC\x00")}, {[]byte("lammeemjeeminitialarabic\x00"), []byte("FEDF FEE4 FEA0\x00")}, {[]byte("lammeemkhahinitialarabic\x00"), []byte("FEDF FEE4 FEA8\x00")}, {[]byte("largecircle\x00"), []byte("25EF\x00")}, {[]byte("lbar\x00"), []byte("019A\x00")}, {[]byte("lbelt\x00"), []byte("026C\x00")}, {[]byte("lbopomofo\x00"), []byte("310C\x00")}, {[]byte("lcaron\x00"), []byte("013E\x00")}, {[]byte("lcedilla\x00"), []byte("013C\x00")}, {[]byte("lcircle\x00"), []byte("24DB\x00")}, {[]byte("lcircumflexbelow\x00"), []byte("1E3D\x00")}, {[]byte("lcommaaccent\x00"), []byte("013C\x00")}, {[]byte("ldot\x00"), []byte("0140\x00")}, {[]byte("ldotaccent\x00"), []byte("0140\x00")}, {[]byte("ldotbelow\x00"), []byte("1E37\x00")}, {[]byte("ldotbelowmacron\x00"), []byte("1E39\x00")}, {[]byte("leftangleabovecmb\x00"), []byte("031A\x00")}, {[]byte("lefttackbelowcmb\x00"), []byte("0318\x00")}, {[]byte("less\x00"), []byte("003C\x00")}, {[]byte("lessequal\x00"), []byte("2264\x00")}, {[]byte("lessequalorgreater\x00"), []byte("22DA\x00")}, {[]byte("lessmonospace\x00"), []byte("FF1C\x00")}, {[]byte("lessorequivalent\x00"), []byte("2272\x00")}, {[]byte("lessorgreater\x00"), []byte("2276\x00")}, {[]byte("lessoverequal\x00"), []byte("2266\x00")}, {[]byte("lesssmall\x00"), []byte("FE64\x00")}, {[]byte("lezh\x00"), []byte("026E\x00")}, {[]byte("lfblock\x00"), []byte("258C\x00")}, {[]byte("lhookretroflex\x00"), []byte("026D\x00")}, {[]byte("lira\x00"), []byte("20A4\x00")}, {[]byte("liwnarmenian\x00"), []byte("056C\x00")}, {[]byte("lj\x00"), []byte("01C9\x00")}, {[]byte("ljecyrillic\x00"), []byte("0459\x00")}, {[]byte("ll\x00"), []byte("F6C0\x00")}, {[]byte("lladeva\x00"), []byte("0933\x00")}, {[]byte("llagujarati\x00"), []byte("0AB3\x00")}, {[]byte("llinebelow\x00"), []byte("1E3B\x00")}, {[]byte("llladeva\x00"), []byte("0934\x00")}, {[]byte("llvocalicbengali\x00"), []byte("09E1\x00")}, {[]byte("llvocalicdeva\x00"), []byte("0961\x00")}, {[]byte("llvocalicvowelsignbengali\x00"), []byte("09E3\x00")}, {[]byte("llvocalicvowelsigndeva\x00"), []byte("0963\x00")}, {[]byte("lmiddletilde\x00"), []byte("026B\x00")}, {[]byte("lmonospace\x00"), []byte("FF4C\x00")}, {[]byte("lmsquare\x00"), []byte("33D0\x00")}, {[]byte("lochulathai\x00"), []byte("0E2C\x00")}, {[]byte("logicaland\x00"), []byte("2227\x00")}, {[]byte("logicalnot\x00"), []byte("00AC\x00")}, {[]byte("logicalnotreversed\x00"), []byte("2310\x00")}, {[]byte("logicalor\x00"), []byte("2228\x00")}, {[]byte("lolingthai\x00"), []byte("0E25\x00")}, {[]byte("longs\x00"), []byte("017F\x00")}, {[]byte("lowlinecenterline\x00"), []byte("FE4E\x00")}, {[]byte("lowlinecmb\x00"), []byte("0332\x00")}, {[]byte("lowlinedashed\x00"), []byte("FE4D\x00")}, {[]byte("lozenge\x00"), []byte("25CA\x00")}, {[]byte("lparen\x00"), []byte("24A7\x00")}, {[]byte("lslash\x00"), []byte("0142\x00")}, {[]byte("lsquare\x00"), []byte("2113\x00")}, {[]byte("lsuperior\x00"), []byte("F6EE\x00")}, {[]byte("ltshade\x00"), []byte("2591\x00")}, {[]byte("luthai\x00"), []byte("0E26\x00")}, {[]byte("lvocalicbengali\x00"), []byte("098C\x00")}, {[]byte("lvocalicdeva\x00"), []byte("090C\x00")}, {[]byte("lvocalicvowelsignbengali\x00"), []byte("09E2\x00")}, {[]byte("lvocalicvowelsigndeva\x00"), []byte("0962\x00")}, {[]byte("lxsquare\x00"), []byte("33D3\x00")}, {[]byte("m\x00"), []byte("006D\x00")}, {[]byte("mabengali\x00"), []byte("09AE\x00")}, {[]byte("macron\x00"), []byte("00AF\x00")}, {[]byte("macronbelowcmb\x00"), []byte("0331\x00")}, {[]byte("macroncmb\x00"), []byte("0304\x00")}, {[]byte("macronlowmod\x00"), []byte("02CD\x00")}, {[]byte("macronmonospace\x00"), []byte("FFE3\x00")}, {[]byte("macute\x00"), []byte("1E3F\x00")}, {[]byte("madeva\x00"), []byte("092E\x00")}, {[]byte("magujarati\x00"), []byte("0AAE\x00")}, {[]byte("magurmukhi\x00"), []byte("0A2E\x00")}, {[]byte("mahapakhhebrew\x00"), []byte("05A4\x00")}, {[]byte("mahapakhlefthebrew\x00"), []byte("05A4\x00")}, {[]byte("mahiragana\x00"), []byte("307E\x00")}, {[]byte("maichattawalowleftthai\x00"), []byte("F895\x00")}, {[]byte("maichattawalowrightthai\x00"), []byte("F894\x00")}, {[]byte("maichattawathai\x00"), []byte("0E4B\x00")}, {[]byte("maichattawaupperleftthai\x00"), []byte("F893\x00")}, {[]byte("maieklowleftthai\x00"), []byte("F88C\x00")}, {[]byte("maieklowrightthai\x00"), []byte("F88B\x00")}, {[]byte("maiekthai\x00"), []byte("0E48\x00")}, {[]byte("maiekupperleftthai\x00"), []byte("F88A\x00")}, {[]byte("maihanakatleftthai\x00"), []byte("F884\x00")}, {[]byte("maihanakatthai\x00"), []byte("0E31\x00")}, {[]byte("maitaikhuleftthai\x00"), []byte("F889\x00")}, {[]byte("maitaikhuthai\x00"), []byte("0E47\x00")}, {[]byte("maitholowleftthai\x00"), []byte("F88F\x00")}, {[]byte("maitholowrightthai\x00"), []byte("F88E\x00")}, {[]byte("maithothai\x00"), []byte("0E49\x00")}, {[]byte("maithoupperleftthai\x00"), []byte("F88D\x00")}, {[]byte("maitrilowleftthai\x00"), []byte("F892\x00")}, {[]byte("maitrilowrightthai\x00"), []byte("F891\x00")}, {[]byte("maitrithai\x00"), []byte("0E4A\x00")}, {[]byte("maitriupperleftthai\x00"), []byte("F890\x00")}, {[]byte("maiyamokthai\x00"), []byte("0E46\x00")}, {[]byte("makatakana\x00"), []byte("30DE\x00")}, {[]byte("makatakanahalfwidth\x00"), []byte("FF8F\x00")}, {[]byte("male\x00"), []byte("2642\x00")}, {[]byte("mansyonsquare\x00"), []byte("3347\x00")}, {[]byte("maqafhebrew\x00"), []byte("05BE\x00")}, {[]byte("mars\x00"), []byte("2642\x00")}, {[]byte("masoracirclehebrew\x00"), []byte("05AF\x00")}, {[]byte("masquare\x00"), []byte("3383\x00")}, {[]byte("mbopomofo\x00"), []byte("3107\x00")}, {[]byte("mbsquare\x00"), []byte("33D4\x00")}, {[]byte("mcircle\x00"), []byte("24DC\x00")}, {[]byte("mcubedsquare\x00"), []byte("33A5\x00")}, {[]byte("mdotaccent\x00"), []byte("1E41\x00")}, {[]byte("mdotbelow\x00"), []byte("1E43\x00")}, {[]byte("meemarabic\x00"), []byte("0645\x00")}, {[]byte("meemfinalarabic\x00"), []byte("FEE2\x00")}, {[]byte("meeminitialarabic\x00"), []byte("FEE3\x00")}, {[]byte("meemmedialarabic\x00"), []byte("FEE4\x00")}, {[]byte("meemmeeminitialarabic\x00"), []byte("FCD1\x00")}, {[]byte("meemmeemisolatedarabic\x00"), []byte("FC48\x00")}, {[]byte("meetorusquare\x00"), []byte("334D\x00")}, {[]byte("mehiragana\x00"), []byte("3081\x00")}, {[]byte("meizierasquare\x00"), []byte("337E\x00")}, {[]byte("mekatakana\x00"), []byte("30E1\x00")}, {[]byte("mekatakanahalfwidth\x00"), []byte("FF92\x00")}, {[]byte("mem\x00"), []byte("05DE\x00")}, {[]byte("memdagesh\x00"), []byte("FB3E\x00")}, {[]byte("memdageshhebrew\x00"), []byte("FB3E\x00")}, {[]byte("memhebrew\x00"), []byte("05DE\x00")}, {[]byte("menarmenian\x00"), []byte("0574\x00")}, {[]byte("merkhahebrew\x00"), []byte("05A5\x00")}, {[]byte("merkhakefulahebrew\x00"), []byte("05A6\x00")}, {[]byte("merkhakefulalefthebrew\x00"), []byte("05A6\x00")}, {[]byte("merkhalefthebrew\x00"), []byte("05A5\x00")}, {[]byte("mhook\x00"), []byte("0271\x00")}, {[]byte("mhzsquare\x00"), []byte("3392\x00")}, {[]byte("middledotkatakanahalfwidth\x00"), []byte("FF65\x00")}, {[]byte("middot\x00"), []byte("00B7\x00")}, {[]byte("mieumacirclekorean\x00"), []byte("3272\x00")}, {[]byte("mieumaparenkorean\x00"), []byte("3212\x00")}, {[]byte("mieumcirclekorean\x00"), []byte("3264\x00")}, {[]byte("mieumkorean\x00"), []byte("3141\x00")}, {[]byte("mieumpansioskorean\x00"), []byte("3170\x00")}, {[]byte("mieumparenkorean\x00"), []byte("3204\x00")}, {[]byte("mieumpieupkorean\x00"), []byte("316E\x00")}, {[]byte("mieumsioskorean\x00"), []byte("316F\x00")}, {[]byte("mihiragana\x00"), []byte("307F\x00")}, {[]byte("mikatakana\x00"), []byte("30DF\x00")}, {[]byte("mikatakanahalfwidth\x00"), []byte("FF90\x00")}, {[]byte("minus\x00"), []byte("2212\x00")}, {[]byte("minusbelowcmb\x00"), []byte("0320\x00")}, {[]byte("minuscircle\x00"), []byte("2296\x00")}, {[]byte("minusmod\x00"), []byte("02D7\x00")}, {[]byte("minusplus\x00"), []byte("2213\x00")}, {[]byte("minute\x00"), []byte("2032\x00")}, {[]byte("miribaarusquare\x00"), []byte("334A\x00")}, {[]byte("mirisquare\x00"), []byte("3349\x00")}, {[]byte("mlonglegturned\x00"), []byte("0270\x00")}, {[]byte("mlsquare\x00"), []byte("3396\x00")}, {[]byte("mmcubedsquare\x00"), []byte("33A3\x00")}, {[]byte("mmonospace\x00"), []byte("FF4D\x00")}, {[]byte("mmsquaredsquare\x00"), []byte("339F\x00")}, {[]byte("mohiragana\x00"), []byte("3082\x00")}, {[]byte("mohmsquare\x00"), []byte("33C1\x00")}, {[]byte("mokatakana\x00"), []byte("30E2\x00")}, {[]byte("mokatakanahalfwidth\x00"), []byte("FF93\x00")}, {[]byte("molsquare\x00"), []byte("33D6\x00")}, {[]byte("momathai\x00"), []byte("0E21\x00")}, {[]byte("moverssquare\x00"), []byte("33A7\x00")}, {[]byte("moverssquaredsquare\x00"), []byte("33A8\x00")}, {[]byte("mparen\x00"), []byte("24A8\x00")}, {[]byte("mpasquare\x00"), []byte("33AB\x00")}, {[]byte("mssquare\x00"), []byte("33B3\x00")}, {[]byte("msuperior\x00"), []byte("F6EF\x00")}, {[]byte("mturned\x00"), []byte("026F\x00")}, {[]byte("mu\x00"), []byte("00B5\x00")}, {[]byte("mu1\x00"), []byte("00B5\x00")}, {[]byte("muasquare\x00"), []byte("3382\x00")}, {[]byte("muchgreater\x00"), []byte("226B\x00")}, {[]byte("muchless\x00"), []byte("226A\x00")}, {[]byte("mufsquare\x00"), []byte("338C\x00")}, {[]byte("mugreek\x00"), []byte("03BC\x00")}, {[]byte("mugsquare\x00"), []byte("338D\x00")}, {[]byte("muhiragana\x00"), []byte("3080\x00")}, {[]byte("mukatakana\x00"), []byte("30E0\x00")}, {[]byte("mukatakanahalfwidth\x00"), []byte("FF91\x00")}, {[]byte("mulsquare\x00"), []byte("3395\x00")}, {[]byte("multiply\x00"), []byte("00D7\x00")}, {[]byte("mumsquare\x00"), []byte("339B\x00")}, {[]byte("munahhebrew\x00"), []byte("05A3\x00")}, {[]byte("munahlefthebrew\x00"), []byte("05A3\x00")}, {[]byte("musicalnote\x00"), []byte("266A\x00")}, {[]byte("musicalnotedbl\x00"), []byte("266B\x00")}, {[]byte("musicflatsign\x00"), []byte("266D\x00")}, {[]byte("musicsharpsign\x00"), []byte("266F\x00")}, {[]byte("mussquare\x00"), []byte("33B2\x00")}, {[]byte("muvsquare\x00"), []byte("33B6\x00")}, {[]byte("muwsquare\x00"), []byte("33BC\x00")}, {[]byte("mvmegasquare\x00"), []byte("33B9\x00")}, {[]byte("mvsquare\x00"), []byte("33B7\x00")}, {[]byte("mwmegasquare\x00"), []byte("33BF\x00")}, {[]byte("mwsquare\x00"), []byte("33BD\x00")}, {[]byte("n\x00"), []byte("006E\x00")}, {[]byte("nabengali\x00"), []byte("09A8\x00")}, {[]byte("nabla\x00"), []byte("2207\x00")}, {[]byte("nacute\x00"), []byte("0144\x00")}, {[]byte("nadeva\x00"), []byte("0928\x00")}, {[]byte("nagujarati\x00"), []byte("0AA8\x00")}, {[]byte("nagurmukhi\x00"), []byte("0A28\x00")}, {[]byte("nahiragana\x00"), []byte("306A\x00")}, {[]byte("nakatakana\x00"), []byte("30CA\x00")}, {[]byte("nakatakanahalfwidth\x00"), []byte("FF85\x00")}, {[]byte("napostrophe\x00"), []byte("0149\x00")}, {[]byte("nasquare\x00"), []byte("3381\x00")}, {[]byte("nbopomofo\x00"), []byte("310B\x00")}, {[]byte("nbspace\x00"), []byte("00A0\x00")}, {[]byte("ncaron\x00"), []byte("0148\x00")}, {[]byte("ncedilla\x00"), []byte("0146\x00")}, {[]byte("ncircle\x00"), []byte("24DD\x00")}, {[]byte("ncircumflexbelow\x00"), []byte("1E4B\x00")}, {[]byte("ncommaaccent\x00"), []byte("0146\x00")}, {[]byte("ndotaccent\x00"), []byte("1E45\x00")}, {[]byte("ndotbelow\x00"), []byte("1E47\x00")}, {[]byte("nehiragana\x00"), []byte("306D\x00")}, {[]byte("nekatakana\x00"), []byte("30CD\x00")}, {[]byte("nekatakanahalfwidth\x00"), []byte("FF88\x00")}, {[]byte("newsheqelsign\x00"), []byte("20AA\x00")}, {[]byte("nfsquare\x00"), []byte("338B\x00")}, {[]byte("ngabengali\x00"), []byte("0999\x00")}, {[]byte("ngadeva\x00"), []byte("0919\x00")}, {[]byte("ngagujarati\x00"), []byte("0A99\x00")}, {[]byte("ngagurmukhi\x00"), []byte("0A19\x00")}, {[]byte("ngonguthai\x00"), []byte("0E07\x00")}, {[]byte("nhiragana\x00"), []byte("3093\x00")}, {[]byte("nhookleft\x00"), []byte("0272\x00")}, {[]byte("nhookretroflex\x00"), []byte("0273\x00")}, {[]byte("nieunacirclekorean\x00"), []byte("326F\x00")}, {[]byte("nieunaparenkorean\x00"), []byte("320F\x00")}, {[]byte("nieuncieuckorean\x00"), []byte("3135\x00")}, {[]byte("nieuncirclekorean\x00"), []byte("3261\x00")}, {[]byte("nieunhieuhkorean\x00"), []byte("3136\x00")}, {[]byte("nieunkorean\x00"), []byte("3134\x00")}, {[]byte("nieunpansioskorean\x00"), []byte("3168\x00")}, {[]byte("nieunparenkorean\x00"), []byte("3201\x00")}, {[]byte("nieunsioskorean\x00"), []byte("3167\x00")}, {[]byte("nieuntikeutkorean\x00"), []byte("3166\x00")}, {[]byte("nihiragana\x00"), []byte("306B\x00")}, {[]byte("nikatakana\x00"), []byte("30CB\x00")}, {[]byte("nikatakanahalfwidth\x00"), []byte("FF86\x00")}, {[]byte("nikhahitleftthai\x00"), []byte("F899\x00")}, {[]byte("nikhahitthai\x00"), []byte("0E4D\x00")}, {[]byte("nine\x00"), []byte("0039\x00")}, {[]byte("ninearabic\x00"), []byte("0669\x00")}, {[]byte("ninebengali\x00"), []byte("09EF\x00")}, {[]byte("ninecircle\x00"), []byte("2468\x00")}, {[]byte("ninecircleinversesansserif\x00"), []byte("2792\x00")}, {[]byte("ninedeva\x00"), []byte("096F\x00")}, {[]byte("ninegujarati\x00"), []byte("0AEF\x00")}, {[]byte("ninegurmukhi\x00"), []byte("0A6F\x00")}, {[]byte("ninehackarabic\x00"), []byte("0669\x00")}, {[]byte("ninehangzhou\x00"), []byte("3029\x00")}, {[]byte("nineideographicparen\x00"), []byte("3228\x00")}, {[]byte("nineinferior\x00"), []byte("2089\x00")}, {[]byte("ninemonospace\x00"), []byte("FF19\x00")}, {[]byte("nineoldstyle\x00"), []byte("F739\x00")}, {[]byte("nineparen\x00"), []byte("247C\x00")}, {[]byte("nineperiod\x00"), []byte("2490\x00")}, {[]byte("ninepersian\x00"), []byte("06F9\x00")}, {[]byte("nineroman\x00"), []byte("2178\x00")}, {[]byte("ninesuperior\x00"), []byte("2079\x00")}, {[]byte("nineteencircle\x00"), []byte("2472\x00")}, {[]byte("nineteenparen\x00"), []byte("2486\x00")}, {[]byte("nineteenperiod\x00"), []byte("249A\x00")}, {[]byte("ninethai\x00"), []byte("0E59\x00")}, {[]byte("nj\x00"), []byte("01CC\x00")}, {[]byte("njecyrillic\x00"), []byte("045A\x00")}, {[]byte("nkatakana\x00"), []byte("30F3\x00")}, {[]byte("nkatakanahalfwidth\x00"), []byte("FF9D\x00")}, {[]byte("nlegrightlong\x00"), []byte("019E\x00")}, {[]byte("nlinebelow\x00"), []byte("1E49\x00")}, {[]byte("nmonospace\x00"), []byte("FF4E\x00")}, {[]byte("nmsquare\x00"), []byte("339A\x00")}, {[]byte("nnabengali\x00"), []byte("09A3\x00")}, {[]byte("nnadeva\x00"), []byte("0923\x00")}, {[]byte("nnagujarati\x00"), []byte("0AA3\x00")}, {[]byte("nnagurmukhi\x00"), []byte("0A23\x00")}, {[]byte("nnnadeva\x00"), []byte("0929\x00")}, {[]byte("nohiragana\x00"), []byte("306E\x00")}, {[]byte("nokatakana\x00"), []byte("30CE\x00")}, {[]byte("nokatakanahalfwidth\x00"), []byte("FF89\x00")}, {[]byte("nonbreakingspace\x00"), []byte("00A0\x00")}, {[]byte("nonenthai\x00"), []byte("0E13\x00")}, {[]byte("nonuthai\x00"), []byte("0E19\x00")}, {[]byte("noonarabic\x00"), []byte("0646\x00")}, {[]byte("noonfinalarabic\x00"), []byte("FEE6\x00")}, {[]byte("noonghunnaarabic\x00"), []byte("06BA\x00")}, {[]byte("noonghunnafinalarabic\x00"), []byte("FB9F\x00")}, {[]byte("noonhehinitialarabic\x00"), []byte("FEE7 FEEC\x00")}, {[]byte("nooninitialarabic\x00"), []byte("FEE7\x00")}, {[]byte("noonjeeminitialarabic\x00"), []byte("FCD2\x00")}, {[]byte("noonjeemisolatedarabic\x00"), []byte("FC4B\x00")}, {[]byte("noonmedialarabic\x00"), []byte("FEE8\x00")}, {[]byte("noonmeeminitialarabic\x00"), []byte("FCD5\x00")}, {[]byte("noonmeemisolatedarabic\x00"), []byte("FC4E\x00")}, {[]byte("noonnoonfinalarabic\x00"), []byte("FC8D\x00")}, {[]byte("notcontains\x00"), []byte("220C\x00")}, {[]byte("notelement\x00"), []byte("2209\x00")}, {[]byte("notelementof\x00"), []byte("2209\x00")}, {[]byte("notequal\x00"), []byte("2260\x00")}, {[]byte("notgreater\x00"), []byte("226F\x00")}, {[]byte("notgreaternorequal\x00"), []byte("2271\x00")}, {[]byte("notgreaternorless\x00"), []byte("2279\x00")}, {[]byte("notidentical\x00"), []byte("2262\x00")}, {[]byte("notless\x00"), []byte("226E\x00")}, {[]byte("notlessnorequal\x00"), []byte("2270\x00")}, {[]byte("notparallel\x00"), []byte("2226\x00")}, {[]byte("notprecedes\x00"), []byte("2280\x00")}, {[]byte("notsubset\x00"), []byte("2284\x00")}, {[]byte("notsucceeds\x00"), []byte("2281\x00")}, {[]byte("notsuperset\x00"), []byte("2285\x00")}, {[]byte("nowarmenian\x00"), []byte("0576\x00")}, {[]byte("nparen\x00"), []byte("24A9\x00")}, {[]byte("nssquare\x00"), []byte("33B1\x00")}, {[]byte("nsuperior\x00"), []byte("207F\x00")}, {[]byte("ntilde\x00"), []byte("00F1\x00")}, {[]byte("nu\x00"), []byte("03BD\x00")}, {[]byte("nuhiragana\x00"), []byte("306C\x00")}, {[]byte("nukatakana\x00"), []byte("30CC\x00")}, {[]byte("nukatakanahalfwidth\x00"), []byte("FF87\x00")}, {[]byte("nuktabengali\x00"), []byte("09BC\x00")}, {[]byte("nuktadeva\x00"), []byte("093C\x00")}, {[]byte("nuktagujarati\x00"), []byte("0ABC\x00")}, {[]byte("nuktagurmukhi\x00"), []byte("0A3C\x00")}, {[]byte("numbersign\x00"), []byte("0023\x00")}, {[]byte("numbersignmonospace\x00"), []byte("FF03\x00")}, {[]byte("numbersignsmall\x00"), []byte("FE5F\x00")}, {[]byte("numeralsigngreek\x00"), []byte("0374\x00")}, {[]byte("numeralsignlowergreek\x00"), []byte("0375\x00")}, {[]byte("numero\x00"), []byte("2116\x00")}, {[]byte("nun\x00"), []byte("05E0\x00")}, {[]byte("nundagesh\x00"), []byte("FB40\x00")}, {[]byte("nundageshhebrew\x00"), []byte("FB40\x00")}, {[]byte("nunhebrew\x00"), []byte("05E0\x00")}, {[]byte("nvsquare\x00"), []byte("33B5\x00")}, {[]byte("nwsquare\x00"), []byte("33BB\x00")}, {[]byte("nyabengali\x00"), []byte("099E\x00")}, {[]byte("nyadeva\x00"), []byte("091E\x00")}, {[]byte("nyagujarati\x00"), []byte("0A9E\x00")}, {[]byte("nyagurmukhi\x00"), []byte("0A1E\x00")}, {[]byte("o\x00"), []byte("006F\x00")}, {[]byte("oacute\x00"), []byte("00F3\x00")}, {[]byte("oangthai\x00"), []byte("0E2D\x00")}, {[]byte("obarred\x00"), []byte("0275\x00")}, {[]byte("obarredcyrillic\x00"), []byte("04E9\x00")}, {[]byte("obarreddieresiscyrillic\x00"), []byte("04EB\x00")}, {[]byte("obengali\x00"), []byte("0993\x00")}, {[]byte("obopomofo\x00"), []byte("311B\x00")}, {[]byte("obreve\x00"), []byte("014F\x00")}, {[]byte("ocandradeva\x00"), []byte("0911\x00")}, {[]byte("ocandragujarati\x00"), []byte("0A91\x00")}, {[]byte("ocandravowelsigndeva\x00"), []byte("0949\x00")}, {[]byte("ocandravowelsigngujarati\x00"), []byte("0AC9\x00")}, {[]byte("ocaron\x00"), []byte("01D2\x00")}, {[]byte("ocircle\x00"), []byte("24DE\x00")}, {[]byte("ocircumflex\x00"), []byte("00F4\x00")}, {[]byte("ocircumflexacute\x00"), []byte("1ED1\x00")}, {[]byte("ocircumflexdotbelow\x00"), []byte("1ED9\x00")}, {[]byte("ocircumflexgrave\x00"), []byte("1ED3\x00")}, {[]byte("ocircumflexhookabove\x00"), []byte("1ED5\x00")}, {[]byte("ocircumflextilde\x00"), []byte("1ED7\x00")}, {[]byte("ocyrillic\x00"), []byte("043E\x00")}, {[]byte("odblacute\x00"), []byte("0151\x00")}, {[]byte("odblgrave\x00"), []byte("020D\x00")}, {[]byte("odeva\x00"), []byte("0913\x00")}, {[]byte("odieresis\x00"), []byte("00F6\x00")}, {[]byte("odieresiscyrillic\x00"), []byte("04E7\x00")}, {[]byte("odotbelow\x00"), []byte("1ECD\x00")}, {[]byte("oe\x00"), []byte("0153\x00")}, {[]byte("oekorean\x00"), []byte("315A\x00")}, {[]byte("ogonek\x00"), []byte("02DB\x00")}, {[]byte("ogonekcmb\x00"), []byte("0328\x00")}, {[]byte("ograve\x00"), []byte("00F2\x00")}, {[]byte("ogujarati\x00"), []byte("0A93\x00")}, {[]byte("oharmenian\x00"), []byte("0585\x00")}, {[]byte("ohiragana\x00"), []byte("304A\x00")}, {[]byte("ohookabove\x00"), []byte("1ECF\x00")}, {[]byte("ohorn\x00"), []byte("01A1\x00")}, {[]byte("ohornacute\x00"), []byte("1EDB\x00")}, {[]byte("ohorndotbelow\x00"), []byte("1EE3\x00")}, {[]byte("ohorngrave\x00"), []byte("1EDD\x00")}, {[]byte("ohornhookabove\x00"), []byte("1EDF\x00")}, {[]byte("ohorntilde\x00"), []byte("1EE1\x00")}, {[]byte("ohungarumlaut\x00"), []byte("0151\x00")}, {[]byte("oi\x00"), []byte("01A3\x00")}, {[]byte("oinvertedbreve\x00"), []byte("020F\x00")}, {[]byte("okatakana\x00"), []byte("30AA\x00")}, {[]byte("okatakanahalfwidth\x00"), []byte("FF75\x00")}, {[]byte("okorean\x00"), []byte("3157\x00")}, {[]byte("olehebrew\x00"), []byte("05AB\x00")}, {[]byte("omacron\x00"), []byte("014D\x00")}, {[]byte("omacronacute\x00"), []byte("1E53\x00")}, {[]byte("omacrongrave\x00"), []byte("1E51\x00")}, {[]byte("omdeva\x00"), []byte("0950\x00")}, {[]byte("omega\x00"), []byte("03C9\x00")}, {[]byte("omega1\x00"), []byte("03D6\x00")}, {[]byte("omegacyrillic\x00"), []byte("0461\x00")}, {[]byte("omegalatinclosed\x00"), []byte("0277\x00")}, {[]byte("omegaroundcyrillic\x00"), []byte("047B\x00")}, {[]byte("omegatitlocyrillic\x00"), []byte("047D\x00")}, {[]byte("omegatonos\x00"), []byte("03CE\x00")}, {[]byte("omgujarati\x00"), []byte("0AD0\x00")}, {[]byte("omicron\x00"), []byte("03BF\x00")}, {[]byte("omicrontonos\x00"), []byte("03CC\x00")}, {[]byte("omonospace\x00"), []byte("FF4F\x00")}, {[]byte("one\x00"), []byte("0031\x00")}, {[]byte("onearabic\x00"), []byte("0661\x00")}, {[]byte("onebengali\x00"), []byte("09E7\x00")}, {[]byte("onecircle\x00"), []byte("2460\x00")}, {[]byte("onecircleinversesansserif\x00"), []byte("278A\x00")}, {[]byte("onedeva\x00"), []byte("0967\x00")}, {[]byte("onedotenleader\x00"), []byte("2024\x00")}, {[]byte("oneeighth\x00"), []byte("215B\x00")}, {[]byte("onefitted\x00"), []byte("F6DC\x00")}, {[]byte("onegujarati\x00"), []byte("0AE7\x00")}, {[]byte("onegurmukhi\x00"), []byte("0A67\x00")}, {[]byte("onehackarabic\x00"), []byte("0661\x00")}, {[]byte("onehalf\x00"), []byte("00BD\x00")}, {[]byte("onehangzhou\x00"), []byte("3021\x00")}, {[]byte("oneideographicparen\x00"), []byte("3220\x00")}, {[]byte("oneinferior\x00"), []byte("2081\x00")}, {[]byte("onemonospace\x00"), []byte("FF11\x00")}, {[]byte("onenumeratorbengali\x00"), []byte("09F4\x00")}, {[]byte("oneoldstyle\x00"), []byte("F731\x00")}, {[]byte("oneparen\x00"), []byte("2474\x00")}, {[]byte("oneperiod\x00"), []byte("2488\x00")}, {[]byte("onepersian\x00"), []byte("06F1\x00")}, {[]byte("onequarter\x00"), []byte("00BC\x00")}, {[]byte("oneroman\x00"), []byte("2170\x00")}, {[]byte("onesuperior\x00"), []byte("00B9\x00")}, {[]byte("onethai\x00"), []byte("0E51\x00")}, {[]byte("onethird\x00"), []byte("2153\x00")}, {[]byte("oogonek\x00"), []byte("01EB\x00")}, {[]byte("oogonekmacron\x00"), []byte("01ED\x00")}, {[]byte("oogurmukhi\x00"), []byte("0A13\x00")}, {[]byte("oomatragurmukhi\x00"), []byte("0A4B\x00")}, {[]byte("oopen\x00"), []byte("0254\x00")}, {[]byte("oparen\x00"), []byte("24AA\x00")}, {[]byte("openbullet\x00"), []byte("25E6\x00")}, {[]byte("option\x00"), []byte("2325\x00")}, {[]byte("ordfeminine\x00"), []byte("00AA\x00")}, {[]byte("ordmasculine\x00"), []byte("00BA\x00")}, {[]byte("orthogonal\x00"), []byte("221F\x00")}, {[]byte("oshortdeva\x00"), []byte("0912\x00")}, {[]byte("oshortvowelsigndeva\x00"), []byte("094A\x00")}, {[]byte("oslash\x00"), []byte("00F8\x00")}, {[]byte("oslashacute\x00"), []byte("01FF\x00")}, {[]byte("osmallhiragana\x00"), []byte("3049\x00")}, {[]byte("osmallkatakana\x00"), []byte("30A9\x00")}, {[]byte("osmallkatakanahalfwidth\x00"), []byte("FF6B\x00")}, {[]byte("ostrokeacute\x00"), []byte("01FF\x00")}, {[]byte("osuperior\x00"), []byte("F6F0\x00")}, {[]byte("otcyrillic\x00"), []byte("047F\x00")}, {[]byte("otilde\x00"), []byte("00F5\x00")}, {[]byte("otildeacute\x00"), []byte("1E4D\x00")}, {[]byte("otildedieresis\x00"), []byte("1E4F\x00")}, {[]byte("oubopomofo\x00"), []byte("3121\x00")}, {[]byte("overline\x00"), []byte("203E\x00")}, {[]byte("overlinecenterline\x00"), []byte("FE4A\x00")}, {[]byte("overlinecmb\x00"), []byte("0305\x00")}, {[]byte("overlinedashed\x00"), []byte("FE49\x00")}, {[]byte("overlinedblwavy\x00"), []byte("FE4C\x00")}, {[]byte("overlinewavy\x00"), []byte("FE4B\x00")}, {[]byte("overscore\x00"), []byte("00AF\x00")}, {[]byte("ovowelsignbengali\x00"), []byte("09CB\x00")}, {[]byte("ovowelsigndeva\x00"), []byte("094B\x00")}, {[]byte("ovowelsigngujarati\x00"), []byte("0ACB\x00")}, {[]byte("p\x00"), []byte("0070\x00")}, {[]byte("paampssquare\x00"), []byte("3380\x00")}, {[]byte("paasentosquare\x00"), []byte("332B\x00")}, {[]byte("pabengali\x00"), []byte("09AA\x00")}, {[]byte("pacute\x00"), []byte("1E55\x00")}, {[]byte("padeva\x00"), []byte("092A\x00")}, {[]byte("pagedown\x00"), []byte("21DF\x00")}, {[]byte("pageup\x00"), []byte("21DE\x00")}, {[]byte("pagujarati\x00"), []byte("0AAA\x00")}, {[]byte("pagurmukhi\x00"), []byte("0A2A\x00")}, {[]byte("pahiragana\x00"), []byte("3071\x00")}, {[]byte("paiyannoithai\x00"), []byte("0E2F\x00")}, {[]byte("pakatakana\x00"), []byte("30D1\x00")}, {[]byte("palatalizationcyrilliccmb\x00"), []byte("0484\x00")}, {[]byte("palochkacyrillic\x00"), []byte("04C0\x00")}, {[]byte("pansioskorean\x00"), []byte("317F\x00")}, {[]byte("paragraph\x00"), []byte("00B6\x00")}, {[]byte("parallel\x00"), []byte("2225\x00")}, {[]byte("parenleft\x00"), []byte("0028\x00")}, {[]byte("parenleftaltonearabic\x00"), []byte("FD3E\x00")}, {[]byte("parenleftbt\x00"), []byte("F8ED\x00")}, {[]byte("parenleftex\x00"), []byte("F8EC\x00")}, {[]byte("parenleftinferior\x00"), []byte("208D\x00")}, {[]byte("parenleftmonospace\x00"), []byte("FF08\x00")}, {[]byte("parenleftsmall\x00"), []byte("FE59\x00")}, {[]byte("parenleftsuperior\x00"), []byte("207D\x00")}, {[]byte("parenlefttp\x00"), []byte("F8EB\x00")}, {[]byte("parenleftvertical\x00"), []byte("FE35\x00")}, {[]byte("parenright\x00"), []byte("0029\x00")}, {[]byte("parenrightaltonearabic\x00"), []byte("FD3F\x00")}, {[]byte("parenrightbt\x00"), []byte("F8F8\x00")}, {[]byte("parenrightex\x00"), []byte("F8F7\x00")}, {[]byte("parenrightinferior\x00"), []byte("208E\x00")}, {[]byte("parenrightmonospace\x00"), []byte("FF09\x00")}, {[]byte("parenrightsmall\x00"), []byte("FE5A\x00")}, {[]byte("parenrightsuperior\x00"), []byte("207E\x00")}, {[]byte("parenrighttp\x00"), []byte("F8F6\x00")}, {[]byte("parenrightvertical\x00"), []byte("FE36\x00")}, {[]byte("partialdiff\x00"), []byte("2202\x00")}, {[]byte("paseqhebrew\x00"), []byte("05C0\x00")}, {[]byte("pashtahebrew\x00"), []byte("0599\x00")}, {[]byte("pasquare\x00"), []byte("33A9\x00")}, {[]byte("patah\x00"), []byte("05B7\x00")}, {[]byte("patah11\x00"), []byte("05B7\x00")}, {[]byte("patah1d\x00"), []byte("05B7\x00")}, {[]byte("patah2a\x00"), []byte("05B7\x00")}, {[]byte("patahhebrew\x00"), []byte("05B7\x00")}, {[]byte("patahnarrowhebrew\x00"), []byte("05B7\x00")}, {[]byte("patahquarterhebrew\x00"), []byte("05B7\x00")}, {[]byte("patahwidehebrew\x00"), []byte("05B7\x00")}, {[]byte("pazerhebrew\x00"), []byte("05A1\x00")}, {[]byte("pbopomofo\x00"), []byte("3106\x00")}, {[]byte("pcircle\x00"), []byte("24DF\x00")}, {[]byte("pdotaccent\x00"), []byte("1E57\x00")}, {[]byte("pe\x00"), []byte("05E4\x00")}, {[]byte("pecyrillic\x00"), []byte("043F\x00")}, {[]byte("pedagesh\x00"), []byte("FB44\x00")}, {[]byte("pedageshhebrew\x00"), []byte("FB44\x00")}, {[]byte("peezisquare\x00"), []byte("333B\x00")}, {[]byte("pefinaldageshhebrew\x00"), []byte("FB43\x00")}, {[]byte("peharabic\x00"), []byte("067E\x00")}, {[]byte("peharmenian\x00"), []byte("057A\x00")}, {[]byte("pehebrew\x00"), []byte("05E4\x00")}, {[]byte("pehfinalarabic\x00"), []byte("FB57\x00")}, {[]byte("pehinitialarabic\x00"), []byte("FB58\x00")}, {[]byte("pehiragana\x00"), []byte("307A\x00")}, {[]byte("pehmedialarabic\x00"), []byte("FB59\x00")}, {[]byte("pekatakana\x00"), []byte("30DA\x00")}, {[]byte("pemiddlehookcyrillic\x00"), []byte("04A7\x00")}, {[]byte("perafehebrew\x00"), []byte("FB4E\x00")}, {[]byte("percent\x00"), []byte("0025\x00")}, {[]byte("percentarabic\x00"), []byte("066A\x00")}, {[]byte("percentmonospace\x00"), []byte("FF05\x00")}, {[]byte("percentsmall\x00"), []byte("FE6A\x00")}, {[]byte("period\x00"), []byte("002E\x00")}, {[]byte("periodarmenian\x00"), []byte("0589\x00")}, {[]byte("periodcentered\x00"), []byte("00B7\x00")}, {[]byte("periodhalfwidth\x00"), []byte("FF61\x00")}, {[]byte("periodinferior\x00"), []byte("F6E7\x00")}, {[]byte("periodmonospace\x00"), []byte("FF0E\x00")}, {[]byte("periodsmall\x00"), []byte("FE52\x00")}, {[]byte("periodsuperior\x00"), []byte("F6E8\x00")}, {[]byte("perispomenigreekcmb\x00"), []byte("0342\x00")}, {[]byte("perpendicular\x00"), []byte("22A5\x00")}, {[]byte("perthousand\x00"), []byte("2030\x00")}, {[]byte("peseta\x00"), []byte("20A7\x00")}, {[]byte("pfsquare\x00"), []byte("338A\x00")}, {[]byte("phabengali\x00"), []byte("09AB\x00")}, {[]byte("phadeva\x00"), []byte("092B\x00")}, {[]byte("phagujarati\x00"), []byte("0AAB\x00")}, {[]byte("phagurmukhi\x00"), []byte("0A2B\x00")}, {[]byte("phi\x00"), []byte("03C6\x00")}, {[]byte("phi1\x00"), []byte("03D5\x00")}, {[]byte("phieuphacirclekorean\x00"), []byte("327A\x00")}, {[]byte("phieuphaparenkorean\x00"), []byte("321A\x00")}, {[]byte("phieuphcirclekorean\x00"), []byte("326C\x00")}, {[]byte("phieuphkorean\x00"), []byte("314D\x00")}, {[]byte("phieuphparenkorean\x00"), []byte("320C\x00")}, {[]byte("philatin\x00"), []byte("0278\x00")}, {[]byte("phinthuthai\x00"), []byte("0E3A\x00")}, {[]byte("phisymbolgreek\x00"), []byte("03D5\x00")}, {[]byte("phook\x00"), []byte("01A5\x00")}, {[]byte("phophanthai\x00"), []byte("0E1E\x00")}, {[]byte("phophungthai\x00"), []byte("0E1C\x00")}, {[]byte("phosamphaothai\x00"), []byte("0E20\x00")}, {[]byte("pi\x00"), []byte("03C0\x00")}, {[]byte("pieupacirclekorean\x00"), []byte("3273\x00")}, {[]byte("pieupaparenkorean\x00"), []byte("3213\x00")}, {[]byte("pieupcieuckorean\x00"), []byte("3176\x00")}, {[]byte("pieupcirclekorean\x00"), []byte("3265\x00")}, {[]byte("pieupkiyeokkorean\x00"), []byte("3172\x00")}, {[]byte("pieupkorean\x00"), []byte("3142\x00")}, {[]byte("pieupparenkorean\x00"), []byte("3205\x00")}, {[]byte("pieupsioskiyeokkorean\x00"), []byte("3174\x00")}, {[]byte("pieupsioskorean\x00"), []byte("3144\x00")}, {[]byte("pieupsiostikeutkorean\x00"), []byte("3175\x00")}, {[]byte("pieupthieuthkorean\x00"), []byte("3177\x00")}, {[]byte("pieuptikeutkorean\x00"), []byte("3173\x00")}, {[]byte("pihiragana\x00"), []byte("3074\x00")}, {[]byte("pikatakana\x00"), []byte("30D4\x00")}, {[]byte("pisymbolgreek\x00"), []byte("03D6\x00")}, {[]byte("piwrarmenian\x00"), []byte("0583\x00")}, {[]byte("plus\x00"), []byte("002B\x00")}, {[]byte("plusbelowcmb\x00"), []byte("031F\x00")}, {[]byte("pluscircle\x00"), []byte("2295\x00")}, {[]byte("plusminus\x00"), []byte("00B1\x00")}, {[]byte("plusmod\x00"), []byte("02D6\x00")}, {[]byte("plusmonospace\x00"), []byte("FF0B\x00")}, {[]byte("plussmall\x00"), []byte("FE62\x00")}, {[]byte("plussuperior\x00"), []byte("207A\x00")}, {[]byte("pmonospace\x00"), []byte("FF50\x00")}, {[]byte("pmsquare\x00"), []byte("33D8\x00")}, {[]byte("pohiragana\x00"), []byte("307D\x00")}, {[]byte("pointingindexdownwhite\x00"), []byte("261F\x00")}, {[]byte("pointingindexleftwhite\x00"), []byte("261C\x00")}, {[]byte("pointingindexrightwhite\x00"), []byte("261E\x00")}, {[]byte("pointingindexupwhite\x00"), []byte("261D\x00")}, {[]byte("pokatakana\x00"), []byte("30DD\x00")}, {[]byte("poplathai\x00"), []byte("0E1B\x00")}, {[]byte("postalmark\x00"), []byte("3012\x00")}, {[]byte("postalmarkface\x00"), []byte("3020\x00")}, {[]byte("pparen\x00"), []byte("24AB\x00")}, {[]byte("precedes\x00"), []byte("227A\x00")}, {[]byte("prescription\x00"), []byte("211E\x00")}, {[]byte("primemod\x00"), []byte("02B9\x00")}, {[]byte("primereversed\x00"), []byte("2035\x00")}, {[]byte("product\x00"), []byte("220F\x00")}, {[]byte("projective\x00"), []byte("2305\x00")}, {[]byte("prolongedkana\x00"), []byte("30FC\x00")}, {[]byte("propellor\x00"), []byte("2318\x00")}, {[]byte("propersubset\x00"), []byte("2282\x00")}, {[]byte("propersuperset\x00"), []byte("2283\x00")}, {[]byte("proportion\x00"), []byte("2237\x00")}, {[]byte("proportional\x00"), []byte("221D\x00")}, {[]byte("psi\x00"), []byte("03C8\x00")}, {[]byte("psicyrillic\x00"), []byte("0471\x00")}, {[]byte("psilipneumatacyrilliccmb\x00"), []byte("0486\x00")}, {[]byte("pssquare\x00"), []byte("33B0\x00")}, {[]byte("puhiragana\x00"), []byte("3077\x00")}, {[]byte("pukatakana\x00"), []byte("30D7\x00")}, {[]byte("pvsquare\x00"), []byte("33B4\x00")}, {[]byte("pwsquare\x00"), []byte("33BA\x00")}, {[]byte("q\x00"), []byte("0071\x00")}, {[]byte("qadeva\x00"), []byte("0958\x00")}, {[]byte("qadmahebrew\x00"), []byte("05A8\x00")}, {[]byte("qafarabic\x00"), []byte("0642\x00")}, {[]byte("qaffinalarabic\x00"), []byte("FED6\x00")}, {[]byte("qafinitialarabic\x00"), []byte("FED7\x00")}, {[]byte("qafmedialarabic\x00"), []byte("FED8\x00")}, {[]byte("qamats\x00"), []byte("05B8\x00")}, {[]byte("qamats10\x00"), []byte("05B8\x00")}, {[]byte("qamats1a\x00"), []byte("05B8\x00")}, {[]byte("qamats1c\x00"), []byte("05B8\x00")}, {[]byte("qamats27\x00"), []byte("05B8\x00")}, {[]byte("qamats29\x00"), []byte("05B8\x00")}, {[]byte("qamats33\x00"), []byte("05B8\x00")}, {[]byte("qamatsde\x00"), []byte("05B8\x00")}, {[]byte("qamatshebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatsnarrowhebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatsqatanhebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatsqatannarrowhebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatsqatanquarterhebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatsqatanwidehebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatsquarterhebrew\x00"), []byte("05B8\x00")}, {[]byte("qamatswidehebrew\x00"), []byte("05B8\x00")}, {[]byte("qarneyparahebrew\x00"), []byte("059F\x00")}, {[]byte("qbopomofo\x00"), []byte("3111\x00")}, {[]byte("qcircle\x00"), []byte("24E0\x00")}, {[]byte("qhook\x00"), []byte("02A0\x00")}, {[]byte("qmonospace\x00"), []byte("FF51\x00")}, {[]byte("qof\x00"), []byte("05E7\x00")}, {[]byte("qofdagesh\x00"), []byte("FB47\x00")}, {[]byte("qofdageshhebrew\x00"), []byte("FB47\x00")}, {[]byte("qofhatafpatah\x00"), []byte("05E7 05B2\x00")}, {[]byte("qofhatafpatahhebrew\x00"), []byte("05E7 05B2\x00")}, {[]byte("qofhatafsegol\x00"), []byte("05E7 05B1\x00")}, {[]byte("qofhatafsegolhebrew\x00"), []byte("05E7 05B1\x00")}, {[]byte("qofhebrew\x00"), []byte("05E7\x00")}, {[]byte("qofhiriq\x00"), []byte("05E7 05B4\x00")}, {[]byte("qofhiriqhebrew\x00"), []byte("05E7 05B4\x00")}, {[]byte("qofholam\x00"), []byte("05E7 05B9\x00")}, {[]byte("qofholamhebrew\x00"), []byte("05E7 05B9\x00")}, {[]byte("qofpatah\x00"), []byte("05E7 05B7\x00")}, {[]byte("qofpatahhebrew\x00"), []byte("05E7 05B7\x00")}, {[]byte("qofqamats\x00"), []byte("05E7 05B8\x00")}, {[]byte("qofqamatshebrew\x00"), []byte("05E7 05B8\x00")}, {[]byte("qofqubuts\x00"), []byte("05E7 05BB\x00")}, {[]byte("qofqubutshebrew\x00"), []byte("05E7 05BB\x00")}, {[]byte("qofsegol\x00"), []byte("05E7 05B6\x00")}, {[]byte("qofsegolhebrew\x00"), []byte("05E7 05B6\x00")}, {[]byte("qofsheva\x00"), []byte("05E7 05B0\x00")}, {[]byte("qofshevahebrew\x00"), []byte("05E7 05B0\x00")}, {[]byte("qoftsere\x00"), []byte("05E7 05B5\x00")}, {[]byte("qoftserehebrew\x00"), []byte("05E7 05B5\x00")}, {[]byte("qparen\x00"), []byte("24AC\x00")}, {[]byte("quarternote\x00"), []byte("2669\x00")}, {[]byte("qubuts\x00"), []byte("05BB\x00")}, {[]byte("qubuts18\x00"), []byte("05BB\x00")}, {[]byte("qubuts25\x00"), []byte("05BB\x00")}, {[]byte("qubuts31\x00"), []byte("05BB\x00")}, {[]byte("qubutshebrew\x00"), []byte("05BB\x00")}, {[]byte("qubutsnarrowhebrew\x00"), []byte("05BB\x00")}, {[]byte("qubutsquarterhebrew\x00"), []byte("05BB\x00")}, {[]byte("qubutswidehebrew\x00"), []byte("05BB\x00")}, {[]byte("question\x00"), []byte("003F\x00")}, {[]byte("questionarabic\x00"), []byte("061F\x00")}, {[]byte("questionarmenian\x00"), []byte("055E\x00")}, {[]byte("questiondown\x00"), []byte("00BF\x00")}, {[]byte("questiondownsmall\x00"), []byte("F7BF\x00")}, {[]byte("questiongreek\x00"), []byte("037E\x00")}, {[]byte("questionmonospace\x00"), []byte("FF1F\x00")}, {[]byte("questionsmall\x00"), []byte("F73F\x00")}, {[]byte("quotedbl\x00"), []byte("0022\x00")}, {[]byte("quotedblbase\x00"), []byte("201E\x00")}, {[]byte("quotedblleft\x00"), []byte("201C\x00")}, {[]byte("quotedblmonospace\x00"), []byte("FF02\x00")}, {[]byte("quotedblprime\x00"), []byte("301E\x00")}, {[]byte("quotedblprimereversed\x00"), []byte("301D\x00")}, {[]byte("quotedblright\x00"), []byte("201D\x00")}, {[]byte("quoteleft\x00"), []byte("2018\x00")}, {[]byte("quoteleftreversed\x00"), []byte("201B\x00")}, {[]byte("quotereversed\x00"), []byte("201B\x00")}, {[]byte("quoteright\x00"), []byte("2019\x00")}, {[]byte("quoterightn\x00"), []byte("0149\x00")}, {[]byte("quotesinglbase\x00"), []byte("201A\x00")}, {[]byte("quotesingle\x00"), []byte("0027\x00")}, {[]byte("quotesinglemonospace\x00"), []byte("FF07\x00")}, {[]byte("r\x00"), []byte("0072\x00")}, {[]byte("raarmenian\x00"), []byte("057C\x00")}, {[]byte("rabengali\x00"), []byte("09B0\x00")}, {[]byte("racute\x00"), []byte("0155\x00")}, {[]byte("radeva\x00"), []byte("0930\x00")}, {[]byte("radical\x00"), []byte("221A\x00")}, {[]byte("radicalex\x00"), []byte("F8E5\x00")}, {[]byte("radoverssquare\x00"), []byte("33AE\x00")}, {[]byte("radoverssquaredsquare\x00"), []byte("33AF\x00")}, {[]byte("radsquare\x00"), []byte("33AD\x00")}, {[]byte("rafe\x00"), []byte("05BF\x00")}, {[]byte("rafehebrew\x00"), []byte("05BF\x00")}, {[]byte("ragujarati\x00"), []byte("0AB0\x00")}, {[]byte("ragurmukhi\x00"), []byte("0A30\x00")}, {[]byte("rahiragana\x00"), []byte("3089\x00")}, {[]byte("rakatakana\x00"), []byte("30E9\x00")}, {[]byte("rakatakanahalfwidth\x00"), []byte("FF97\x00")}, {[]byte("ralowerdiagonalbengali\x00"), []byte("09F1\x00")}, {[]byte("ramiddlediagonalbengali\x00"), []byte("09F0\x00")}, {[]byte("ramshorn\x00"), []byte("0264\x00")}, {[]byte("ratio\x00"), []byte("2236\x00")}, {[]byte("rbopomofo\x00"), []byte("3116\x00")}, {[]byte("rcaron\x00"), []byte("0159\x00")}, {[]byte("rcedilla\x00"), []byte("0157\x00")}, {[]byte("rcircle\x00"), []byte("24E1\x00")}, {[]byte("rcommaaccent\x00"), []byte("0157\x00")}, {[]byte("rdblgrave\x00"), []byte("0211\x00")}, {[]byte("rdotaccent\x00"), []byte("1E59\x00")}, {[]byte("rdotbelow\x00"), []byte("1E5B\x00")}, {[]byte("rdotbelowmacron\x00"), []byte("1E5D\x00")}, {[]byte("referencemark\x00"), []byte("203B\x00")}, {[]byte("reflexsubset\x00"), []byte("2286\x00")}, {[]byte("reflexsuperset\x00"), []byte("2287\x00")}, {[]byte("registered\x00"), []byte("00AE\x00")}, {[]byte("registersans\x00"), []byte("F8E8\x00")}, {[]byte("registerserif\x00"), []byte("F6DA\x00")}, {[]byte("reharabic\x00"), []byte("0631\x00")}, {[]byte("reharmenian\x00"), []byte("0580\x00")}, {[]byte("rehfinalarabic\x00"), []byte("FEAE\x00")}, {[]byte("rehiragana\x00"), []byte("308C\x00")}, {[]byte("rehyehaleflamarabic\x00"), []byte("0631 FEF3 FE8E 0644\x00")}, {[]byte("rekatakana\x00"), []byte("30EC\x00")}, {[]byte("rekatakanahalfwidth\x00"), []byte("FF9A\x00")}, {[]byte("resh\x00"), []byte("05E8\x00")}, {[]byte("reshdageshhebrew\x00"), []byte("FB48\x00")}, {[]byte("reshhatafpatah\x00"), []byte("05E8 05B2\x00")}, {[]byte("reshhatafpatahhebrew\x00"), []byte("05E8 05B2\x00")}, {[]byte("reshhatafsegol\x00"), []byte("05E8 05B1\x00")}, {[]byte("reshhatafsegolhebrew\x00"), []byte("05E8 05B1\x00")}, {[]byte("reshhebrew\x00"), []byte("05E8\x00")}, {[]byte("reshhiriq\x00"), []byte("05E8 05B4\x00")}, {[]byte("reshhiriqhebrew\x00"), []byte("05E8 05B4\x00")}, {[]byte("reshholam\x00"), []byte("05E8 05B9\x00")}, {[]byte("reshholamhebrew\x00"), []byte("05E8 05B9\x00")}, {[]byte("reshpatah\x00"), []byte("05E8 05B7\x00")}, {[]byte("reshpatahhebrew\x00"), []byte("05E8 05B7\x00")}, {[]byte("reshqamats\x00"), []byte("05E8 05B8\x00")}, {[]byte("reshqamatshebrew\x00"), []byte("05E8 05B8\x00")}, {[]byte("reshqubuts\x00"), []byte("05E8 05BB\x00")}, {[]byte("reshqubutshebrew\x00"), []byte("05E8 05BB\x00")}, {[]byte("reshsegol\x00"), []byte("05E8 05B6\x00")}, {[]byte("reshsegolhebrew\x00"), []byte("05E8 05B6\x00")}, {[]byte("reshsheva\x00"), []byte("05E8 05B0\x00")}, {[]byte("reshshevahebrew\x00"), []byte("05E8 05B0\x00")}, {[]byte("reshtsere\x00"), []byte("05E8 05B5\x00")}, {[]byte("reshtserehebrew\x00"), []byte("05E8 05B5\x00")}, {[]byte("reversedtilde\x00"), []byte("223D\x00")}, {[]byte("reviahebrew\x00"), []byte("0597\x00")}, {[]byte("reviamugrashhebrew\x00"), []byte("0597\x00")}, {[]byte("revlogicalnot\x00"), []byte("2310\x00")}, {[]byte("rfishhook\x00"), []byte("027E\x00")}, {[]byte("rfishhookreversed\x00"), []byte("027F\x00")}, {[]byte("rhabengali\x00"), []byte("09DD\x00")}, {[]byte("rhadeva\x00"), []byte("095D\x00")}, {[]byte("rho\x00"), []byte("03C1\x00")}, {[]byte("rhook\x00"), []byte("027D\x00")}, {[]byte("rhookturned\x00"), []byte("027B\x00")}, {[]byte("rhookturnedsuperior\x00"), []byte("02B5\x00")}, {[]byte("rhosymbolgreek\x00"), []byte("03F1\x00")}, {[]byte("rhotichookmod\x00"), []byte("02DE\x00")}, {[]byte("rieulacirclekorean\x00"), []byte("3271\x00")}, {[]byte("rieulaparenkorean\x00"), []byte("3211\x00")}, {[]byte("rieulcirclekorean\x00"), []byte("3263\x00")}, {[]byte("rieulhieuhkorean\x00"), []byte("3140\x00")}, {[]byte("rieulkiyeokkorean\x00"), []byte("313A\x00")}, {[]byte("rieulkiyeoksioskorean\x00"), []byte("3169\x00")}, {[]byte("rieulkorean\x00"), []byte("3139\x00")}, {[]byte("rieulmieumkorean\x00"), []byte("313B\x00")}, {[]byte("rieulpansioskorean\x00"), []byte("316C\x00")}, {[]byte("rieulparenkorean\x00"), []byte("3203\x00")}, {[]byte("rieulphieuphkorean\x00"), []byte("313F\x00")}, {[]byte("rieulpieupkorean\x00"), []byte("313C\x00")}, {[]byte("rieulpieupsioskorean\x00"), []byte("316B\x00")}, {[]byte("rieulsioskorean\x00"), []byte("313D\x00")}, {[]byte("rieulthieuthkorean\x00"), []byte("313E\x00")}, {[]byte("rieultikeutkorean\x00"), []byte("316A\x00")}, {[]byte("rieulyeorinhieuhkorean\x00"), []byte("316D\x00")}, {[]byte("rightangle\x00"), []byte("221F\x00")}, {[]byte("righttackbelowcmb\x00"), []byte("0319\x00")}, {[]byte("righttriangle\x00"), []byte("22BF\x00")}, {[]byte("rihiragana\x00"), []byte("308A\x00")}, {[]byte("rikatakana\x00"), []byte("30EA\x00")}, {[]byte("rikatakanahalfwidth\x00"), []byte("FF98\x00")}, {[]byte("ring\x00"), []byte("02DA\x00")}, {[]byte("ringbelowcmb\x00"), []byte("0325\x00")}, {[]byte("ringcmb\x00"), []byte("030A\x00")}, {[]byte("ringhalfleft\x00"), []byte("02BF\x00")}, {[]byte("ringhalfleftarmenian\x00"), []byte("0559\x00")}, {[]byte("ringhalfleftbelowcmb\x00"), []byte("031C\x00")}, {[]byte("ringhalfleftcentered\x00"), []byte("02D3\x00")}, {[]byte("ringhalfright\x00"), []byte("02BE\x00")}, {[]byte("ringhalfrightbelowcmb\x00"), []byte("0339\x00")}, {[]byte("ringhalfrightcentered\x00"), []byte("02D2\x00")}, {[]byte("rinvertedbreve\x00"), []byte("0213\x00")}, {[]byte("rittorusquare\x00"), []byte("3351\x00")}, {[]byte("rlinebelow\x00"), []byte("1E5F\x00")}, {[]byte("rlongleg\x00"), []byte("027C\x00")}, {[]byte("rlonglegturned\x00"), []byte("027A\x00")}, {[]byte("rmonospace\x00"), []byte("FF52\x00")}, {[]byte("rohiragana\x00"), []byte("308D\x00")}, {[]byte("rokatakana\x00"), []byte("30ED\x00")}, {[]byte("rokatakanahalfwidth\x00"), []byte("FF9B\x00")}, {[]byte("roruathai\x00"), []byte("0E23\x00")}, {[]byte("rparen\x00"), []byte("24AD\x00")}, {[]byte("rrabengali\x00"), []byte("09DC\x00")}, {[]byte("rradeva\x00"), []byte("0931\x00")}, {[]byte("rragurmukhi\x00"), []byte("0A5C\x00")}, {[]byte("rreharabic\x00"), []byte("0691\x00")}, {[]byte("rrehfinalarabic\x00"), []byte("FB8D\x00")}, {[]byte("rrvocalicbengali\x00"), []byte("09E0\x00")}, {[]byte("rrvocalicdeva\x00"), []byte("0960\x00")}, {[]byte("rrvocalicgujarati\x00"), []byte("0AE0\x00")}, {[]byte("rrvocalicvowelsignbengali\x00"), []byte("09C4\x00")}, {[]byte("rrvocalicvowelsigndeva\x00"), []byte("0944\x00")}, {[]byte("rrvocalicvowelsigngujarati\x00"), []byte("0AC4\x00")}, {[]byte("rsuperior\x00"), []byte("F6F1\x00")}, {[]byte("rtblock\x00"), []byte("2590\x00")}, {[]byte("rturned\x00"), []byte("0279\x00")}, {[]byte("rturnedsuperior\x00"), []byte("02B4\x00")}, {[]byte("ruhiragana\x00"), []byte("308B\x00")}, {[]byte("rukatakana\x00"), []byte("30EB\x00")}, {[]byte("rukatakanahalfwidth\x00"), []byte("FF99\x00")}, {[]byte("rupeemarkbengali\x00"), []byte("09F2\x00")}, {[]byte("rupeesignbengali\x00"), []byte("09F3\x00")}, {[]byte("rupiah\x00"), []byte("F6DD\x00")}, {[]byte("ruthai\x00"), []byte("0E24\x00")}, {[]byte("rvocalicbengali\x00"), []byte("098B\x00")}, {[]byte("rvocalicdeva\x00"), []byte("090B\x00")}, {[]byte("rvocalicgujarati\x00"), []byte("0A8B\x00")}, {[]byte("rvocalicvowelsignbengali\x00"), []byte("09C3\x00")}, {[]byte("rvocalicvowelsigndeva\x00"), []byte("0943\x00")}, {[]byte("rvocalicvowelsigngujarati\x00"), []byte("0AC3\x00")}, {[]byte("s\x00"), []byte("0073\x00")}, {[]byte("sabengali\x00"), []byte("09B8\x00")}, {[]byte("sacute\x00"), []byte("015B\x00")}, {[]byte("sacutedotaccent\x00"), []byte("1E65\x00")}, {[]byte("sadarabic\x00"), []byte("0635\x00")}, {[]byte("sadeva\x00"), []byte("0938\x00")}, {[]byte("sadfinalarabic\x00"), []byte("FEBA\x00")}, {[]byte("sadinitialarabic\x00"), []byte("FEBB\x00")}, {[]byte("sadmedialarabic\x00"), []byte("FEBC\x00")}, {[]byte("sagujarati\x00"), []byte("0AB8\x00")}, {[]byte("sagurmukhi\x00"), []byte("0A38\x00")}, {[]byte("sahiragana\x00"), []byte("3055\x00")}, {[]byte("sakatakana\x00"), []byte("30B5\x00")}, {[]byte("sakatakanahalfwidth\x00"), []byte("FF7B\x00")}, {[]byte("sallallahoualayhewasallamarabic\x00"), []byte("FDFA\x00")}, {[]byte("samekh\x00"), []byte("05E1\x00")}, {[]byte("samekhdagesh\x00"), []byte("FB41\x00")}, {[]byte("samekhdageshhebrew\x00"), []byte("FB41\x00")}, {[]byte("samekhhebrew\x00"), []byte("05E1\x00")}, {[]byte("saraaathai\x00"), []byte("0E32\x00")}, {[]byte("saraaethai\x00"), []byte("0E41\x00")}, {[]byte("saraaimaimalaithai\x00"), []byte("0E44\x00")}, {[]byte("saraaimaimuanthai\x00"), []byte("0E43\x00")}, {[]byte("saraamthai\x00"), []byte("0E33\x00")}, {[]byte("saraathai\x00"), []byte("0E30\x00")}, {[]byte("saraethai\x00"), []byte("0E40\x00")}, {[]byte("saraiileftthai\x00"), []byte("F886\x00")}, {[]byte("saraiithai\x00"), []byte("0E35\x00")}, {[]byte("saraileftthai\x00"), []byte("F885\x00")}, {[]byte("saraithai\x00"), []byte("0E34\x00")}, {[]byte("saraothai\x00"), []byte("0E42\x00")}, {[]byte("saraueeleftthai\x00"), []byte("F888\x00")}, {[]byte("saraueethai\x00"), []byte("0E37\x00")}, {[]byte("saraueleftthai\x00"), []byte("F887\x00")}, {[]byte("sarauethai\x00"), []byte("0E36\x00")}, {[]byte("sarauthai\x00"), []byte("0E38\x00")}, {[]byte("sarauuthai\x00"), []byte("0E39\x00")}, {[]byte("sbopomofo\x00"), []byte("3119\x00")}, {[]byte("scaron\x00"), []byte("0161\x00")}, {[]byte("scarondotaccent\x00"), []byte("1E67\x00")}, {[]byte("scedilla\x00"), []byte("015F\x00")}, {[]byte("schwa\x00"), []byte("0259\x00")}, {[]byte("schwacyrillic\x00"), []byte("04D9\x00")}, {[]byte("schwadieresiscyrillic\x00"), []byte("04DB\x00")}, {[]byte("schwahook\x00"), []byte("025A\x00")}, {[]byte("scircle\x00"), []byte("24E2\x00")}, {[]byte("scircumflex\x00"), []byte("015D\x00")}, {[]byte("scommaaccent\x00"), []byte("0219\x00")}, {[]byte("sdotaccent\x00"), []byte("1E61\x00")}, {[]byte("sdotbelow\x00"), []byte("1E63\x00")}, {[]byte("sdotbelowdotaccent\x00"), []byte("1E69\x00")}, {[]byte("seagullbelowcmb\x00"), []byte("033C\x00")}, {[]byte("second\x00"), []byte("2033\x00")}, {[]byte("secondtonechinese\x00"), []byte("02CA\x00")}, {[]byte("section\x00"), []byte("00A7\x00")}, {[]byte("seenarabic\x00"), []byte("0633\x00")}, {[]byte("seenfinalarabic\x00"), []byte("FEB2\x00")}, {[]byte("seeninitialarabic\x00"), []byte("FEB3\x00")}, {[]byte("seenmedialarabic\x00"), []byte("FEB4\x00")}, {[]byte("segol\x00"), []byte("05B6\x00")}, {[]byte("segol13\x00"), []byte("05B6\x00")}, {[]byte("segol1f\x00"), []byte("05B6\x00")}, {[]byte("segol2c\x00"), []byte("05B6\x00")}, {[]byte("segolhebrew\x00"), []byte("05B6\x00")}, {[]byte("segolnarrowhebrew\x00"), []byte("05B6\x00")}, {[]byte("segolquarterhebrew\x00"), []byte("05B6\x00")}, {[]byte("segoltahebrew\x00"), []byte("0592\x00")}, {[]byte("segolwidehebrew\x00"), []byte("05B6\x00")}, {[]byte("seharmenian\x00"), []byte("057D\x00")}, {[]byte("sehiragana\x00"), []byte("305B\x00")}, {[]byte("sekatakana\x00"), []byte("30BB\x00")}, {[]byte("sekatakanahalfwidth\x00"), []byte("FF7E\x00")}, {[]byte("semicolon\x00"), []byte("003B\x00")}, {[]byte("semicolonarabic\x00"), []byte("061B\x00")}, {[]byte("semicolonmonospace\x00"), []byte("FF1B\x00")}, {[]byte("semicolonsmall\x00"), []byte("FE54\x00")}, {[]byte("semivoicedmarkkana\x00"), []byte("309C\x00")}, {[]byte("semivoicedmarkkanahalfwidth\x00"), []byte("FF9F\x00")}, {[]byte("sentisquare\x00"), []byte("3322\x00")}, {[]byte("sentosquare\x00"), []byte("3323\x00")}, {[]byte("seven\x00"), []byte("0037\x00")}, {[]byte("sevenarabic\x00"), []byte("0667\x00")}, {[]byte("sevenbengali\x00"), []byte("09ED\x00")}, {[]byte("sevencircle\x00"), []byte("2466\x00")}, {[]byte("sevencircleinversesansserif\x00"), []byte("2790\x00")}, {[]byte("sevendeva\x00"), []byte("096D\x00")}, {[]byte("seveneighths\x00"), []byte("215E\x00")}, {[]byte("sevengujarati\x00"), []byte("0AED\x00")}, {[]byte("sevengurmukhi\x00"), []byte("0A6D\x00")}, {[]byte("sevenhackarabic\x00"), []byte("0667\x00")}, {[]byte("sevenhangzhou\x00"), []byte("3027\x00")}, {[]byte("sevenideographicparen\x00"), []byte("3226\x00")}, {[]byte("seveninferior\x00"), []byte("2087\x00")}, {[]byte("sevenmonospace\x00"), []byte("FF17\x00")}, {[]byte("sevenoldstyle\x00"), []byte("F737\x00")}, {[]byte("sevenparen\x00"), []byte("247A\x00")}, {[]byte("sevenperiod\x00"), []byte("248E\x00")}, {[]byte("sevenpersian\x00"), []byte("06F7\x00")}, {[]byte("sevenroman\x00"), []byte("2176\x00")}, {[]byte("sevensuperior\x00"), []byte("2077\x00")}, {[]byte("seventeencircle\x00"), []byte("2470\x00")}, {[]byte("seventeenparen\x00"), []byte("2484\x00")}, {[]byte("seventeenperiod\x00"), []byte("2498\x00")}, {[]byte("seventhai\x00"), []byte("0E57\x00")}, {[]byte("sfthyphen\x00"), []byte("00AD\x00")}, {[]byte("shaarmenian\x00"), []byte("0577\x00")}, {[]byte("shabengali\x00"), []byte("09B6\x00")}, {[]byte("shacyrillic\x00"), []byte("0448\x00")}, {[]byte("shaddaarabic\x00"), []byte("0651\x00")}, {[]byte("shaddadammaarabic\x00"), []byte("FC61\x00")}, {[]byte("shaddadammatanarabic\x00"), []byte("FC5E\x00")}, {[]byte("shaddafathaarabic\x00"), []byte("FC60\x00")}, {[]byte("shaddafathatanarabic\x00"), []byte("0651 064B\x00")}, {[]byte("shaddakasraarabic\x00"), []byte("FC62\x00")}, {[]byte("shaddakasratanarabic\x00"), []byte("FC5F\x00")}, {[]byte("shade\x00"), []byte("2592\x00")}, {[]byte("shadedark\x00"), []byte("2593\x00")}, {[]byte("shadelight\x00"), []byte("2591\x00")}, {[]byte("shademedium\x00"), []byte("2592\x00")}, {[]byte("shadeva\x00"), []byte("0936\x00")}, {[]byte("shagujarati\x00"), []byte("0AB6\x00")}, {[]byte("shagurmukhi\x00"), []byte("0A36\x00")}, {[]byte("shalshelethebrew\x00"), []byte("0593\x00")}, {[]byte("shbopomofo\x00"), []byte("3115\x00")}, {[]byte("shchacyrillic\x00"), []byte("0449\x00")}, {[]byte("sheenarabic\x00"), []byte("0634\x00")}, {[]byte("sheenfinalarabic\x00"), []byte("FEB6\x00")}, {[]byte("sheeninitialarabic\x00"), []byte("FEB7\x00")}, {[]byte("sheenmedialarabic\x00"), []byte("FEB8\x00")}, {[]byte("sheicoptic\x00"), []byte("03E3\x00")}, {[]byte("sheqel\x00"), []byte("20AA\x00")}, {[]byte("sheqelhebrew\x00"), []byte("20AA\x00")}, {[]byte("sheva\x00"), []byte("05B0\x00")}, {[]byte("sheva115\x00"), []byte("05B0\x00")}, {[]byte("sheva15\x00"), []byte("05B0\x00")}, {[]byte("sheva22\x00"), []byte("05B0\x00")}, {[]byte("sheva2e\x00"), []byte("05B0\x00")}, {[]byte("shevahebrew\x00"), []byte("05B0\x00")}, {[]byte("shevanarrowhebrew\x00"), []byte("05B0\x00")}, {[]byte("shevaquarterhebrew\x00"), []byte("05B0\x00")}, {[]byte("shevawidehebrew\x00"), []byte("05B0\x00")}, {[]byte("shhacyrillic\x00"), []byte("04BB\x00")}, {[]byte("shimacoptic\x00"), []byte("03ED\x00")}, {[]byte("shin\x00"), []byte("05E9\x00")}, {[]byte("shindagesh\x00"), []byte("FB49\x00")}, {[]byte("shindageshhebrew\x00"), []byte("FB49\x00")}, {[]byte("shindageshshindot\x00"), []byte("FB2C\x00")}, {[]byte("shindageshshindothebrew\x00"), []byte("FB2C\x00")}, {[]byte("shindageshsindot\x00"), []byte("FB2D\x00")}, {[]byte("shindageshsindothebrew\x00"), []byte("FB2D\x00")}, {[]byte("shindothebrew\x00"), []byte("05C1\x00")}, {[]byte("shinhebrew\x00"), []byte("05E9\x00")}, {[]byte("shinshindot\x00"), []byte("FB2A\x00")}, {[]byte("shinshindothebrew\x00"), []byte("FB2A\x00")}, {[]byte("shinsindot\x00"), []byte("FB2B\x00")}, {[]byte("shinsindothebrew\x00"), []byte("FB2B\x00")}, {[]byte("shook\x00"), []byte("0282\x00")}, {[]byte("sigma\x00"), []byte("03C3\x00")}, {[]byte("sigma1\x00"), []byte("03C2\x00")}, {[]byte("sigmafinal\x00"), []byte("03C2\x00")}, {[]byte("sigmalunatesymbolgreek\x00"), []byte("03F2\x00")}, {[]byte("sihiragana\x00"), []byte("3057\x00")}, {[]byte("sikatakana\x00"), []byte("30B7\x00")}, {[]byte("sikatakanahalfwidth\x00"), []byte("FF7C\x00")}, {[]byte("siluqhebrew\x00"), []byte("05BD\x00")}, {[]byte("siluqlefthebrew\x00"), []byte("05BD\x00")}, {[]byte("similar\x00"), []byte("223C\x00")}, {[]byte("sindothebrew\x00"), []byte("05C2\x00")}, {[]byte("siosacirclekorean\x00"), []byte("3274\x00")}, {[]byte("siosaparenkorean\x00"), []byte("3214\x00")}, {[]byte("sioscieuckorean\x00"), []byte("317E\x00")}, {[]byte("sioscirclekorean\x00"), []byte("3266\x00")}, {[]byte("sioskiyeokkorean\x00"), []byte("317A\x00")}, {[]byte("sioskorean\x00"), []byte("3145\x00")}, {[]byte("siosnieunkorean\x00"), []byte("317B\x00")}, {[]byte("siosparenkorean\x00"), []byte("3206\x00")}, {[]byte("siospieupkorean\x00"), []byte("317D\x00")}, {[]byte("siostikeutkorean\x00"), []byte("317C\x00")}, {[]byte("six\x00"), []byte("0036\x00")}, {[]byte("sixarabic\x00"), []byte("0666\x00")}, {[]byte("sixbengali\x00"), []byte("09EC\x00")}, {[]byte("sixcircle\x00"), []byte("2465\x00")}, {[]byte("sixcircleinversesansserif\x00"), []byte("278F\x00")}, {[]byte("sixdeva\x00"), []byte("096C\x00")}, {[]byte("sixgujarati\x00"), []byte("0AEC\x00")}, {[]byte("sixgurmukhi\x00"), []byte("0A6C\x00")}, {[]byte("sixhackarabic\x00"), []byte("0666\x00")}, {[]byte("sixhangzhou\x00"), []byte("3026\x00")}, {[]byte("sixideographicparen\x00"), []byte("3225\x00")}, {[]byte("sixinferior\x00"), []byte("2086\x00")}, {[]byte("sixmonospace\x00"), []byte("FF16\x00")}, {[]byte("sixoldstyle\x00"), []byte("F736\x00")}, {[]byte("sixparen\x00"), []byte("2479\x00")}, {[]byte("sixperiod\x00"), []byte("248D\x00")}, {[]byte("sixpersian\x00"), []byte("06F6\x00")}, {[]byte("sixroman\x00"), []byte("2175\x00")}, {[]byte("sixsuperior\x00"), []byte("2076\x00")}, {[]byte("sixteencircle\x00"), []byte("246F\x00")}, {[]byte("sixteencurrencydenominatorbengali\x00"), []byte("09F9\x00")}, {[]byte("sixteenparen\x00"), []byte("2483\x00")}, {[]byte("sixteenperiod\x00"), []byte("2497\x00")}, {[]byte("sixthai\x00"), []byte("0E56\x00")}, {[]byte("slash\x00"), []byte("002F\x00")}, {[]byte("slashmonospace\x00"), []byte("FF0F\x00")}, {[]byte("slong\x00"), []byte("017F\x00")}, {[]byte("slongdotaccent\x00"), []byte("1E9B\x00")}, {[]byte("smileface\x00"), []byte("263A\x00")}, {[]byte("smonospace\x00"), []byte("FF53\x00")}, {[]byte("sofpasuqhebrew\x00"), []byte("05C3\x00")}, {[]byte("softhyphen\x00"), []byte("00AD\x00")}, {[]byte("softsigncyrillic\x00"), []byte("044C\x00")}, {[]byte("sohiragana\x00"), []byte("305D\x00")}, {[]byte("sokatakana\x00"), []byte("30BD\x00")}, {[]byte("sokatakanahalfwidth\x00"), []byte("FF7F\x00")}, {[]byte("soliduslongoverlaycmb\x00"), []byte("0338\x00")}, {[]byte("solidusshortoverlaycmb\x00"), []byte("0337\x00")}, {[]byte("sorusithai\x00"), []byte("0E29\x00")}, {[]byte("sosalathai\x00"), []byte("0E28\x00")}, {[]byte("sosothai\x00"), []byte("0E0B\x00")}, {[]byte("sosuathai\x00"), []byte("0E2A\x00")}, {[]byte("space\x00"), []byte("0020\x00")}, {[]byte("spacehackarabic\x00"), []byte("0020\x00")}, {[]byte("spade\x00"), []byte("2660\x00")}, {[]byte("spadesuitblack\x00"), []byte("2660\x00")}, {[]byte("spadesuitwhite\x00"), []byte("2664\x00")}, {[]byte("sparen\x00"), []byte("24AE\x00")}, {[]byte("squarebelowcmb\x00"), []byte("033B\x00")}, {[]byte("squarecc\x00"), []byte("33C4\x00")}, {[]byte("squarecm\x00"), []byte("339D\x00")}, {[]byte("squarediagonalcrosshatchfill\x00"), []byte("25A9\x00")}, {[]byte("squarehorizontalfill\x00"), []byte("25A4\x00")}, {[]byte("squarekg\x00"), []byte("338F\x00")}, {[]byte("squarekm\x00"), []byte("339E\x00")}, {[]byte("squarekmcapital\x00"), []byte("33CE\x00")}, {[]byte("squareln\x00"), []byte("33D1\x00")}, {[]byte("squarelog\x00"), []byte("33D2\x00")}, {[]byte("squaremg\x00"), []byte("338E\x00")}, {[]byte("squaremil\x00"), []byte("33D5\x00")}, {[]byte("squaremm\x00"), []byte("339C\x00")}, {[]byte("squaremsquared\x00"), []byte("33A1\x00")}, {[]byte("squareorthogonalcrosshatchfill\x00"), []byte("25A6\x00")}, {[]byte("squareupperlefttolowerrightfill\x00"), []byte("25A7\x00")}, {[]byte("squareupperrighttolowerleftfill\x00"), []byte("25A8\x00")}, {[]byte("squareverticalfill\x00"), []byte("25A5\x00")}, {[]byte("squarewhitewithsmallblack\x00"), []byte("25A3\x00")}, {[]byte("srsquare\x00"), []byte("33DB\x00")}, {[]byte("ssabengali\x00"), []byte("09B7\x00")}, {[]byte("ssadeva\x00"), []byte("0937\x00")}, {[]byte("ssagujarati\x00"), []byte("0AB7\x00")}, {[]byte("ssangcieuckorean\x00"), []byte("3149\x00")}, {[]byte("ssanghieuhkorean\x00"), []byte("3185\x00")}, {[]byte("ssangieungkorean\x00"), []byte("3180\x00")}, {[]byte("ssangkiyeokkorean\x00"), []byte("3132\x00")}, {[]byte("ssangnieunkorean\x00"), []byte("3165\x00")}, {[]byte("ssangpieupkorean\x00"), []byte("3143\x00")}, {[]byte("ssangsioskorean\x00"), []byte("3146\x00")}, {[]byte("ssangtikeutkorean\x00"), []byte("3138\x00")}, {[]byte("ssuperior\x00"), []byte("F6F2\x00")}, {[]byte("sterling\x00"), []byte("00A3\x00")}, {[]byte("sterlingmonospace\x00"), []byte("FFE1\x00")}, {[]byte("strokelongoverlaycmb\x00"), []byte("0336\x00")}, {[]byte("strokeshortoverlaycmb\x00"), []byte("0335\x00")}, {[]byte("subset\x00"), []byte("2282\x00")}, {[]byte("subsetnotequal\x00"), []byte("228A\x00")}, {[]byte("subsetorequal\x00"), []byte("2286\x00")}, {[]byte("succeeds\x00"), []byte("227B\x00")}, {[]byte("suchthat\x00"), []byte("220B\x00")}, {[]byte("suhiragana\x00"), []byte("3059\x00")}, {[]byte("sukatakana\x00"), []byte("30B9\x00")}, {[]byte("sukatakanahalfwidth\x00"), []byte("FF7D\x00")}, {[]byte("sukunarabic\x00"), []byte("0652\x00")}, {[]byte("summation\x00"), []byte("2211\x00")}, {[]byte("sun\x00"), []byte("263C\x00")}, {[]byte("superset\x00"), []byte("2283\x00")}, {[]byte("supersetnotequal\x00"), []byte("228B\x00")}, {[]byte("supersetorequal\x00"), []byte("2287\x00")}, {[]byte("svsquare\x00"), []byte("33DC\x00")}, {[]byte("syouwaerasquare\x00"), []byte("337C\x00")}, {[]byte("t\x00"), []byte("0074\x00")}, {[]byte("tabengali\x00"), []byte("09A4\x00")}, {[]byte("tackdown\x00"), []byte("22A4\x00")}, {[]byte("tackleft\x00"), []byte("22A3\x00")}, {[]byte("tadeva\x00"), []byte("0924\x00")}, {[]byte("tagujarati\x00"), []byte("0AA4\x00")}, {[]byte("tagurmukhi\x00"), []byte("0A24\x00")}, {[]byte("taharabic\x00"), []byte("0637\x00")}, {[]byte("tahfinalarabic\x00"), []byte("FEC2\x00")}, {[]byte("tahinitialarabic\x00"), []byte("FEC3\x00")}, {[]byte("tahiragana\x00"), []byte("305F\x00")}, {[]byte("tahmedialarabic\x00"), []byte("FEC4\x00")}, {[]byte("taisyouerasquare\x00"), []byte("337D\x00")}, {[]byte("takatakana\x00"), []byte("30BF\x00")}, {[]byte("takatakanahalfwidth\x00"), []byte("FF80\x00")}, {[]byte("tatweelarabic\x00"), []byte("0640\x00")}, {[]byte("tau\x00"), []byte("03C4\x00")}, {[]byte("tav\x00"), []byte("05EA\x00")}, {[]byte("tavdages\x00"), []byte("FB4A\x00")}, {[]byte("tavdagesh\x00"), []byte("FB4A\x00")}, {[]byte("tavdageshhebrew\x00"), []byte("FB4A\x00")}, {[]byte("tavhebrew\x00"), []byte("05EA\x00")}, {[]byte("tbar\x00"), []byte("0167\x00")}, {[]byte("tbopomofo\x00"), []byte("310A\x00")}, {[]byte("tcaron\x00"), []byte("0165\x00")}, {[]byte("tccurl\x00"), []byte("02A8\x00")}, {[]byte("tcedilla\x00"), []byte("0163\x00")}, {[]byte("tcheharabic\x00"), []byte("0686\x00")}, {[]byte("tchehfinalarabic\x00"), []byte("FB7B\x00")}, {[]byte("tchehinitialarabic\x00"), []byte("FB7C\x00")}, {[]byte("tchehmedialarabic\x00"), []byte("FB7D\x00")}, {[]byte("tchehmeeminitialarabic\x00"), []byte("FB7C FEE4\x00")}, {[]byte("tcircle\x00"), []byte("24E3\x00")}, {[]byte("tcircumflexbelow\x00"), []byte("1E71\x00")}, {[]byte("tcommaaccent\x00"), []byte("0163\x00")}, {[]byte("tdieresis\x00"), []byte("1E97\x00")}, {[]byte("tdotaccent\x00"), []byte("1E6B\x00")}, {[]byte("tdotbelow\x00"), []byte("1E6D\x00")}, {[]byte("tecyrillic\x00"), []byte("0442\x00")}, {[]byte("tedescendercyrillic\x00"), []byte("04AD\x00")}, {[]byte("teharabic\x00"), []byte("062A\x00")}, {[]byte("tehfinalarabic\x00"), []byte("FE96\x00")}, {[]byte("tehhahinitialarabic\x00"), []byte("FCA2\x00")}, {[]byte("tehhahisolatedarabic\x00"), []byte("FC0C\x00")}, {[]byte("tehinitialarabic\x00"), []byte("FE97\x00")}, {[]byte("tehiragana\x00"), []byte("3066\x00")}, {[]byte("tehjeeminitialarabic\x00"), []byte("FCA1\x00")}, {[]byte("tehjeemisolatedarabic\x00"), []byte("FC0B\x00")}, {[]byte("tehmarbutaarabic\x00"), []byte("0629\x00")}, {[]byte("tehmarbutafinalarabic\x00"), []byte("FE94\x00")}, {[]byte("tehmedialarabic\x00"), []byte("FE98\x00")}, {[]byte("tehmeeminitialarabic\x00"), []byte("FCA4\x00")}, {[]byte("tehmeemisolatedarabic\x00"), []byte("FC0E\x00")}, {[]byte("tehnoonfinalarabic\x00"), []byte("FC73\x00")}, {[]byte("tekatakana\x00"), []byte("30C6\x00")}, {[]byte("tekatakanahalfwidth\x00"), []byte("FF83\x00")}, {[]byte("telephone\x00"), []byte("2121\x00")}, {[]byte("telephoneblack\x00"), []byte("260E\x00")}, {[]byte("telishagedolahebrew\x00"), []byte("05A0\x00")}, {[]byte("telishaqetanahebrew\x00"), []byte("05A9\x00")}, {[]byte("tencircle\x00"), []byte("2469\x00")}, {[]byte("tenideographicparen\x00"), []byte("3229\x00")}, {[]byte("tenparen\x00"), []byte("247D\x00")}, {[]byte("tenperiod\x00"), []byte("2491\x00")}, {[]byte("tenroman\x00"), []byte("2179\x00")}, {[]byte("tesh\x00"), []byte("02A7\x00")}, {[]byte("tet\x00"), []byte("05D8\x00")}, {[]byte("tetdagesh\x00"), []byte("FB38\x00")}, {[]byte("tetdageshhebrew\x00"), []byte("FB38\x00")}, {[]byte("tethebrew\x00"), []byte("05D8\x00")}, {[]byte("tetsecyrillic\x00"), []byte("04B5\x00")}, {[]byte("tevirhebrew\x00"), []byte("059B\x00")}, {[]byte("tevirlefthebrew\x00"), []byte("059B\x00")}, {[]byte("thabengali\x00"), []byte("09A5\x00")}, {[]byte("thadeva\x00"), []byte("0925\x00")}, {[]byte("thagujarati\x00"), []byte("0AA5\x00")}, {[]byte("thagurmukhi\x00"), []byte("0A25\x00")}, {[]byte("thalarabic\x00"), []byte("0630\x00")}, {[]byte("thalfinalarabic\x00"), []byte("FEAC\x00")}, {[]byte("thanthakhatlowleftthai\x00"), []byte("F898\x00")}, {[]byte("thanthakhatlowrightthai\x00"), []byte("F897\x00")}, {[]byte("thanthakhatthai\x00"), []byte("0E4C\x00")}, {[]byte("thanthakhatupperleftthai\x00"), []byte("F896\x00")}, {[]byte("theharabic\x00"), []byte("062B\x00")}, {[]byte("thehfinalarabic\x00"), []byte("FE9A\x00")}, {[]byte("thehinitialarabic\x00"), []byte("FE9B\x00")}, {[]byte("thehmedialarabic\x00"), []byte("FE9C\x00")}, {[]byte("thereexists\x00"), []byte("2203\x00")}, {[]byte("therefore\x00"), []byte("2234\x00")}, {[]byte("theta\x00"), []byte("03B8\x00")}, {[]byte("theta1\x00"), []byte("03D1\x00")}, {[]byte("thetasymbolgreek\x00"), []byte("03D1\x00")}, {[]byte("thieuthacirclekorean\x00"), []byte("3279\x00")}, {[]byte("thieuthaparenkorean\x00"), []byte("3219\x00")}, {[]byte("thieuthcirclekorean\x00"), []byte("326B\x00")}, {[]byte("thieuthkorean\x00"), []byte("314C\x00")}, {[]byte("thieuthparenkorean\x00"), []byte("320B\x00")}, {[]byte("thirteencircle\x00"), []byte("246C\x00")}, {[]byte("thirteenparen\x00"), []byte("2480\x00")}, {[]byte("thirteenperiod\x00"), []byte("2494\x00")}, {[]byte("thonangmonthothai\x00"), []byte("0E11\x00")}, {[]byte("thook\x00"), []byte("01AD\x00")}, {[]byte("thophuthaothai\x00"), []byte("0E12\x00")}, {[]byte("thorn\x00"), []byte("00FE\x00")}, {[]byte("thothahanthai\x00"), []byte("0E17\x00")}, {[]byte("thothanthai\x00"), []byte("0E10\x00")}, {[]byte("thothongthai\x00"), []byte("0E18\x00")}, {[]byte("thothungthai\x00"), []byte("0E16\x00")}, {[]byte("thousandcyrillic\x00"), []byte("0482\x00")}, {[]byte("thousandsseparatorarabic\x00"), []byte("066C\x00")}, {[]byte("thousandsseparatorpersian\x00"), []byte("066C\x00")}, {[]byte("three\x00"), []byte("0033\x00")}, {[]byte("threearabic\x00"), []byte("0663\x00")}, {[]byte("threebengali\x00"), []byte("09E9\x00")}, {[]byte("threecircle\x00"), []byte("2462\x00")}, {[]byte("threecircleinversesansserif\x00"), []byte("278C\x00")}, {[]byte("threedeva\x00"), []byte("0969\x00")}, {[]byte("threeeighths\x00"), []byte("215C\x00")}, {[]byte("threegujarati\x00"), []byte("0AE9\x00")}, {[]byte("threegurmukhi\x00"), []byte("0A69\x00")}, {[]byte("threehackarabic\x00"), []byte("0663\x00")}, {[]byte("threehangzhou\x00"), []byte("3023\x00")}, {[]byte("threeideographicparen\x00"), []byte("3222\x00")}, {[]byte("threeinferior\x00"), []byte("2083\x00")}, {[]byte("threemonospace\x00"), []byte("FF13\x00")}, {[]byte("threenumeratorbengali\x00"), []byte("09F6\x00")}, {[]byte("threeoldstyle\x00"), []byte("F733\x00")}, {[]byte("threeparen\x00"), []byte("2476\x00")}, {[]byte("threeperiod\x00"), []byte("248A\x00")}, {[]byte("threepersian\x00"), []byte("06F3\x00")}, {[]byte("threequarters\x00"), []byte("00BE\x00")}, {[]byte("threequartersemdash\x00"), []byte("F6DE\x00")}, {[]byte("threeroman\x00"), []byte("2172\x00")}, {[]byte("threesuperior\x00"), []byte("00B3\x00")}, {[]byte("threethai\x00"), []byte("0E53\x00")}, {[]byte("thzsquare\x00"), []byte("3394\x00")}, {[]byte("tihiragana\x00"), []byte("3061\x00")}, {[]byte("tikatakana\x00"), []byte("30C1\x00")}, {[]byte("tikatakanahalfwidth\x00"), []byte("FF81\x00")}, {[]byte("tikeutacirclekorean\x00"), []byte("3270\x00")}, {[]byte("tikeutaparenkorean\x00"), []byte("3210\x00")}, {[]byte("tikeutcirclekorean\x00"), []byte("3262\x00")}, {[]byte("tikeutkorean\x00"), []byte("3137\x00")}, {[]byte("tikeutparenkorean\x00"), []byte("3202\x00")}, {[]byte("tilde\x00"), []byte("02DC\x00")}, {[]byte("tildebelowcmb\x00"), []byte("0330\x00")}, {[]byte("tildecmb\x00"), []byte("0303\x00")}, {[]byte("tildecomb\x00"), []byte("0303\x00")}, {[]byte("tildedoublecmb\x00"), []byte("0360\x00")}, {[]byte("tildeoperator\x00"), []byte("223C\x00")}, {[]byte("tildeoverlaycmb\x00"), []byte("0334\x00")}, {[]byte("tildeverticalcmb\x00"), []byte("033E\x00")}, {[]byte("timescircle\x00"), []byte("2297\x00")}, {[]byte("tipehahebrew\x00"), []byte("0596\x00")}, {[]byte("tipehalefthebrew\x00"), []byte("0596\x00")}, {[]byte("tippigurmukhi\x00"), []byte("0A70\x00")}, {[]byte("titlocyrilliccmb\x00"), []byte("0483\x00")}, {[]byte("tiwnarmenian\x00"), []byte("057F\x00")}, {[]byte("tlinebelow\x00"), []byte("1E6F\x00")}, {[]byte("tmonospace\x00"), []byte("FF54\x00")}, {[]byte("toarmenian\x00"), []byte("0569\x00")}, {[]byte("tohiragana\x00"), []byte("3068\x00")}, {[]byte("tokatakana\x00"), []byte("30C8\x00")}, {[]byte("tokatakanahalfwidth\x00"), []byte("FF84\x00")}, {[]byte("tonebarextrahighmod\x00"), []byte("02E5\x00")}, {[]byte("tonebarextralowmod\x00"), []byte("02E9\x00")}, {[]byte("tonebarhighmod\x00"), []byte("02E6\x00")}, {[]byte("tonebarlowmod\x00"), []byte("02E8\x00")}, {[]byte("tonebarmidmod\x00"), []byte("02E7\x00")}, {[]byte("tonefive\x00"), []byte("01BD\x00")}, {[]byte("tonesix\x00"), []byte("0185\x00")}, {[]byte("tonetwo\x00"), []byte("01A8\x00")}, {[]byte("tonos\x00"), []byte("0384\x00")}, {[]byte("tonsquare\x00"), []byte("3327\x00")}, {[]byte("topatakthai\x00"), []byte("0E0F\x00")}, {[]byte("tortoiseshellbracketleft\x00"), []byte("3014\x00")}, {[]byte("tortoiseshellbracketleftsmall\x00"), []byte("FE5D\x00")}, {[]byte("tortoiseshellbracketleftvertical\x00"), []byte("FE39\x00")}, {[]byte("tortoiseshellbracketright\x00"), []byte("3015\x00")}, {[]byte("tortoiseshellbracketrightsmall\x00"), []byte("FE5E\x00")}, {[]byte("tortoiseshellbracketrightvertical\x00"), []byte("FE3A\x00")}, {[]byte("totaothai\x00"), []byte("0E15\x00")}, {[]byte("tpalatalhook\x00"), []byte("01AB\x00")}, {[]byte("tparen\x00"), []byte("24AF\x00")}, {[]byte("trademark\x00"), []byte("2122\x00")}, {[]byte("trademarksans\x00"), []byte("F8EA\x00")}, {[]byte("trademarkserif\x00"), []byte("F6DB\x00")}, {[]byte("tretroflexhook\x00"), []byte("0288\x00")}, {[]byte("triagdn\x00"), []byte("25BC\x00")}, {[]byte("triaglf\x00"), []byte("25C4\x00")}, {[]byte("triagrt\x00"), []byte("25BA\x00")}, {[]byte("triagup\x00"), []byte("25B2\x00")}, {[]byte("ts\x00"), []byte("02A6\x00")}, {[]byte("tsadi\x00"), []byte("05E6\x00")}, {[]byte("tsadidagesh\x00"), []byte("FB46\x00")}, {[]byte("tsadidageshhebrew\x00"), []byte("FB46\x00")}, {[]byte("tsadihebrew\x00"), []byte("05E6\x00")}, {[]byte("tsecyrillic\x00"), []byte("0446\x00")}, {[]byte("tsere\x00"), []byte("05B5\x00")}, {[]byte("tsere12\x00"), []byte("05B5\x00")}, {[]byte("tsere1e\x00"), []byte("05B5\x00")}, {[]byte("tsere2b\x00"), []byte("05B5\x00")}, {[]byte("tserehebrew\x00"), []byte("05B5\x00")}, {[]byte("tserenarrowhebrew\x00"), []byte("05B5\x00")}, {[]byte("tserequarterhebrew\x00"), []byte("05B5\x00")}, {[]byte("tserewidehebrew\x00"), []byte("05B5\x00")}, {[]byte("tshecyrillic\x00"), []byte("045B\x00")}, {[]byte("tsuperior\x00"), []byte("F6F3\x00")}, {[]byte("ttabengali\x00"), []byte("099F\x00")}, {[]byte("ttadeva\x00"), []byte("091F\x00")}, {[]byte("ttagujarati\x00"), []byte("0A9F\x00")}, {[]byte("ttagurmukhi\x00"), []byte("0A1F\x00")}, {[]byte("tteharabic\x00"), []byte("0679\x00")}, {[]byte("ttehfinalarabic\x00"), []byte("FB67\x00")}, {[]byte("ttehinitialarabic\x00"), []byte("FB68\x00")}, {[]byte("ttehmedialarabic\x00"), []byte("FB69\x00")}, {[]byte("tthabengali\x00"), []byte("09A0\x00")}, {[]byte("tthadeva\x00"), []byte("0920\x00")}, {[]byte("tthagujarati\x00"), []byte("0AA0\x00")}, {[]byte("tthagurmukhi\x00"), []byte("0A20\x00")}, {[]byte("tturned\x00"), []byte("0287\x00")}, {[]byte("tuhiragana\x00"), []byte("3064\x00")}, {[]byte("tukatakana\x00"), []byte("30C4\x00")}, {[]byte("tukatakanahalfwidth\x00"), []byte("FF82\x00")}, {[]byte("tusmallhiragana\x00"), []byte("3063\x00")}, {[]byte("tusmallkatakana\x00"), []byte("30C3\x00")}, {[]byte("tusmallkatakanahalfwidth\x00"), []byte("FF6F\x00")}, {[]byte("twelvecircle\x00"), []byte("246B\x00")}, {[]byte("twelveparen\x00"), []byte("247F\x00")}, {[]byte("twelveperiod\x00"), []byte("2493\x00")}, {[]byte("twelveroman\x00"), []byte("217B\x00")}, {[]byte("twentycircle\x00"), []byte("2473\x00")}, {[]byte("twentyhangzhou\x00"), []byte("5344\x00")}, {[]byte("twentyparen\x00"), []byte("2487\x00")}, {[]byte("twentyperiod\x00"), []byte("249B\x00")}, {[]byte("two\x00"), []byte("0032\x00")}, {[]byte("twoarabic\x00"), []byte("0662\x00")}, {[]byte("twobengali\x00"), []byte("09E8\x00")}, {[]byte("twocircle\x00"), []byte("2461\x00")}, {[]byte("twocircleinversesansserif\x00"), []byte("278B\x00")}, {[]byte("twodeva\x00"), []byte("0968\x00")}, {[]byte("twodotenleader\x00"), []byte("2025\x00")}, {[]byte("twodotleader\x00"), []byte("2025\x00")}, {[]byte("twodotleadervertical\x00"), []byte("FE30\x00")}, {[]byte("twogujarati\x00"), []byte("0AE8\x00")}, {[]byte("twogurmukhi\x00"), []byte("0A68\x00")}, {[]byte("twohackarabic\x00"), []byte("0662\x00")}, {[]byte("twohangzhou\x00"), []byte("3022\x00")}, {[]byte("twoideographicparen\x00"), []byte("3221\x00")}, {[]byte("twoinferior\x00"), []byte("2082\x00")}, {[]byte("twomonospace\x00"), []byte("FF12\x00")}, {[]byte("twonumeratorbengali\x00"), []byte("09F5\x00")}, {[]byte("twooldstyle\x00"), []byte("F732\x00")}, {[]byte("twoparen\x00"), []byte("2475\x00")}, {[]byte("twoperiod\x00"), []byte("2489\x00")}, {[]byte("twopersian\x00"), []byte("06F2\x00")}, {[]byte("tworoman\x00"), []byte("2171\x00")}, {[]byte("twostroke\x00"), []byte("01BB\x00")}, {[]byte("twosuperior\x00"), []byte("00B2\x00")}, {[]byte("twothai\x00"), []byte("0E52\x00")}, {[]byte("twothirds\x00"), []byte("2154\x00")}, {[]byte("u\x00"), []byte("0075\x00")}, {[]byte("uacute\x00"), []byte("00FA\x00")}, {[]byte("ubar\x00"), []byte("0289\x00")}, {[]byte("ubengali\x00"), []byte("0989\x00")}, {[]byte("ubopomofo\x00"), []byte("3128\x00")}, {[]byte("ubreve\x00"), []byte("016D\x00")}, {[]byte("ucaron\x00"), []byte("01D4\x00")}, {[]byte("ucircle\x00"), []byte("24E4\x00")}, {[]byte("ucircumflex\x00"), []byte("00FB\x00")}, {[]byte("ucircumflexbelow\x00"), []byte("1E77\x00")}, {[]byte("ucyrillic\x00"), []byte("0443\x00")}, {[]byte("udattadeva\x00"), []byte("0951\x00")}, {[]byte("udblacute\x00"), []byte("0171\x00")}, {[]byte("udblgrave\x00"), []byte("0215\x00")}, {[]byte("udeva\x00"), []byte("0909\x00")}, {[]byte("udieresis\x00"), []byte("00FC\x00")}, {[]byte("udieresisacute\x00"), []byte("01D8\x00")}, {[]byte("udieresisbelow\x00"), []byte("1E73\x00")}, {[]byte("udieresiscaron\x00"), []byte("01DA\x00")}, {[]byte("udieresiscyrillic\x00"), []byte("04F1\x00")}, {[]byte("udieresisgrave\x00"), []byte("01DC\x00")}, {[]byte("udieresismacron\x00"), []byte("01D6\x00")}, {[]byte("udotbelow\x00"), []byte("1EE5\x00")}, {[]byte("ugrave\x00"), []byte("00F9\x00")}, {[]byte("ugujarati\x00"), []byte("0A89\x00")}, {[]byte("ugurmukhi\x00"), []byte("0A09\x00")}, {[]byte("uhiragana\x00"), []byte("3046\x00")}, {[]byte("uhookabove\x00"), []byte("1EE7\x00")}, {[]byte("uhorn\x00"), []byte("01B0\x00")}, {[]byte("uhornacute\x00"), []byte("1EE9\x00")}, {[]byte("uhorndotbelow\x00"), []byte("1EF1\x00")}, {[]byte("uhorngrave\x00"), []byte("1EEB\x00")}, {[]byte("uhornhookabove\x00"), []byte("1EED\x00")}, {[]byte("uhorntilde\x00"), []byte("1EEF\x00")}, {[]byte("uhungarumlaut\x00"), []byte("0171\x00")}, {[]byte("uhungarumlautcyrillic\x00"), []byte("04F3\x00")}, {[]byte("uinvertedbreve\x00"), []byte("0217\x00")}, {[]byte("ukatakana\x00"), []byte("30A6\x00")}, {[]byte("ukatakanahalfwidth\x00"), []byte("FF73\x00")}, {[]byte("ukcyrillic\x00"), []byte("0479\x00")}, {[]byte("ukorean\x00"), []byte("315C\x00")}, {[]byte("umacron\x00"), []byte("016B\x00")}, {[]byte("umacroncyrillic\x00"), []byte("04EF\x00")}, {[]byte("umacrondieresis\x00"), []byte("1E7B\x00")}, {[]byte("umatragurmukhi\x00"), []byte("0A41\x00")}, {[]byte("umonospace\x00"), []byte("FF55\x00")}, {[]byte("underscore\x00"), []byte("005F\x00")}, {[]byte("underscoredbl\x00"), []byte("2017\x00")}, {[]byte("underscoremonospace\x00"), []byte("FF3F\x00")}, {[]byte("underscorevertical\x00"), []byte("FE33\x00")}, {[]byte("underscorewavy\x00"), []byte("FE4F\x00")}, {[]byte("union\x00"), []byte("222A\x00")}, {[]byte("universal\x00"), []byte("2200\x00")}, {[]byte("uogonek\x00"), []byte("0173\x00")}, {[]byte("uparen\x00"), []byte("24B0\x00")}, {[]byte("upblock\x00"), []byte("2580\x00")}, {[]byte("upperdothebrew\x00"), []byte("05C4\x00")}, {[]byte("upsilon\x00"), []byte("03C5\x00")}, {[]byte("upsilondieresis\x00"), []byte("03CB\x00")}, {[]byte("upsilondieresistonos\x00"), []byte("03B0\x00")}, {[]byte("upsilonlatin\x00"), []byte("028A\x00")}, {[]byte("upsilontonos\x00"), []byte("03CD\x00")}, {[]byte("uptackbelowcmb\x00"), []byte("031D\x00")}, {[]byte("uptackmod\x00"), []byte("02D4\x00")}, {[]byte("uragurmukhi\x00"), []byte("0A73\x00")}, {[]byte("uring\x00"), []byte("016F\x00")}, {[]byte("ushortcyrillic\x00"), []byte("045E\x00")}, {[]byte("usmallhiragana\x00"), []byte("3045\x00")}, {[]byte("usmallkatakana\x00"), []byte("30A5\x00")}, {[]byte("usmallkatakanahalfwidth\x00"), []byte("FF69\x00")}, {[]byte("ustraightcyrillic\x00"), []byte("04AF\x00")}, {[]byte("ustraightstrokecyrillic\x00"), []byte("04B1\x00")}, {[]byte("utilde\x00"), []byte("0169\x00")}, {[]byte("utildeacute\x00"), []byte("1E79\x00")}, {[]byte("utildebelow\x00"), []byte("1E75\x00")}, {[]byte("uubengali\x00"), []byte("098A\x00")}, {[]byte("uudeva\x00"), []byte("090A\x00")}, {[]byte("uugujarati\x00"), []byte("0A8A\x00")}, {[]byte("uugurmukhi\x00"), []byte("0A0A\x00")}, {[]byte("uumatragurmukhi\x00"), []byte("0A42\x00")}, {[]byte("uuvowelsignbengali\x00"), []byte("09C2\x00")}, {[]byte("uuvowelsigndeva\x00"), []byte("0942\x00")}, {[]byte("uuvowelsigngujarati\x00"), []byte("0AC2\x00")}, {[]byte("uvowelsignbengali\x00"), []byte("09C1\x00")}, {[]byte("uvowelsigndeva\x00"), []byte("0941\x00")}, {[]byte("uvowelsigngujarati\x00"), []byte("0AC1\x00")}, {[]byte("v\x00"), []byte("0076\x00")}, {[]byte("vadeva\x00"), []byte("0935\x00")}, {[]byte("vagujarati\x00"), []byte("0AB5\x00")}, {[]byte("vagurmukhi\x00"), []byte("0A35\x00")}, {[]byte("vakatakana\x00"), []byte("30F7\x00")}, {[]byte("vav\x00"), []byte("05D5\x00")}, {[]byte("vavdagesh\x00"), []byte("FB35\x00")}, {[]byte("vavdagesh65\x00"), []byte("FB35\x00")}, {[]byte("vavdageshhebrew\x00"), []byte("FB35\x00")}, {[]byte("vavhebrew\x00"), []byte("05D5\x00")}, {[]byte("vavholam\x00"), []byte("FB4B\x00")}, {[]byte("vavholamhebrew\x00"), []byte("FB4B\x00")}, {[]byte("vavvavhebrew\x00"), []byte("05F0\x00")}, {[]byte("vavyodhebrew\x00"), []byte("05F1\x00")}, {[]byte("vcircle\x00"), []byte("24E5\x00")}, {[]byte("vdotbelow\x00"), []byte("1E7F\x00")}, {[]byte("vecyrillic\x00"), []byte("0432\x00")}, {[]byte("veharabic\x00"), []byte("06A4\x00")}, {[]byte("vehfinalarabic\x00"), []byte("FB6B\x00")}, {[]byte("vehinitialarabic\x00"), []byte("FB6C\x00")}, {[]byte("vehmedialarabic\x00"), []byte("FB6D\x00")}, {[]byte("vekatakana\x00"), []byte("30F9\x00")}, {[]byte("venus\x00"), []byte("2640\x00")}, {[]byte("verticalbar\x00"), []byte("007C\x00")}, {[]byte("verticallineabovecmb\x00"), []byte("030D\x00")}, {[]byte("verticallinebelowcmb\x00"), []byte("0329\x00")}, {[]byte("verticallinelowmod\x00"), []byte("02CC\x00")}, {[]byte("verticallinemod\x00"), []byte("02C8\x00")}, {[]byte("vewarmenian\x00"), []byte("057E\x00")}, {[]byte("vhook\x00"), []byte("028B\x00")}, {[]byte("vikatakana\x00"), []byte("30F8\x00")}, {[]byte("viramabengali\x00"), []byte("09CD\x00")}, {[]byte("viramadeva\x00"), []byte("094D\x00")}, {[]byte("viramagujarati\x00"), []byte("0ACD\x00")}, {[]byte("visargabengali\x00"), []byte("0983\x00")}, {[]byte("visargadeva\x00"), []byte("0903\x00")}, {[]byte("visargagujarati\x00"), []byte("0A83\x00")}, {[]byte("vmonospace\x00"), []byte("FF56\x00")}, {[]byte("voarmenian\x00"), []byte("0578\x00")}, {[]byte("voicediterationhiragana\x00"), []byte("309E\x00")}, {[]byte("voicediterationkatakana\x00"), []byte("30FE\x00")}, {[]byte("voicedmarkkana\x00"), []byte("309B\x00")}, {[]byte("voicedmarkkanahalfwidth\x00"), []byte("FF9E\x00")}, {[]byte("vokatakana\x00"), []byte("30FA\x00")}, {[]byte("vparen\x00"), []byte("24B1\x00")}, {[]byte("vtilde\x00"), []byte("1E7D\x00")}, {[]byte("vturned\x00"), []byte("028C\x00")}, {[]byte("vuhiragana\x00"), []byte("3094\x00")}, {[]byte("vukatakana\x00"), []byte("30F4\x00")}, {[]byte("w\x00"), []byte("0077\x00")}, {[]byte("wacute\x00"), []byte("1E83\x00")}, {[]byte("waekorean\x00"), []byte("3159\x00")}, {[]byte("wahiragana\x00"), []byte("308F\x00")}, {[]byte("wakatakana\x00"), []byte("30EF\x00")}, {[]byte("wakatakanahalfwidth\x00"), []byte("FF9C\x00")}, {[]byte("wakorean\x00"), []byte("3158\x00")}, {[]byte("wasmallhiragana\x00"), []byte("308E\x00")}, {[]byte("wasmallkatakana\x00"), []byte("30EE\x00")}, {[]byte("wattosquare\x00"), []byte("3357\x00")}, {[]byte("wavedash\x00"), []byte("301C\x00")}, {[]byte("wavyunderscorevertical\x00"), []byte("FE34\x00")}, {[]byte("wawarabic\x00"), []byte("0648\x00")}, {[]byte("wawfinalarabic\x00"), []byte("FEEE\x00")}, {[]byte("wawhamzaabovearabic\x00"), []byte("0624\x00")}, {[]byte("wawhamzaabovefinalarabic\x00"), []byte("FE86\x00")}, {[]byte("wbsquare\x00"), []byte("33DD\x00")}, {[]byte("wcircle\x00"), []byte("24E6\x00")}, {[]byte("wcircumflex\x00"), []byte("0175\x00")}, {[]byte("wdieresis\x00"), []byte("1E85\x00")}, {[]byte("wdotaccent\x00"), []byte("1E87\x00")}, {[]byte("wdotbelow\x00"), []byte("1E89\x00")}, {[]byte("wehiragana\x00"), []byte("3091\x00")}, {[]byte("weierstrass\x00"), []byte("2118\x00")}, {[]byte("wekatakana\x00"), []byte("30F1\x00")}, {[]byte("wekorean\x00"), []byte("315E\x00")}, {[]byte("weokorean\x00"), []byte("315D\x00")}, {[]byte("wgrave\x00"), []byte("1E81\x00")}, {[]byte("whitebullet\x00"), []byte("25E6\x00")}, {[]byte("whitecircle\x00"), []byte("25CB\x00")}, {[]byte("whitecircleinverse\x00"), []byte("25D9\x00")}, {[]byte("whitecornerbracketleft\x00"), []byte("300E\x00")}, {[]byte("whitecornerbracketleftvertical\x00"), []byte("FE43\x00")}, {[]byte("whitecornerbracketright\x00"), []byte("300F\x00")}, {[]byte("whitecornerbracketrightvertical\x00"), []byte("FE44\x00")}, {[]byte("whitediamond\x00"), []byte("25C7\x00")}, {[]byte("whitediamondcontainingblacksmalldiamond\x00"), []byte("25C8\x00")}, {[]byte("whitedownpointingsmalltriangle\x00"), []byte("25BF\x00")}, {[]byte("whitedownpointingtriangle\x00"), []byte("25BD\x00")}, {[]byte("whiteleftpointingsmalltriangle\x00"), []byte("25C3\x00")}, {[]byte("whiteleftpointingtriangle\x00"), []byte("25C1\x00")}, {[]byte("whitelenticularbracketleft\x00"), []byte("3016\x00")}, {[]byte("whitelenticularbracketright\x00"), []byte("3017\x00")}, {[]byte("whiterightpointingsmalltriangle\x00"), []byte("25B9\x00")}, {[]byte("whiterightpointingtriangle\x00"), []byte("25B7\x00")}, {[]byte("whitesmallsquare\x00"), []byte("25AB\x00")}, {[]byte("whitesmilingface\x00"), []byte("263A\x00")}, {[]byte("whitesquare\x00"), []byte("25A1\x00")}, {[]byte("whitestar\x00"), []byte("2606\x00")}, {[]byte("whitetelephone\x00"), []byte("260F\x00")}, {[]byte("whitetortoiseshellbracketleft\x00"), []byte("3018\x00")}, {[]byte("whitetortoiseshellbracketright\x00"), []byte("3019\x00")}, {[]byte("whiteuppointingsmalltriangle\x00"), []byte("25B5\x00")}, {[]byte("whiteuppointingtriangle\x00"), []byte("25B3\x00")}, {[]byte("wihiragana\x00"), []byte("3090\x00")}, {[]byte("wikatakana\x00"), []byte("30F0\x00")}, {[]byte("wikorean\x00"), []byte("315F\x00")}, {[]byte("wmonospace\x00"), []byte("FF57\x00")}, {[]byte("wohiragana\x00"), []byte("3092\x00")}, {[]byte("wokatakana\x00"), []byte("30F2\x00")}, {[]byte("wokatakanahalfwidth\x00"), []byte("FF66\x00")}, {[]byte("won\x00"), []byte("20A9\x00")}, {[]byte("wonmonospace\x00"), []byte("FFE6\x00")}, {[]byte("wowaenthai\x00"), []byte("0E27\x00")}, {[]byte("wparen\x00"), []byte("24B2\x00")}, {[]byte("wring\x00"), []byte("1E98\x00")}, {[]byte("wsuperior\x00"), []byte("02B7\x00")}, {[]byte("wturned\x00"), []byte("028D\x00")}, {[]byte("wynn\x00"), []byte("01BF\x00")}, {[]byte("x\x00"), []byte("0078\x00")}, {[]byte("xabovecmb\x00"), []byte("033D\x00")}, {[]byte("xbopomofo\x00"), []byte("3112\x00")}, {[]byte("xcircle\x00"), []byte("24E7\x00")}, {[]byte("xdieresis\x00"), []byte("1E8D\x00")}, {[]byte("xdotaccent\x00"), []byte("1E8B\x00")}, {[]byte("xeharmenian\x00"), []byte("056D\x00")}, {[]byte("xi\x00"), []byte("03BE\x00")}, {[]byte("xmonospace\x00"), []byte("FF58\x00")}, {[]byte("xparen\x00"), []byte("24B3\x00")}, {[]byte("xsuperior\x00"), []byte("02E3\x00")}, {[]byte("y\x00"), []byte("0079\x00")}, {[]byte("yaadosquare\x00"), []byte("334E\x00")}, {[]byte("yabengali\x00"), []byte("09AF\x00")}, {[]byte("yacute\x00"), []byte("00FD\x00")}, {[]byte("yadeva\x00"), []byte("092F\x00")}, {[]byte("yaekorean\x00"), []byte("3152\x00")}, {[]byte("yagujarati\x00"), []byte("0AAF\x00")}, {[]byte("yagurmukhi\x00"), []byte("0A2F\x00")}, {[]byte("yahiragana\x00"), []byte("3084\x00")}, {[]byte("yakatakana\x00"), []byte("30E4\x00")}, {[]byte("yakatakanahalfwidth\x00"), []byte("FF94\x00")}, {[]byte("yakorean\x00"), []byte("3151\x00")}, {[]byte("yamakkanthai\x00"), []byte("0E4E\x00")}, {[]byte("yasmallhiragana\x00"), []byte("3083\x00")}, {[]byte("yasmallkatakana\x00"), []byte("30E3\x00")}, {[]byte("yasmallkatakanahalfwidth\x00"), []byte("FF6C\x00")}, {[]byte("yatcyrillic\x00"), []byte("0463\x00")}, {[]byte("ycircle\x00"), []byte("24E8\x00")}, {[]byte("ycircumflex\x00"), []byte("0177\x00")}, {[]byte("ydieresis\x00"), []byte("00FF\x00")}, {[]byte("ydotaccent\x00"), []byte("1E8F\x00")}, {[]byte("ydotbelow\x00"), []byte("1EF5\x00")}, {[]byte("yeharabic\x00"), []byte("064A\x00")}, {[]byte("yehbarreearabic\x00"), []byte("06D2\x00")}, {[]byte("yehbarreefinalarabic\x00"), []byte("FBAF\x00")}, {[]byte("yehfinalarabic\x00"), []byte("FEF2\x00")}, {[]byte("yehhamzaabovearabic\x00"), []byte("0626\x00")}, {[]byte("yehhamzaabovefinalarabic\x00"), []byte("FE8A\x00")}, {[]byte("yehhamzaaboveinitialarabic\x00"), []byte("FE8B\x00")}, {[]byte("yehhamzaabovemedialarabic\x00"), []byte("FE8C\x00")}, {[]byte("yehinitialarabic\x00"), []byte("FEF3\x00")}, {[]byte("yehmedialarabic\x00"), []byte("FEF4\x00")}, {[]byte("yehmeeminitialarabic\x00"), []byte("FCDD\x00")}, {[]byte("yehmeemisolatedarabic\x00"), []byte("FC58\x00")}, {[]byte("yehnoonfinalarabic\x00"), []byte("FC94\x00")}, {[]byte("yehthreedotsbelowarabic\x00"), []byte("06D1\x00")}, {[]byte("yekorean\x00"), []byte("3156\x00")}, {[]byte("yen\x00"), []byte("00A5\x00")}, {[]byte("yenmonospace\x00"), []byte("FFE5\x00")}, {[]byte("yeokorean\x00"), []byte("3155\x00")}, {[]byte("yeorinhieuhkorean\x00"), []byte("3186\x00")}, {[]byte("yerahbenyomohebrew\x00"), []byte("05AA\x00")}, {[]byte("yerahbenyomolefthebrew\x00"), []byte("05AA\x00")}, {[]byte("yericyrillic\x00"), []byte("044B\x00")}, {[]byte("yerudieresiscyrillic\x00"), []byte("04F9\x00")}, {[]byte("yesieungkorean\x00"), []byte("3181\x00")}, {[]byte("yesieungpansioskorean\x00"), []byte("3183\x00")}, {[]byte("yesieungsioskorean\x00"), []byte("3182\x00")}, {[]byte("yetivhebrew\x00"), []byte("059A\x00")}, {[]byte("ygrave\x00"), []byte("1EF3\x00")}, {[]byte("yhook\x00"), []byte("01B4\x00")}, {[]byte("yhookabove\x00"), []byte("1EF7\x00")}, {[]byte("yiarmenian\x00"), []byte("0575\x00")}, {[]byte("yicyrillic\x00"), []byte("0457\x00")}, {[]byte("yikorean\x00"), []byte("3162\x00")}, {[]byte("yinyang\x00"), []byte("262F\x00")}, {[]byte("yiwnarmenian\x00"), []byte("0582\x00")}, {[]byte("ymonospace\x00"), []byte("FF59\x00")}, {[]byte("yod\x00"), []byte("05D9\x00")}, {[]byte("yoddagesh\x00"), []byte("FB39\x00")}, {[]byte("yoddageshhebrew\x00"), []byte("FB39\x00")}, {[]byte("yodhebrew\x00"), []byte("05D9\x00")}, {[]byte("yodyodhebrew\x00"), []byte("05F2\x00")}, {[]byte("yodyodpatahhebrew\x00"), []byte("FB1F\x00")}, {[]byte("yohiragana\x00"), []byte("3088\x00")}, {[]byte("yoikorean\x00"), []byte("3189\x00")}, {[]byte("yokatakana\x00"), []byte("30E8\x00")}, {[]byte("yokatakanahalfwidth\x00"), []byte("FF96\x00")}, {[]byte("yokorean\x00"), []byte("315B\x00")}, {[]byte("yosmallhiragana\x00"), []byte("3087\x00")}, {[]byte("yosmallkatakana\x00"), []byte("30E7\x00")}, {[]byte("yosmallkatakanahalfwidth\x00"), []byte("FF6E\x00")}, {[]byte("yotgreek\x00"), []byte("03F3\x00")}, {[]byte("yoyaekorean\x00"), []byte("3188\x00")}, {[]byte("yoyakorean\x00"), []byte("3187\x00")}, {[]byte("yoyakthai\x00"), []byte("0E22\x00")}, {[]byte("yoyingthai\x00"), []byte("0E0D\x00")}, {[]byte("yparen\x00"), []byte("24B4\x00")}, {[]byte("ypogegrammeni\x00"), []byte("037A\x00")}, {[]byte("ypogegrammenigreekcmb\x00"), []byte("0345\x00")}, {[]byte("yr\x00"), []byte("01A6\x00")}, {[]byte("yring\x00"), []byte("1E99\x00")}, {[]byte("ysuperior\x00"), []byte("02B8\x00")}, {[]byte("ytilde\x00"), []byte("1EF9\x00")}, {[]byte("yturned\x00"), []byte("028E\x00")}, {[]byte("yuhiragana\x00"), []byte("3086\x00")}, {[]byte("yuikorean\x00"), []byte("318C\x00")}, {[]byte("yukatakana\x00"), []byte("30E6\x00")}, {[]byte("yukatakanahalfwidth\x00"), []byte("FF95\x00")}, {[]byte("yukorean\x00"), []byte("3160\x00")}, {[]byte("yusbigcyrillic\x00"), []byte("046B\x00")}, {[]byte("yusbigiotifiedcyrillic\x00"), []byte("046D\x00")}, {[]byte("yuslittlecyrillic\x00"), []byte("0467\x00")}, {[]byte("yuslittleiotifiedcyrillic\x00"), []byte("0469\x00")}, {[]byte("yusmallhiragana\x00"), []byte("3085\x00")}, {[]byte("yusmallkatakana\x00"), []byte("30E5\x00")}, {[]byte("yusmallkatakanahalfwidth\x00"), []byte("FF6D\x00")}, {[]byte("yuyekorean\x00"), []byte("318B\x00")}, {[]byte("yuyeokorean\x00"), []byte("318A\x00")}, {[]byte("yyabengali\x00"), []byte("09DF\x00")}, {[]byte("yyadeva\x00"), []byte("095F\x00")}, {[]byte("z\x00"), []byte("007A\x00")}, {[]byte("zaarmenian\x00"), []byte("0566\x00")}, {[]byte("zacute\x00"), []byte("017A\x00")}, {[]byte("zadeva\x00"), []byte("095B\x00")}, {[]byte("zagurmukhi\x00"), []byte("0A5B\x00")}, {[]byte("zaharabic\x00"), []byte("0638\x00")}, {[]byte("zahfinalarabic\x00"), []byte("FEC6\x00")}, {[]byte("zahinitialarabic\x00"), []byte("FEC7\x00")}, {[]byte("zahiragana\x00"), []byte("3056\x00")}, {[]byte("zahmedialarabic\x00"), []byte("FEC8\x00")}, {[]byte("zainarabic\x00"), []byte("0632\x00")}, {[]byte("zainfinalarabic\x00"), []byte("FEB0\x00")}, {[]byte("zakatakana\x00"), []byte("30B6\x00")}, {[]byte("zaqefgadolhebrew\x00"), []byte("0595\x00")}, {[]byte("zaqefqatanhebrew\x00"), []byte("0594\x00")}, {[]byte("zarqahebrew\x00"), []byte("0598\x00")}, {[]byte("zayin\x00"), []byte("05D6\x00")}, {[]byte("zayindagesh\x00"), []byte("FB36\x00")}, {[]byte("zayindageshhebrew\x00"), []byte("FB36\x00")}, {[]byte("zayinhebrew\x00"), []byte("05D6\x00")}, {[]byte("zbopomofo\x00"), []byte("3117\x00")}, {[]byte("zcaron\x00"), []byte("017E\x00")}, {[]byte("zcircle\x00"), []byte("24E9\x00")}, {[]byte("zcircumflex\x00"), []byte("1E91\x00")}, {[]byte("zcurl\x00"), []byte("0291\x00")}, {[]byte("zdot\x00"), []byte("017C\x00")}, {[]byte("zdotaccent\x00"), []byte("017C\x00")}, {[]byte("zdotbelow\x00"), []byte("1E93\x00")}, {[]byte("zecyrillic\x00"), []byte("0437\x00")}, {[]byte("zedescendercyrillic\x00"), []byte("0499\x00")}, {[]byte("zedieresiscyrillic\x00"), []byte("04DF\x00")}, {[]byte("zehiragana\x00"), []byte("305C\x00")}, {[]byte("zekatakana\x00"), []byte("30BC\x00")}, {[]byte("zero\x00"), []byte("0030\x00")}, {[]byte("zeroarabic\x00"), []byte("0660\x00")}, {[]byte("zerobengali\x00"), []byte("09E6\x00")}, {[]byte("zerodeva\x00"), []byte("0966\x00")}, {[]byte("zerogujarati\x00"), []byte("0AE6\x00")}, {[]byte("zerogurmukhi\x00"), []byte("0A66\x00")}, {[]byte("zerohackarabic\x00"), []byte("0660\x00")}, {[]byte("zeroinferior\x00"), []byte("2080\x00")}, {[]byte("zeromonospace\x00"), []byte("FF10\x00")}, {[]byte("zerooldstyle\x00"), []byte("F730\x00")}, {[]byte("zeropersian\x00"), []byte("06F0\x00")}, {[]byte("zerosuperior\x00"), []byte("2070\x00")}, {[]byte("zerothai\x00"), []byte("0E50\x00")}, {[]byte("zerowidthjoiner\x00"), []byte("FEFF\x00")}, {[]byte("zerowidthnonjoiner\x00"), []byte("200C\x00")}, {[]byte("zerowidthspace\x00"), []byte("200B\x00")}, {[]byte("zeta\x00"), []byte("03B6\x00")}, {[]byte("zhbopomofo\x00"), []byte("3113\x00")}, {[]byte("zhearmenian\x00"), []byte("056A\x00")}, {[]byte("zhebrevecyrillic\x00"), []byte("04C2\x00")}, {[]byte("zhecyrillic\x00"), []byte("0436\x00")}, {[]byte("zhedescendercyrillic\x00"), []byte("0497\x00")}, {[]byte("zhedieresiscyrillic\x00"), []byte("04DD\x00")}, {[]byte("zihiragana\x00"), []byte("3058\x00")}, {[]byte("zikatakana\x00"), []byte("30B8\x00")}, {[]byte("zinorhebrew\x00"), []byte("05AE\x00")}, {[]byte("zlinebelow\x00"), []byte("1E95\x00")}, {[]byte("zmonospace\x00"), []byte("FF5A\x00")}, {[]byte("zohiragana\x00"), []byte("305E\x00")}, {[]byte("zokatakana\x00"), []byte("30BE\x00")}, {[]byte("zparen\x00"), []byte("24B5\x00")}, {[]byte("zretroflexhook\x00"), []byte("0290\x00")}, {[]byte("zstroke\x00"), []byte("01B6\x00")}, {[]byte("zuhiragana\x00"), []byte("305A\x00")}, {[]byte("zukatakana\x00"), []byte("30BA\x00")}}

// ligs_utf8 - transpiled function from  trfn_ch.h:2
// ligatures with unicode aliases
var ligs_utf8 [][][]byte = [][][]byte{{[]byte("ﬀ\x00"), []byte("ff\x00")}, {[]byte("ﬁ\x00"), []byte("fi\x00")}, {[]byte("ﬂ\x00"), []byte("fl\x00")}, {[]byte("ﬃ\x00"), []byte("ffi\x00")}, {[]byte("ﬄ\x00"), []byte("ffl\x00")}, {[]byte("ﬆ\x00"), []byte("st\x00")}}

// agl_exceptions - transpiled function from  trfn_ch.h:12
// AGL exceptions
var agl_exceptions [][][]byte = [][][]byte{{[]byte("`\x00"), []byte("ga\x00")}, {[]byte("'\x00"), []byte("aq\x00")}, {[]byte("~\x00"), []byte("ti\x00")}, {[]byte("^\x00"), []byte("ha\x00")}}

// alts - transpiled function from  trfn_ch.h:20
// grave; using quoteleft for `
// quotesingle; using quoteright for '
// asciitilde; using tilde for ~
// asciicircum; using circumflex for ^
// troff aliases
var alts [][][]byte = [][][]byte{{[]byte("’\x00"), []byte("'\x00"), []byte("cq\x00"), nil, nil, nil, nil, nil}, {[]byte("+\x00"), []byte("pl\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("-\x00"), []byte("hy\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("/\x00"), []byte("sl\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("=\x00"), []byte("eq\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\"\x00"), []byte("dq\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\\\x00"), []byte("bs\x00"), []byte("rs\x00"), nil, nil, nil, nil, nil}, {[]byte("_\x00"), []byte("ru\x00"), []byte("ul\x00"), nil, nil, nil, nil, nil}, {[]byte("‘\x00"), []byte("`\x00"), []byte("oq\x00"), nil, nil, nil, nil, nil}, {[]byte("|\x00"), []byte("or\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¡\x00"), []byte("!!\x00"), []byte("r!\x00"), nil, nil, nil, nil, nil}, {[]byte("¢\x00"), []byte("c|\x00"), []byte("ct\x00"), nil, nil, nil, nil, nil}, {[]byte("£\x00"), []byte("L-\x00"), []byte("ps\x00"), nil, nil, nil, nil, nil}, {[]byte("¤\x00"), []byte("xo\x00"), []byte("cr\x00"), nil, nil, nil, nil, nil}, {[]byte("¥\x00"), []byte("Y-\x00"), []byte("yn\x00"), nil, nil, nil, nil, nil}, {[]byte("¦\x00"), []byte("||\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("§\x00"), []byte("so\x00"), []byte("sc\x00"), nil, nil, nil, nil, nil}, {[]byte("©\x00"), []byte("co\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ª\x00"), []byte("a_\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("«\x00"), []byte("<<\x00"), []byte("Fo\x00"), nil, nil, nil, nil, nil}, {[]byte("¬\x00"), []byte("-,\x00"), []byte("no\x00"), nil, nil, nil, nil, nil}, {[]byte("®\x00"), []byte("ro\x00"), []byte("rg\x00"), nil, nil, nil, nil, nil}, {[]byte("°\x00"), []byte("0^\x00"), []byte("de\x00"), nil, nil, nil, nil, nil}, {[]byte("±\x00"), []byte("+-\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("²\x00"), []byte("2^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("³\x00"), []byte("3^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¶\x00"), []byte("P!\x00"), []byte("pg\x00"), nil, nil, nil, nil, nil}, {[]byte("·\x00"), []byte(".^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¹\x00"), []byte("1^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("º\x00"), []byte("o_\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("»\x00"), []byte(">>\x00"), []byte("Fc\x00"), nil, nil, nil, nil, nil}, {[]byte("¼\x00"), []byte("14\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("½\x00"), []byte("12\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¾\x00"), []byte("34\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¿\x00"), []byte("??\x00"), []byte("r?\x00"), nil, nil, nil, nil, nil}, {[]byte("À\x00"), []byte("A`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Á\x00"), []byte("A'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Â\x00"), []byte("A^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ã\x00"), []byte("A~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ä\x00"), []byte("A:\x00"), []byte("A\"\x00"), nil, nil, nil, nil, nil}, {[]byte("Å\x00"), []byte("A*\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Æ\x00"), []byte("AE\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ç\x00"), []byte("C,\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("È\x00"), []byte("E`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("É\x00"), []byte("E'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ê\x00"), []byte("E^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ë\x00"), []byte("E:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ì\x00"), []byte("I`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Í\x00"), []byte("I'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Î\x00"), []byte("I^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ï\x00"), []byte("I:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ð\x00"), []byte("D-\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ñ\x00"), []byte("N~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ò\x00"), []byte("O`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ó\x00"), []byte("O'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ô\x00"), []byte("O^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Õ\x00"), []byte("O~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ö\x00"), []byte("O:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Œ\x00"), []byte("OE\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("×\x00"), []byte("xx\x00"), []byte("mu\x00"), nil, nil, nil, nil, nil}, {[]byte("Ø\x00"), []byte("O/\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ù\x00"), []byte("U`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ú\x00"), []byte("U'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Û\x00"), []byte("U^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ü\x00"), []byte("U:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ý\x00"), []byte("Y'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Þ\x00"), []byte("TH\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ß\x00"), []byte("ss\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("à\x00"), []byte("a`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("á\x00"), []byte("a'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("â\x00"), []byte("a^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ã\x00"), []byte("a~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ä\x00"), []byte("a:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("å\x00"), []byte("a*\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("æ\x00"), []byte("ae\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ç\x00"), []byte("c,\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("è\x00"), []byte("e`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("é\x00"), []byte("e'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ê\x00"), []byte("e^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ë\x00"), []byte("e:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ì\x00"), []byte("i`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("í\x00"), []byte("i'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("î\x00"), []byte("i^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ï\x00"), []byte("i:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ð\x00"), []byte("d-\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ñ\x00"), []byte("n~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ò\x00"), []byte("o`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ó\x00"), []byte("o'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ô\x00"), []byte("o^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("õ\x00"), []byte("o~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ö\x00"), []byte("o:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("œ\x00"), []byte("oe\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("÷\x00"), []byte("di\x00"), []byte("-:\x00"), nil, nil, nil, nil, nil}, {[]byte("ø\x00"), []byte("o/\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ù\x00"), []byte("u`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ú\x00"), []byte("u'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("û\x00"), []byte("u^\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ü\x00"), []byte("u:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ý\x00"), []byte("y'\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("þ\x00"), []byte("th\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ÿ\x00"), []byte("y:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Č\x00"), []byte("C<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("č\x00"), []byte("c<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ď\x00"), []byte("D<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ď\x00"), []byte("d<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ě\x00"), []byte("e<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ň\x00"), []byte("n<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ő\x00"), []byte("O\"\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ő\x00"), []byte("o\"\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ř\x00"), []byte("R<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ř\x00"), []byte("r<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Š\x00"), []byte("S<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("š\x00"), []byte("s<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ť\x00"), []byte("T<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ť\x00"), []byte("t<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ů\x00"), []byte("U*\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ů\x00"), []byte("u*\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ű\x00"), []byte("U\"\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ű\x00"), []byte("u\"\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ÿ\x00"), []byte("Y:\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ž\x00"), []byte("Z<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ž\x00"), []byte("z<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ƒ\x00"), []byte("fn\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¸\x00"), []byte(",,\x00"), []byte(",a\x00"), nil, nil, nil, nil, nil}, {[]byte("´\x00"), []byte("aa\x00"), []byte("\\'\x00"), nil, nil, nil, nil, nil}, {[]byte("¯\x00"), []byte("-a\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("¨\x00"), []byte("\"\"\x00"), []byte(":a\x00"), nil, nil, nil, nil, nil}, {[]byte("ga\x00"), []byte("\\`\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ˆ\x00"), []byte("^\x00"), []byte("^a\x00"), nil, nil, nil, nil, nil}, {[]byte("ˇ\x00"), []byte("va\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("˘\x00"), []byte("Ua\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("˙\x00"), []byte(".a\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("˚\x00"), []byte("oa\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("˛\x00"), []byte("Ca\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("˝\x00"), []byte("\"a\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("˜\x00"), []byte("~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Α\x00"), []byte("*A\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Β\x00"), []byte("*B\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Γ\x00"), []byte("*G\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ε\x00"), []byte("*E\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ζ\x00"), []byte("*Z\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Η\x00"), []byte("*Y\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Θ\x00"), []byte("*H\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ι\x00"), []byte("*I\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Κ\x00"), []byte("*K\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Λ\x00"), []byte("*L\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Μ\x00"), []byte("*M\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ν\x00"), []byte("*N\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ξ\x00"), []byte("*C\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ο\x00"), []byte("*O\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Π\x00"), []byte("*P\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ρ\x00"), []byte("*R\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Σ\x00"), []byte("*S\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Τ\x00"), []byte("*T\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Υ\x00"), []byte("*U\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Φ\x00"), []byte("*F\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Χ\x00"), []byte("*X\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ψ\x00"), []byte("*Q\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("Ω\x00"), []byte("*W\x00"), []byte("Ω\x00"), nil, nil, nil, nil, nil}, {[]byte("Ω\x00"), []byte("Ω\x00"), []byte("*W\x00"), nil, nil, nil, nil, nil}, {[]byte("α\x00"), []byte("*a\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("β\x00"), []byte("*b\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("γ\x00"), []byte("*g\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("δ\x00"), []byte("*d\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ε\x00"), []byte("*e\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ζ\x00"), []byte("*z\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("η\x00"), []byte("*y\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("θ\x00"), []byte("*h\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ι\x00"), []byte("*i\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("κ\x00"), []byte("*k\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("λ\x00"), []byte("*l\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("μ\x00"), []byte("*m\x00"), []byte("µ\x00"), []byte("/u\x00"), nil, nil, nil, nil}, {[]byte("µ\x00"), []byte("/u\x00"), []byte("*m\x00"), []byte("μ\x00"), nil, nil, nil, nil}, {[]byte("ν\x00"), []byte("*n\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ξ\x00"), []byte("*c\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ο\x00"), []byte("*o\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("π\x00"), []byte("*p\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ρ\x00"), []byte("*r\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ς\x00"), []byte("ts\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("σ\x00"), []byte("*s\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("τ\x00"), []byte("*t\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("υ\x00"), []byte("*u\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("φ\x00"), []byte("*f\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("χ\x00"), []byte("*x\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ψ\x00"), []byte("*q\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ω\x00"), []byte("*w\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("–\x00"), []byte("en\x00"), []byte("\\-\x00"), nil, nil, nil, nil, nil}, {[]byte("—\x00"), []byte("em\x00"), []byte("--\x00"), nil, nil, nil, nil, nil}, {[]byte("‚\x00"), []byte("bq\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("“\x00"), []byte("``\x00"), []byte("lq\x00"), nil, nil, nil, nil, nil}, {[]byte("”\x00"), []byte("''\x00"), []byte("rq\x00"), nil, nil, nil, nil, nil}, {[]byte("†\x00"), []byte("dg\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("‡\x00"), []byte("dd\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("•\x00"), []byte("bu\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("…\x00"), []byte("el\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("‰\x00"), []byte("%0\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("′\x00"), []byte("fm\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("‹\x00"), []byte("fo\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("›\x00"), []byte("fc\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⁄\x00"), []byte("fr\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ℑ\x00"), []byte("If\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ℛ\x00"), []byte("ws\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ℜ\x00"), []byte("Rf\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ℵ\x00"), []byte("af\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("←\x00"), []byte("<-\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("↑\x00"), []byte("ua\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("→\x00"), []byte("->\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("↓\x00"), []byte("da\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("↔\x00"), []byte("ab\x00"), []byte("<>\x00"), nil, nil, nil, nil, nil}, {[]byte("↵\x00"), []byte("CR\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∀\x00"), []byte("fa\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∂\x00"), []byte("pd\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∃\x00"), []byte("te\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∅\x00"), []byte("es\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∆\x00"), []byte("*D\x00"), []byte("Δ\x00"), nil, nil, nil, nil, nil}, {[]byte("Δ\x00"), []byte("∆\x00"), []byte("*D\x00"), nil, nil, nil, nil, nil}, {[]byte("∇\x00"), []byte("gr\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∈\x00"), []byte("mo\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∉\x00"), []byte("!m\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∋\x00"), []byte("st\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∏\x00"), []byte("pr\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∑\x00"), []byte("su\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("−\x00"), []byte("mi\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∓\x00"), []byte("-+\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∗\x00"), []byte("**\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("√\x00"), []byte("sr\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∝\x00"), []byte("pt\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∞\x00"), []byte("if\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∠\x00"), []byte("an\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∧\x00"), []byte("l&\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∨\x00"), []byte("l|\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∩\x00"), []byte("ca\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∪\x00"), []byte("cu\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∫\x00"), []byte("is\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∴\x00"), []byte("tf\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("∼\x00"), []byte("ap\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("≅\x00"), []byte("cg\x00"), []byte("=~\x00"), nil, nil, nil, nil, nil}, {[]byte("≈\x00"), []byte("~~\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("≠\x00"), []byte("!=\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("≡\x00"), []byte("==\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("≤\x00"), []byte("<=\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("≥\x00"), []byte(">=\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊂\x00"), []byte("sb\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊃\x00"), []byte("sp\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊄\x00"), []byte("!b\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊆\x00"), []byte("ib\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊇\x00"), []byte("ip\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊕\x00"), []byte("O+\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊗\x00"), []byte("Ox\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⊥\x00"), []byte("pp\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⋅\x00"), []byte("c.\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("〈\x00"), []byte("b<\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("〉\x00"), []byte("b>\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("◊\x00"), []byte("lz\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("○\x00"), []byte("ci\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⟨\x00"), []byte("la\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⟩\x00"), []byte("ra\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf6d9\x00"), []byte("co\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf6da\x00"), []byte("rg\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf6db\x00"), []byte("tm\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8e5\x00"), []byte("rn\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8e6\x00"), []byte("av\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8e7\x00"), []byte("ah\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8e8\x00"), []byte("RG\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8e9\x00"), []byte("CO\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8ea\x00"), []byte("TM\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8eb\x00"), []byte("LT\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8ec\x00"), []byte("br\x00"), []byte("LX\x00"), nil, nil, nil, nil, nil}, {[]byte("\uf8ed\x00"), []byte("LB\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎛\x00"), []byte("LT\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎜\x00"), []byte("LX\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎝\x00"), []byte("LB\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8ee\x00"), []byte("lc\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8ef\x00"), []byte("lx\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f0\x00"), []byte("lf\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎡\x00"), []byte("lc\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎢\x00"), []byte("lx\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎣\x00"), []byte("lf\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f1\x00"), []byte("lt\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f2\x00"), []byte("lk\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f3\x00"), []byte("lb\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f4\x00"), []byte("bv\x00"), []byte("|\x00"), nil, nil, nil, nil, nil}, {[]byte("⎧\x00"), []byte("lt\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎨\x00"), []byte("lk\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎩\x00"), []byte("lb\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎪\x00"), []byte("bv\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f6\x00"), []byte("RT\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f7\x00"), []byte("RX\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f8\x00"), []byte("RB\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎞\x00"), []byte("RT\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎟\x00"), []byte("RX\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎠\x00"), []byte("RB\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8f9\x00"), []byte("rc\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8fa\x00"), []byte("rx\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8fb\x00"), []byte("rf\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎤\x00"), []byte("rc\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎥\x00"), []byte("rx\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎦\x00"), []byte("rf\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8fc\x00"), []byte("rt\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8fd\x00"), []byte("rk\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("\uf8fe\x00"), []byte("rb\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎫\x00"), []byte("rt\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎬\x00"), []byte("rk\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("⎭\x00"), []byte("rb\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﬀ\x00"), []byte("ff\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﬁ\x00"), []byte("fi\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﬂ\x00"), []byte("fl\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﬃ\x00"), []byte("ffi\x00"), []byte("Fi\x00"), nil, nil, nil, nil, nil}, {[]byte("ﬄ\x00"), []byte("ffl\x00"), []byte("Fl\x00"), nil, nil, nil, nil, nil}, {[]byte("ﬆ\x00"), []byte("st\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺀ\x00"), []byte("ء\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺁ\x00"), []byte("آ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺃ\x00"), []byte("أ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺅ\x00"), []byte("ؤ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺇ\x00"), []byte("إ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺉ\x00"), []byte("ئ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺍ\x00"), []byte("ا\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺏ\x00"), []byte("ب\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺓ\x00"), []byte("ة\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺕ\x00"), []byte("ت\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺙ\x00"), []byte("ث\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺝ\x00"), []byte("ج\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺡ\x00"), []byte("ح\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺥ\x00"), []byte("خ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺩ\x00"), []byte("د\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺫ\x00"), []byte("ذ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺭ\x00"), []byte("ر\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺯ\x00"), []byte("ز\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺱ\x00"), []byte("س\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺵ\x00"), []byte("ش\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺹ\x00"), []byte("ص\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﺽ\x00"), []byte("ض\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻁ\x00"), []byte("ط\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻅ\x00"), []byte("ظ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻉ\x00"), []byte("ع\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻍ\x00"), []byte("غ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ـ\x00"), []byte("ـ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻑ\x00"), []byte("ف\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻕ\x00"), []byte("ق\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻙ\x00"), []byte("ك\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻝ\x00"), []byte("ل\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻡ\x00"), []byte("م\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻥ\x00"), []byte("ن\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻩ\x00"), []byte("ه\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻭ\x00"), []byte("و\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻯ\x00"), []byte("ى\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﻱ\x00"), []byte("ي\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﭖ\x00"), []byte("پ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﭺ\x00"), []byte("چ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﮊ\x00"), []byte("ژ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﮎ\x00"), []byte("ک\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﮒ\x00"), []byte("گ\x00"), nil, nil, nil, nil, nil, nil}, {[]byte("ﯼ\x00"), []byte("ی\x00"), nil, nil, nil, nil, nil, nil}}

// achar - transpiled function from  trfn_ch.h:374
// different shapes of arabic and farsi characters
type achar struct {
	name []byte
	c    uint32
	s    uint32
	i    uint32
	m    uint32
	f    uint32
}

// achars - transpiled function from  trfn_ch.h:374
var achars []achar = []achar{{[]byte("hamza\x00"), 1569, 65152, 0, 0, 0}, {[]byte("alefwithmaddaabove\x00"), 1570, 65153, 0, 0, 65154}, {[]byte("alefwithhamzaabove\x00"), 1571, 65155, 0, 0, 65156}, {[]byte("wawwithhamzaabove\x00"), 1572, 65157, 0, 0, 65158}, {[]byte("alefwithhamzabelow\x00"), 1573, 65159, 0, 0, 65160}, {[]byte("yehwithhamzaabove\x00"), 1574, 65161, 65163, 65164, 65162}, {[]byte("alef\x00"), 1575, 65165, 0, 0, 65166}, {[]byte("arabicalef\x00"), 1575, 0, 0, 0, 0}, {[]byte("beh\x00"), 1576, 65167, 65169, 65170, 65168}, {[]byte("tehmarbuta\x00"), 1577, 65171, 0, 0, 65172}, {[]byte("teh\x00"), 1578, 65173, 65175, 65176, 65174}, {[]byte("theh\x00"), 1579, 65177, 65179, 65180, 65178}, {[]byte("jeem\x00"), 1580, 65181, 65183, 65184, 65182}, {[]byte("hah\x00"), 1581, 65185, 65187, 65188, 65186}, {[]byte("khah\x00"), 1582, 65189, 65191, 65192, 65190}, {[]byte("dal\x00"), 1583, 65193, 0, 0, 65194}, {[]byte("thal\x00"), 1584, 65195, 0, 0, 65196}, {[]byte("reh\x00"), 1585, 65197, 0, 0, 65198}, {[]byte("zain\x00"), 1586, 65199, 0, 0, 65200}, {[]byte("seen\x00"), 1587, 65201, 65203, 65204, 65202}, {[]byte("sheen\x00"), 1588, 65205, 65207, 65208, 65206}, {[]byte("sad\x00"), 1589, 65209, 65211, 65212, 65210}, {[]byte("dad\x00"), 1590, 65213, 65215, 65216, 65214}, {[]byte("tah\x00"), 1591, 65217, 65219, 65220, 65218}, {[]byte("zah\x00"), 1592, 65221, 65223, 65224, 65222}, {[]byte("ain\x00"), 1593, 65225, 65227, 65228, 65226}, {[]byte("ghain\x00"), 1594, 65229, 65231, 65232, 65230}, {[]byte("tatweel\x00"), 1600, 0, 0, 0, 0}, {[]byte("feh\x00"), 1601, 65233, 65235, 65236, 65234}, {[]byte("qaf\x00"), 1602, 65237, 65239, 65240, 65238}, {[]byte("kaf\x00"), 1603, 65241, 65243, 65244, 65242}, {[]byte("lam\x00"), 1604, 65245, 65247, 65248, 65246}, {[]byte("meem\x00"), 1605, 65249, 65251, 65252, 65250}, {[]byte("noon\x00"), 1606, 65253, 65255, 65256, 65254}, {[]byte("heh\x00"), 1607, 65257, 65259, 65260, 65258}, {[]byte("waw\x00"), 1608, 65261, 0, 0, 65262}, {[]byte("alefmaksura\x00"), 1609, 65263, 0, 0, 65264}, {[]byte("yeh\x00"), 1610, 65265, 65267, 65268, 65266}, {[]byte("fathatan\x00"), 1611, 65136, 0, 0, 0}, {[]byte("dammatan\x00"), 1612, 65138, 0, 0, 0}, {[]byte("kasratan\x00"), 1613, 65140, 0, 0, 0}, {[]byte("fatha\x00"), 1614, 65142, 0, 65143, 0}, {[]byte("damma\x00"), 1615, 65144, 0, 65145, 0}, {[]byte("kasra\x00"), 1616, 65146, 0, 65147, 0}, {[]byte("shadda\x00"), 1617, 65148, 0, 65148, 0}, {[]byte("sukun\x00"), 1618, 65150, 0, 65151, 0}, {[]byte("peh\x00"), 1662, 64342, 64344, 64345, 64343}, {[]byte("tcheh\x00"), 1670, 64378, 64380, 64381, 64379}, {[]byte("jeh\x00"), 1688, 64394, 0, 0, 64395}, {[]byte("keheh\x00"), 1705, 64398, 64400, 64401, 64399}, {[]byte("gaf\x00"), 1711, 64402, 64404, 64405, 64403}, {[]byte("farsiyeh\x00"), 1740, 64508, 64510, 64511, 64509}, {[]byte("lamwithalef\x00"), 65275, 65275, 0, 0, 65276}, {[]byte("arabiccomma\x00"), 1548, 0, 0, 0, 0}, {[]byte("arabicsemicolon\x00"), 1563, 0, 0, 0, 0}, {[]byte("arabicquestionmark\x00"), 1567, 0, 0, 0, 0}, {[]byte("arabicindicdigitzero\x00"), 1632, 0, 0, 0, 0}, {[]byte("arabicindicdigitone\x00"), 1633, 0, 0, 0, 0}, {[]byte("arabicindicdigittwo\x00"), 1634, 0, 0, 0, 0}, {[]byte("arabicindicdigitthree\x00"), 1635, 0, 0, 0, 0}, {[]byte("arabicindicdigitfour\x00"), 1636, 0, 0, 0, 0}, {[]byte("arabicindicdigitfive\x00"), 1637, 0, 0, 0, 0}, {[]byte("arabicindicdigitsix\x00"), 1638, 0, 0, 0, 0}, {[]byte("arabicindicdigitseven\x00"), 1639, 0, 0, 0, 0}, {[]byte("arabicindicdigiteight\x00"), 1640, 0, 0, 0, 0}, {[]byte("arabicindicdigitnine\x00"), 1641, 0, 0, 0, 0}, {[]byte("arabicpercentsign\x00"), 1642, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitzero\x00"), 1776, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitone\x00"), 1777, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigittwo\x00"), 1778, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitthree\x00"), 1779, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitfour\x00"), 1780, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitfive\x00"), 1781, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitsix\x00"), 1782, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitseven\x00"), 1783, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigiteight\x00"), 1784, 0, 0, 0, 0}, {[]byte("extendedarabicindicdigitnine\x00"), 1785, 0, 0, 0, 0}, {[]byte("zeronojoin\x00"), 8204, 0, 0, 0, 0}, {[]byte("zerojoin\x00"), 8205, 0, 0, 0, 0}}

// ctype_ascii - transpiled function from  trfn_ch.h:463
var ctype_ascii []int32 = []int32{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 1, 0, 0, 2, 0, 2, 0, 2, 1, 2, 2, 3, 2, 2, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 3, 3, 3, 0, 0}

// sbuf_char - transpiled function from  trfn.c:15
// for buffering the output
// character definitions
var sbuf_char []sbuf

// mkfn_ligs - transpiled function from  trfn.c:17
// handling ligatures
// font ligatures
var mkfn_ligs []byte = make([]byte, 8192)

// mkfn_ligs2 - transpiled function from  trfn.c:18
// font ligatures, whose length is two
var mkfn_ligs2 []byte = make([]byte, 8192)

// mkfn_asc - transpiled function from  trfn.c:20
// character type
// minimum height of glyphs with ascender
var mkfn_asc int32

// mkfn_desc - transpiled function from  trfn.c:21
// minimum depth of glyphs with descender
var mkfn_desc int32

// tab_agl - transpiled function from  trfn.c:23
// lookup tables
// adobe glyph list table
var tab_agl []tab

// tab_alts - transpiled function from  trfn.c:24
// character aliases table
var tab_alts []tab

// utf8len - transpiled function from  trfn.c:26
func utf8len(c int32) int32 {
	if c > 0 && c <= 127 {
		return 1
	}
	if c >= 252 {
		return 6
	}
	if c >= 248 {
		return 5
	}
	if c >= 240 {
		return 4
	}
	if c >= 224 {
		return 3
	}
	if c >= 192 {
		return 2
	}
	return noarch.BoolToInt(c != 0)
}

// utf8get - transpiled function from  trfn.c:43
func utf8get(src [][]byte) int32 {
	var result int32
	var l int32 = 1
	var s []byte = src[0]
	if ^int32((uint8((src[0])[0])))&192 != 0 {
		return int32(uint8((func() []byte {
			tempVar1 := src[0]
			defer func() {
				src[0] = src[0][1:]
			}()
			return tempVar1
		}())[0]))
	}
	for l < 6 && int32(uint8(s[0]))&(64>>uint64(l)) != 0 {
		l++
	}
	result = 63 >> uint64(l) & int32(uint8((func() []byte {
		defer func() {
			s = s[0+1:]
		}()
		return s
	}())[0]))
	for func() int32 {
		defer func() {
			l--
		}()
		return l
	}() != 0 {
		result = result<<uint64(6) | int32(uint8((func() []byte {
			defer func() {
				s = s[0+1:]
			}()
			return s
		}())[0]))&63
	}
	src[0] = s
	return result
}

// utf8put - transpiled function from  trfn.c:59
func utf8put(d [][]byte, c int32) {
	var l int32
	if c > 65535 {
		(func() []byte {
			tempVar1 := d[0]
			defer func() {
				d[0] = d[0][1:]
			}()
			return tempVar1
		}())[0] = byte(240 | c>>uint64(18))
		l = 3
	} else if c > 2047 {
		(func() []byte {
			tempVar1 := d[0]
			defer func() {
				d[0] = d[0][1:]
			}()
			return tempVar1
		}())[0] = byte(224 | c>>uint64(12))
		l = 2
	} else if c > 127 {
		(func() []byte {
			tempVar1 := d[0]
			defer func() {
				d[0] = d[0][1:]
			}()
			return tempVar1
		}())[0] = byte(192 | c>>uint64(6))
		l = 1
	} else {
		(func() []byte {
			tempVar1 := d[0]
			defer func() {
				d[0] = d[0][1:]
			}()
			return tempVar1
		}())[0] = byte(func() int32 {
			if c > 0 {
				return c
			}
			return int32(' ')
		}())
	}
	for func() int32 {
		defer func() {
			l--
		}()
		return l
	}() != 0 {
		(func() []byte {
			tempVar1 := d[0]
			defer func() {
				d[0] = d[0][1:]
			}()
			return tempVar1
		}())[0] = byte(128 | c>>uint64(l*6)&63)
	}
	(d[0])[0] = '\x00'
}

// hexval - transpiled function from  trfn.c:79
func hexval(s []byte, len_ int32) int32 {
	var digs []byte = []byte("0123456789ABCDEF\x00")
	var n int32
	var i int32
	for i = 0; i < len_; i++ {
		if int32(s[i]) != 0 && noarch.Strchr(digs, int32(s[i])) != nil {
			n = n*16 + int32((func() int64 {
				c4go_temp_name := noarch.Strchr(digs, int32(s[i]))
				return int64(uintptr(unsafe.Pointer(*(**byte)(unsafe.Pointer(&c4go_temp_name)))))
			}() - int64(uintptr(unsafe.Pointer(&digs[0])))/int64(1)))
		} else {
			break
		}
	}
	if i < 4 {
		return -1
	}
	return n
}

// agl_map - transpiled function from  trfn.c:93
func agl_map(d []byte, s []byte) int32 {
	// unicode code point like "FB8E"
	var u []byte = tab_get(tab_agl, s).([]byte)
	if u == nil {
		return 1
	}
	for u != nil && int32(u[0]) != 0 {
		for int32(u[0]) == int32(' ') {
			u = u[0+1:]
		}
		utf8put((*[1000000][]byte)(unsafe.Pointer(&d))[:], hexval(u, 6))
		u = noarch.Strchr(u, int32(' '))
	}
	d[0] = '\x00'
	return 0
}

// achar_map - transpiled function from  trfn.c:108
func achar_map(name []byte) int32 {
	var i int32
	for i = 0; uint32(i) < 3160/40; i++ {
		var a []achar = achars[i:]
		if noarch.Not(strncmp(a[0].name, name, uint32(noarch.Strlen(a[0].name)))) {
			var postfix []byte = name[0+noarch.Strlen(a[0].name):]
			if noarch.Not(postfix[0]) {
				return int32(a[0].c)
			}
			if noarch.Not(noarch.Strcmp([]byte("isolated\x00"), postfix)) {
				return int32(func() uint32 {
					if a[0].s != 0 {
						return a[0].s
					}
					return a[0].c
				}())
			}
			if noarch.Not(noarch.Strcmp([]byte("initial\x00"), postfix)) {
				return int32(func() uint32 {
					if a[0].i != 0 {
						return a[0].i
					}
					return a[0].c
				}())
			}
			if noarch.Not(noarch.Strcmp([]byte("medial\x00"), postfix)) {
				return int32(func() uint32 {
					if a[0].m != 0 {
						return a[0].m
					}
					return a[0].c
				}())
			}
			if noarch.Not(noarch.Strcmp([]byte("final\x00"), postfix)) {
				return int32(func() uint32 {
					if a[0].f != 0 {
						return a[0].f
					}
					return a[0].c
				}())
			}
		}
	}
	return 0
}

// achar_shape - transpiled function from  trfn.c:130
func achar_shape(c int32, pjoin int32, njoin int32) int32 {
	var i int32
	for i = 0; uint32(i) < 3160/40; i++ {
		var a []achar = achars[i:]
		if a[0].c == uint32(c) {
			if noarch.Not(pjoin) && noarch.Not(njoin) {
				return int32(a[0].c)
			}
			if noarch.Not(pjoin) && njoin != 0 {
				return int32(func() uint32 {
					if a[0].i != 0 {
						return a[0].i
					}
					return a[0].c
				}())
			}
			if pjoin != 0 && njoin != 0 {
				return int32(func() uint32 {
					if a[0].m != 0 {
						return a[0].m
					}
					return a[0].c
				}())
			}
			if pjoin != 0 && noarch.Not(njoin) {
				return int32(func() uint32 {
					if a[0].f != 0 {
						return a[0].f
					}
					return a[0].c
				}())
			}
		}
	}
	return c
}

// ashape - transpiled function from  trfn.c:149
func ashape(str []byte, ext []byte) {
	var s []int32 = make([]int32, 8)
	var src []byte = str
	var i int32
	var l int32
	var bjoin int32 = noarch.BoolToInt(noarch.Not(noarch.Strcmp([]byte(".medi\x00"), ext)) || noarch.Not(noarch.Strcmp([]byte(".fina\x00"), ext)))
	var ejoin int32 = noarch.BoolToInt(noarch.Not(noarch.Strcmp([]byte(".medi\x00"), ext)) || noarch.Not(noarch.Strcmp([]byte(".init\x00"), ext)))
	for l = 0; l < 8 && int32(src[0]) != 0; l++ {
		s[l] = utf8get((*[1000000][]byte)(unsafe.Pointer(&src))[:])
	}
	for i = 0; i < l; i++ {
		s[i] = achar_shape(s[i], noarch.BoolToInt(i > 0 || bjoin != 0), noarch.BoolToInt(i < l-1 || ejoin != 0))
	}
	for i = 0; i < l; i++ {
		utf8put((*[1000000][]byte)(unsafe.Pointer(&str))[:], s[i])
	}
}

// trfn_name - transpiled function from  trfn.c:165
func trfn_name(dst []byte, src []byte, codepoint int32) int32 {
	// find the utf-8 name of src with the given unicode codepoint
	var ch []byte = make([]byte, 64)
	var d []byte = dst
	var s []byte
	var i int32
	if codepoint != 0 {
		utf8put((*[1000000][]byte)(unsafe.Pointer(&dst))[:], codepoint)
		return 0
	}
	if src == nil || int32(src[0]) == int32('.') {
		return 1
	}
	for int32(src[0]) != 0 && int32(src[0]) != int32('.') {
		s = ch
		if int32(src[0]) == int32('_') {
			src = src[0+1:]
		}
		for int32(src[0]) != 0 && int32(src[0]) != int32('_') && int32(src[0]) != int32('.') {
			(func() []byte {
				defer func() {
					s = s[0+1:]
				}()
				return s
			}())[0] = (func() []byte {
				defer func() {
					src = src[0+1:]
				}()
				return src
			}())[0]
		}
		s[0] = '\x00'
		if noarch.Not(agl_map(d, ch)) {
			d = noarch.Strchr(d, int32('\x00'))
		} else if int32(ch[0]) == int32('u') && int32(ch[1]) == int32('n') && int32(ch[2]) == int32('i') && hexval(ch[0+3:], 4) > 0 {
			for i = 0; noarch.Strlen(ch[0+3+4*i:]) >= int32(4); i++ {
				utf8put((*[1000000][]byte)(unsafe.Pointer(&d))[:], hexval(ch[0+3+4*i:], 4))
			}
		} else if int32(ch[0]) == int32('u') && hexval(ch[0+1:], 4) > 0 {
			utf8put((*[1000000][]byte)(unsafe.Pointer(&d))[:], hexval(ch[0+1:], 6))
		} else if achar_map(ch) != 0 {
			utf8put((*[1000000][]byte)(unsafe.Pointer(&d))[:], achar_map(ch))
		} else {
			return 1
		}
	}
	ashape(dst, src)
	return noarch.BoolToInt(int32(src[0]) != 0 && noarch.Strcmp(src, []byte(".medi\x00")) != 0 && noarch.Strcmp(src, []byte(".fina\x00")) != 0 && noarch.Strcmp(src, []byte(".init\x00")) != 0 && noarch.Strcmp(src, []byte(".isol\x00")) != 0)
}

// trfn_aglexceptions - transpiled function from  trfn.c:203
func trfn_aglexceptions(dst []byte) {
	var i int32
	for i = 0; uint32(i) < 64/16; i++ {
		if noarch.Not(noarch.Strcmp(agl_exceptions[i][0], dst)) {
			noarch.Strcpy(dst, agl_exceptions[i][1])
		}
	}
}

// trfn_ligput - transpiled function from  trfn.c:211
func trfn_ligput(c []byte) {
	var dst []byte = func() []byte {
		if noarch.Strlen(c) == int32(2) {
			return mkfn_ligs2
		}
		return mkfn_ligs
	}()
	noarch.Sprintf(noarch.Strchr(dst, int32('\x00')), []byte("%s \x00"), c)
}

// trfn_lig - transpiled function from  trfn.c:217
func trfn_lig(c []byte) {
	var i int32
	for i = 0; uint32(i) < 64/16; i++ {
		if noarch.Not(noarch.Strcmp(agl_exceptions[i][1], c)) {
			return
		}
	}
	if int32(c[0]) != 0 && int32(c[1]) != 0 && noarch.Strlen(c) > int32(uint32(utf8len(int32(uint8(c[0]))))) {
		trfn_ligput(c)
	} else {
		for i = 0; uint32(i) < 96/16; i++ {
			if noarch.Not(noarch.Strcmp(ligs_utf8[i][0], c)) {
				trfn_ligput(ligs_utf8[i][1])
			}
		}
	}
}

// trfn_type - transpiled function from  trfn.c:232
func trfn_type(s []byte, lly int32, ury int32) int32 {
	var typ int32
	var c int32 = func() int32 {
		if noarch.Not(s[0]) || int32(s[1]) != 0 {
			return 0
		}
		return int32(uint8(s[0]))
	}()
	if c == int32('t') && noarch.Not(mkfn_asc) {
		mkfn_asc = ury
	}
	if (c == int32('g') || c == int32('j') || c == int32('p') || c == int32('q') || c == int32('y')) && (noarch.Not(mkfn_desc) || mkfn_desc < lly) {
		mkfn_desc = lly
	}
	if noarch.Not(mkfn_desc) || noarch.Not(mkfn_asc) {
		if c > 0 && c < 128 {
			return ctype_ascii[c]
		}
		return 3
	}
	if noarch.Not(mkfn_desc) || lly <= mkfn_desc {
		typ |= 1
	}
	if noarch.Not(mkfn_asc) || ury >= mkfn_asc {
		typ |= 2
	}
	return typ
}

// mkfn_char - transpiled function from  trfn.c:254
func mkfn_char(psname []byte, n int32, u int32, wid int32, llx int32, lly int32, urx int32, ury int32) {
	// n is the position and u is the unicode codepoint
	// mapping unicode character
	var uc []byte = make([]byte, 64)
	// troff character names
	var a_tr [][]byte
	// postscript character position/name
	var pos []byte = []byte("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
	// character type
	var typ int32
	if trfn_name(uc, psname, u) != 0 {
		// initializing character attributes
		noarch.Strcpy(uc, []byte("---\x00"))
	}
	trfn_aglexceptions(uc)
	if mkfn_pos != 0 && n >= 0 && n < 256 {
		noarch.Sprintf(pos, []byte("%d\x00"), n)
	}
	if mkfn_pos != 0 && n < 0 && noarch.Not(uc[1]) && int32(uc[0]) >= 32 && int32(uc[0]) <= 125 {
		if noarch.Strchr(psname, int32('.')) == nil {
			noarch.Sprintf(pos, []byte("%d\x00"), int32(uc[0]))
		}
	}
	typ = trfn_type(func() []byte {
		if noarch.Strchr(psname, int32('.')) == nil {
			return uc
		}
		return []byte("\x00")
	}(), lly, ury)
	if noarch.Not(mkfn_swid) && (noarch.Not(noarch.Strcmp([]byte(" \x00"), uc)) || noarch.Not(noarch.Strcmp([]byte("\u00a0\x00"), uc))) {
		mkfn_swid = wid
	}
	if int32(((__ctype_b_loc())[0])[int32(uint8(uc[0]))])&int32(uint16(noarch.ISspace)) != 0 || noarch.Strchr(uc, int32(' ')) != nil {
		// printing troff charset
		// space not allowed in char names
		noarch.Strcpy(uc, []byte("---\x00"))
	}
	if noarch.Strcmp([]byte("---\x00"), uc) != 0 {
		trfn_lig(uc)
	}
	sbuf_printf(sbuf_char, []byte("char %s\t%d\x00"), uc, wid)
	if mkfn_bbox != 0 && (llx != 0 || lly != 0 || urx != 0 || ury != 0) {
		sbuf_printf(sbuf_char, []byte(",%d,%d,%d,%d\x00"), llx, lly, urx, ury)
	}
	sbuf_printf(sbuf_char, []byte("\t%d\t%s\t%s\n\x00"), typ, psname, pos)
	a_tr = tab_get(tab_alts, uc).([][]byte)
	for len(a_tr) == 0 && len(a_tr[0]) == 0 {
		sbuf_printf(sbuf_char, []byte("char %s\t\"\n\x00"), (func() [][]byte {
			defer func() {
				a_tr = a_tr[0+1:]
			}()
			return a_tr
		}())[0])
	}
}

// mkfn_kern - transpiled function from  trfn.c:287
func mkfn_kern(c1 []byte, c2 []byte, x int32) {
	if x != 0 && noarch.Abs(x) >= mkfn_kmin {
		if noarch.Not(mkfn_dry) {
			noarch.Printf([]byte("kern %s\t%s\t%d\n\x00"), c1, c2, x)
		}
	}
}

// trfn_header - transpiled function from  trfn.c:295
func trfn_header() {
	// print spacewidth and ligature lines
	noarch.Printf([]byte("spacewidth %d\n\x00"), mkfn_swid)
	if noarch.Not(mkfn_noligs) {
		noarch.Printf([]byte("ligatures %s%s0\n\x00"), mkfn_ligs, mkfn_ligs2)
	}
}

// trfn_cdefs - transpiled function from  trfn.c:303
func trfn_cdefs() {
	// print character definitions
	noarch.Fputs(sbuf_buf(sbuf_char), noarch.Stdout)
}

// trfn_init - transpiled function from  trfn.c:308
func trfn_init() {
	var i int32
	sbuf_char = sbuf_make()
	tab_agl = tab_alloc(int32(68496 / 16))
	for i = 0; uint32(i) < 68496/16; i++ {
		tab_put(tab_agl, agl[i][0], agl[i][1])
	}
	tab_alts = tab_alloc(int32(22592 / 64))
	for i = 0; uint32(i) < 22592/64; i++ {
		tab_put(tab_alts, alts[i][0], (alts[i])[0+1:])
	}
}

// trfn_done - transpiled function from  trfn.c:320
func trfn_done() {
	sbuf_free(sbuf_char)
	tab_free(tab_alts)
	if tab_agl != nil {
		tab_free(tab_agl)
	}
}

// c4goUnsafeConvert_gctx : created by c4go
func c4goUnsafeConvert_gctx(c4go_name *gctx) []gctx {
	return (*[1000000]gctx)(unsafe.Pointer(c4go_name))[:]
}

// c4goUnsafeConvert_int32 : created by c4go
func c4goUnsafeConvert_int32(c4go_name *int32) []int32 {
	return (*[1000000]int32)(unsafe.Pointer(c4go_name))[:]
}

// c4goUnsafeConvert_otf : created by c4go
func c4goUnsafeConvert_otf(c4go_name *otf) []otf {
	return (*[1000000]otf)(unsafe.Pointer(c4go_name))[:]
}

// __ctype_b_loc from ctype.h
// c function : const unsigned short int** __ctype_b_loc()
// dep pkg    : unicode
// dep func   :
func __ctype_b_loc() [][]uint16 {
	var characterTable []uint16

	for i := 0; i < 255; i++ {
		var c uint16

		// Each of the bitwise expressions below were copied from the enum
		// values, like _ISupper, etc.

		if unicode.IsUpper(rune(i)) {
			c |= ((1 << (0)) << 8)
		}

		if unicode.IsLower(rune(i)) {
			c |= ((1 << (1)) << 8)
		}

		if unicode.IsLetter(rune(i)) {
			c |= ((1 << (2)) << 8)
		}

		if unicode.IsDigit(rune(i)) {
			c |= ((1 << (3)) << 8)
		}

		if unicode.IsDigit(rune(i)) ||
			(i >= 'a' && i <= 'f') ||
			(i >= 'A' && i <= 'F') {
			// IsXDigit. This is the same implementation as the Mac version.
			// There may be a better way to do this.
			c |= ((1 << (4)) << 8)
		}

		if unicode.IsSpace(rune(i)) {
			c |= ((1 << (5)) << 8)
		}

		if unicode.IsPrint(rune(i)) {
			c |= ((1 << (6)) << 8)
		}

		// The IsSpace check is required because Go treats spaces as graphic
		// characters, which C does not.
		if unicode.IsGraphic(rune(i)) && !unicode.IsSpace(rune(i)) {
			c |= ((1 << (7)) << 8)
		}

		// http://www.cplusplus.com/reference/cctype/isblank/
		// The standard "C" locale considers blank characters the tab
		// character ('\t') and the space character (' ').
		if i == int('\t') || i == int(' ') {
			c |= ((1 << (8)) >> 8)
		}

		if unicode.IsControl(rune(i)) {
			c |= ((1 << (9)) >> 8)
		}

		if unicode.IsPunct(rune(i)) {
			c |= ((1 << (10)) >> 8)
		}

		if unicode.IsLetter(rune(i)) || unicode.IsDigit(rune(i)) {
			c |= ((1 << (11)) >> 8)
		}

		// Yes, I know this is a hideously slow way to do it but I just want to
		// test if this works right now.
		characterTable = append(characterTable, c)
	}
	return [][]uint16{characterTable}
}

// memcpy is function from string.h.
// c function : void * memcpy( void * , const void * , size_t )
// dep pkg    : reflect
// dep func   :
func memcpy(dst, src interface{}, size uint32) interface{} {
	switch reflect.TypeOf(src).Kind() {
	case reflect.Slice:
		s := reflect.ValueOf(src)
		d := reflect.ValueOf(dst)
		if s.Len() == 0 {
			return dst
		}
		if s.Len() > 0 {
			size /= uint32(int(s.Index(0).Type().Size()))
		}
		var val reflect.Value
		for i := 0; i < int(size); i++ {
			if i < s.Len() {
				val = s.Index(i)
			}
			d.Index(i).Set(val)
		}
	}
	return dst
}

// Warning cannot generate argument binding function `htonl`: cannot resolve type 'uint32_t' : I couldn't find an appropriate Go type for the C type 'uint32_t'.
// Warning cannot generate argument binding function `htons`: cannot resolve type 'uint16_t' : I couldn't find an appropriate Go type for the C type 'uint16_t'.

// strncmp - add c-binding for implemention function
func strncmp(arg0 []byte, arg1 []byte, arg2 uint32) int32 {
	return int32(C.strncmp((*C.char)(unsafe.Pointer(&arg0[0])), (*C.char)(unsafe.Pointer(&arg1[0])), C.ulong(arg2)))
}

// va_list is C4GO implementation of va_list from "stdarg.h"
type va_list struct {
	position int
	Slice    []interface{}
}

func create_va_list(list []interface{}) *va_list {
	return &va_list{
		position: 0,
		Slice:    list,
	}
}

func va_start(v *va_list, count interface{}) {
	v.position = 0
}

func va_end(v *va_list) {
	// do nothing
}

func va_arg(v *va_list) interface{} {
	defer func() {
		v.position++
	}()
	value := v.Slice[v.position]
	switch value.(type) {
	case int:
		return int32(value.(int))
	default:
		return value
	}
}
